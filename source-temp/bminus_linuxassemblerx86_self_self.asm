
.text
.globl _start
_start:
                        call              main
                        movl              $1, %eax
                        movl              $0, %ebx
                        int               $0x80

                                                            # #ifndef VC_IDE
                                                            # #line 2 "globals.h"
                                                            # #endif
                                                            # 
                                                            # enum {
                                                            #     False = 0,
                                                            #     True = 1
                                                            # };
                                                            # 
                                                            # enum {
                                                            #     Str_size = 256,
                                                            #     Source_buffer_length = 1048576
                                                            # };
                                                            # 
                                                            # #ifndef _MSC_VER
                                                            # #line 2 "stringlib.h"
                                                            # #endif
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # write(char str[]) {
write:                  enter             $36, $0
                                                            # 	int i;
                                                            # 
                                                            # 	i = 0;
                        movl              $0, %eax
                        movl              %eax, -4(%ebp)
                                                            # 	while (str[i] != 0) {
while_0_test:           movl              -4(%ebp), %eax
                        movl              %eax, %ebx
                        lea               (,%ebx,4), %eax
                        movl              %eax, -8(%ebp)
                        movl              8(%ebp), %eax
                        addl              -8(%ebp), %eax
                        movl              %eax, %ebx
                        movl              (%ebx), %eax
                        movl              %eax, -8(%ebp)
                        movl              $0, %eax
                        subl              -8(%ebp), %eax
                        jne               compare_1_true
                        movl              $0, %eax
                        jmp               compare_1_false
compare_1_true:         movl              $1, %eax
compare_1_false:        cmpl              $0, %eax
                        jz                while_0_end
                                                            # 		fputc(str[i], stdout);
                        movl              -4(%ebp), %eax
                        movl              %eax, %ebx
                        lea               (,%ebx,4), %eax
                        movl              %eax, -8(%ebp)
                        movl              8(%ebp), %eax
                        addl              -8(%ebp), %eax
                        movl              %eax, %ebx
                        movl              (%ebx), %eax
                        pushl             %eax
                        movl              $4, %eax
                        movl              $1, %ebx
                        movl              %esp, %ecx
                        movl              $1, %edx
                        int               $0x80
                        addl              $4, %esp
                                                            # 		i = i + 1;
                        movl              -4(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              $1, %eax
                        addl              -8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                                                            # 	}
                                                            # }
                        jmp               while_0_test
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # writeln(char str[]) {
while_0_end:
write_end:
                        leave
                        ret
writeln:                enter             $32, $0
                                                            # 	write(str);
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              write
                        addl              $4, %esp
                                                            # 	fputc('\n', stdout);
                        movl              $10, %eax
                        pushl             %eax
                        movl              $4, %eax
                        movl              $1, %ebx
                        movl              %esp, %ecx
                        movl              $1, %edx
                        int               $0x80
                        addl              $4, %esp
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # write_stderr(char str[]) {
writeln_end:
                        leave
                        ret
write_stderr:           enter             $36, $0
                                                            # 	int i;
                                                            # 
                                                            # 	i = 0;
                        movl              $0, %eax
                        movl              %eax, -4(%ebp)
                                                            # 	while (str[i] != 0) {
while_2_test:           movl              -4(%ebp), %eax
                        movl              %eax, %ebx
                        lea               (,%ebx,4), %eax
                        movl              %eax, -8(%ebp)
                        movl              8(%ebp), %eax
                        addl              -8(%ebp), %eax
                        movl              %eax, %ebx
                        movl              (%ebx), %eax
                        movl              %eax, -8(%ebp)
                        movl              $0, %eax
                        subl              -8(%ebp), %eax
                        jne               compare_3_true
                        movl              $0, %eax
                        jmp               compare_3_false
compare_3_true:         movl              $1, %eax
compare_3_false:        cmpl              $0, %eax
                        jz                while_2_end
                                                            # 		fputc(str[i], stderr);
                        movl              -4(%ebp), %eax
                        movl              %eax, %ebx
                        lea               (,%ebx,4), %eax
                        movl              %eax, -8(%ebp)
                        movl              8(%ebp), %eax
                        addl              -8(%ebp), %eax
                        movl              %eax, %ebx
                        movl              (%ebx), %eax
                        pushl             %eax
                        movl              $4, %eax
                        movl              $2, %ebx
                        movl              %esp, %ecx
                        movl              $1, %edx
                        int               $0x80
                        addl              $4, %esp
                                                            # 		i = i + 1;
                        movl              -4(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              $1, %eax
                        addl              -8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                                                            # 	}
                                                            # }
                        jmp               while_2_test
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # writeln_stderr(char str[]) {
while_2_end:
write_stderr_end:
                        leave
                        ret
writeln_stderr:         enter             $32, $0
                                                            # 	write_stderr(str);
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              write_stderr
                        addl              $4, %esp
                                                            # 	fputc('\n', stderr);
                        movl              $10, %eax
                        pushl             %eax
                        movl              $4, %eax
                        movl              $2, %ebx
                        movl              %esp, %ecx
                        movl              $1, %edx
                        int               $0x80
                        addl              $4, %esp
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # readln(char line[], int max_chars) {
writeln_stderr_end:
                        leave
                        ret
readln:                 enter             $40, $0
                                                            #     int i;
                                                            #     int c;
                                                            # 
                                                            #     i = 0;
                        movl              $0, %eax
                        movl              %eax, -4(%ebp)
                                                            #     c = 0;
                        movl              $0, %eax
                        movl              %eax, -8(%ebp)
                                                            #     line[i] = 0;
                        movl              -4(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              $0, %eax
                        movl              %eax, -16(%ebp)
                        movl              -12(%ebp), %eax
                        movl              %eax, %ebx
                        movl              -16(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        lea               (,%ebx,4), %eax
                        movl              %eax, -16(%ebp)
                        movl              8(%ebp), %eax
                        addl              -16(%ebp), %eax
                        movl              %eax, %ebx
                        movl              -12(%ebp), %eax
                        movl              %eax, (%ebx)
                                                            #     while (i < max_chars && c != '\n' && c != -1) {
while_4_test:           movl              -4(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              12(%ebp), %eax
                        subl              -12(%ebp), %eax
                        jg                compare_5_true
                        movl              $0, %eax
                        jmp               compare_5_false
compare_5_true:         movl              $1, %eax
compare_5_false:        cmpl              $0, %eax
                        jz                logical_and_6_false
                        movl              -8(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              $10, %eax
                        subl              -12(%ebp), %eax
                        jne               compare_7_true
                        movl              $0, %eax
                        jmp               compare_7_false
compare_7_true:         movl              $1, %eax
compare_7_false:        cmpl              $0, %eax
                        jz                logical_and_6_false
                        movl              -8(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              $1, %eax
                        movl              %eax, -16(%ebp)
                        movl              $0, %eax
                        subl              -16(%ebp), %eax
                        subl              -12(%ebp), %eax
                        jne               compare_8_true
                        movl              $0, %eax
                        jmp               compare_8_false
compare_8_true:         movl              $1, %eax
compare_8_false:        cmpl              $0, %eax
                        jz                logical_and_6_false
                        movl              $1, %eax
                        jmp               logical_and_6_true
logical_and_6_false:    movl              $0, %eax
logical_and_6_true:     cmpl              $0, %eax
                        jz                while_4_end
                                                            #         c = fgetc(stdin);
                        subl              $4, %esp
                        movl              $3, %eax
                        movl              $0, %ebx
                        movl              %esp, %ecx
                        movl              $1, %edx
                        int               $0x80
                        cmpl              $1, %eax
                        jne               fgetc_if_9_else
                        popl              %eax
                        andl              $0xff, %eax
                        jmp               fgetc_if_9_end
fgetc_if_9_else:        addl              $4, %esp
                        movl              $-1, %eax
fgetc_if_9_end:         movl              %eax, -8(%ebp)
                                                            #         if (c != -1 && c != '\r') {
                        movl              -8(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              $1, %eax
                        movl              %eax, -16(%ebp)
                        movl              $0, %eax
                        subl              -16(%ebp), %eax
                        subl              -12(%ebp), %eax
                        jne               compare_10_true
                        movl              $0, %eax
                        jmp               compare_10_false
compare_10_true:        movl              $1, %eax
compare_10_false:       cmpl              $0, %eax
                        jz                logical_and_11_false
                        movl              -8(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              $13, %eax
                        subl              -12(%ebp), %eax
                        jne               compare_12_true
                        movl              $0, %eax
                        jmp               compare_12_false
compare_12_true:        movl              $1, %eax
compare_12_false:       cmpl              $0, %eax
                        jz                logical_and_11_false
                        movl              $1, %eax
                        jmp               logical_and_11_true
logical_and_11_false:   movl              $0, %eax
logical_and_11_true:    cmpl              $0, %eax
                        jz                if_13_next
                                                            #             line[i] = c;
                        movl              -4(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              -8(%ebp), %eax
                        movl              %eax, -16(%ebp)
                        movl              -12(%ebp), %eax
                        movl              %eax, %ebx
                        movl              -16(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        lea               (,%ebx,4), %eax
                        movl              %eax, -16(%ebp)
                        movl              8(%ebp), %eax
                        addl              -16(%ebp), %eax
                        movl              %eax, %ebx
                        movl              -12(%ebp), %eax
                        movl              %eax, (%ebx)
                                                            #             line[i + 1] = 0;
                        movl              -4(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              $1, %eax
                        addl              -12(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              $0, %eax
                        movl              %eax, -16(%ebp)
                        movl              -12(%ebp), %eax
                        movl              %eax, %ebx
                        movl              -16(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        lea               (,%ebx,4), %eax
                        movl              %eax, -16(%ebp)
                        movl              8(%ebp), %eax
                        addl              -16(%ebp), %eax
                        movl              %eax, %ebx
                        movl              -12(%ebp), %eax
                        movl              %eax, (%ebx)
                                                            #             i = i + 1;
                        movl              -4(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              $1, %eax
                        addl              -12(%ebp), %eax
                        movl              %eax, -4(%ebp)
                                                            #         }
                                                            #     }
if_13_next:
                                                            #     return i;
if_13_end:              jmp               while_4_test
while_4_end:            movl              -4(%ebp), %eax
                        jmp               readln_end
                                                            # }
                                                            # // ---------------------------------------------------------------------------
                                                            # starts_with(char str[], char with_str[]) {
readln_end:
                        leave
                        ret
starts_with:            enter             $36, $0
                                                            # 	int i;
                                                            # 
                                                            # 	i = 0;
                        movl              $0, %eax
                        movl              %eax, -4(%ebp)
                                                            # 	while (str[i] != 0 && str[i] == with_str[i]) {
while_14_test:          movl              -4(%ebp), %eax
                        movl              %eax, %ebx
                        lea               (,%ebx,4), %eax
                        movl              %eax, -8(%ebp)
                        movl              8(%ebp), %eax
                        addl              -8(%ebp), %eax
                        movl              %eax, %ebx
                        movl              (%ebx), %eax
                        movl              %eax, -8(%ebp)
                        movl              $0, %eax
                        subl              -8(%ebp), %eax
                        jne               compare_15_true
                        movl              $0, %eax
                        jmp               compare_15_false
compare_15_true:        movl              $1, %eax
compare_15_false:       cmpl              $0, %eax
                        jz                logical_and_16_false
                        movl              -4(%ebp), %eax
                        movl              %eax, %ebx
                        lea               (,%ebx,4), %eax
                        movl              %eax, -8(%ebp)
                        movl              8(%ebp), %eax
                        addl              -8(%ebp), %eax
                        movl              %eax, %ebx
                        movl              (%ebx), %eax
                        movl              %eax, -8(%ebp)
                        movl              -4(%ebp), %eax
                        movl              %eax, %ebx
                        lea               (,%ebx,4), %eax
                        movl              %eax, -12(%ebp)
                        movl              12(%ebp), %eax
                        addl              -12(%ebp), %eax
                        movl              %eax, %ebx
                        movl              (%ebx), %eax
                        subl              -8(%ebp), %eax
                        je                compare_17_true
                        movl              $0, %eax
                        jmp               compare_17_false
compare_17_true:        movl              $1, %eax
compare_17_false:       cmpl              $0, %eax
                        jz                logical_and_16_false
                        movl              $1, %eax
                        jmp               logical_and_16_true
logical_and_16_false:   movl              $0, %eax
logical_and_16_true:    cmpl              $0, %eax
                        jz                while_14_end
                                                            # 		i = i + 1;
                        movl              -4(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              $1, %eax
                        addl              -8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                                                            #     }
                                                            # 
                                                            #     if (with_str[i] == 0) {
                        jmp               while_14_test
while_14_end:           movl              -4(%ebp), %eax
                        movl              %eax, %ebx
                        lea               (,%ebx,4), %eax
                        movl              %eax, -8(%ebp)
                        movl              12(%ebp), %eax
                        addl              -8(%ebp), %eax
                        movl              %eax, %ebx
                        movl              (%ebx), %eax
                        movl              %eax, -8(%ebp)
                        movl              $0, %eax
                        subl              -8(%ebp), %eax
                        je                compare_18_true
                        movl              $0, %eax
                        jmp               compare_18_false
compare_18_true:        movl              $1, %eax
compare_18_false:       cmpl              $0, %eax
                        jz                if_19_next
                                                            # 	    return True;
                        movl              $1, %eax
                        jmp               starts_with_end
                                                            #     }
                                                            # 
                                                            #     return False;
if_19_next:
if_19_end:              movl              $0, %eax
                        jmp               starts_with_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # str_equals(char str1[], char str2[]) {
starts_with_end:
                        leave
                        ret
str_equals:             enter             $36, $0
                                                            # 	int i;
                                                            # 
                                                            # 	i = 0;
                        movl              $0, %eax
                        movl              %eax, -4(%ebp)
                                                            # 	while (str1[i] == str2[i]) {
while_20_test:          movl              -4(%ebp), %eax
                        movl              %eax, %ebx
                        lea               (,%ebx,4), %eax
                        movl              %eax, -8(%ebp)
                        movl              8(%ebp), %eax
                        addl              -8(%ebp), %eax
                        movl              %eax, %ebx
                        movl              (%ebx), %eax
                        movl              %eax, -8(%ebp)
                        movl              -4(%ebp), %eax
                        movl              %eax, %ebx
                        lea               (,%ebx,4), %eax
                        movl              %eax, -12(%ebp)
                        movl              12(%ebp), %eax
                        addl              -12(%ebp), %eax
                        movl              %eax, %ebx
                        movl              (%ebx), %eax
                        subl              -8(%ebp), %eax
                        je                compare_21_true
                        movl              $0, %eax
                        jmp               compare_21_false
compare_21_true:        movl              $1, %eax
compare_21_false:       cmpl              $0, %eax
                        jz                while_20_end
                                                            # 		if (str1[i] == 0 && str2[i] == 0) {
                        movl              -4(%ebp), %eax
                        movl              %eax, %ebx
                        lea               (,%ebx,4), %eax
                        movl              %eax, -8(%ebp)
                        movl              8(%ebp), %eax
                        addl              -8(%ebp), %eax
                        movl              %eax, %ebx
                        movl              (%ebx), %eax
                        movl              %eax, -8(%ebp)
                        movl              $0, %eax
                        subl              -8(%ebp), %eax
                        je                compare_22_true
                        movl              $0, %eax
                        jmp               compare_22_false
compare_22_true:        movl              $1, %eax
compare_22_false:       cmpl              $0, %eax
                        jz                logical_and_23_false
                        movl              -4(%ebp), %eax
                        movl              %eax, %ebx
                        lea               (,%ebx,4), %eax
                        movl              %eax, -8(%ebp)
                        movl              12(%ebp), %eax
                        addl              -8(%ebp), %eax
                        movl              %eax, %ebx
                        movl              (%ebx), %eax
                        movl              %eax, -8(%ebp)
                        movl              $0, %eax
                        subl              -8(%ebp), %eax
                        je                compare_24_true
                        movl              $0, %eax
                        jmp               compare_24_false
compare_24_true:        movl              $1, %eax
compare_24_false:       cmpl              $0, %eax
                        jz                logical_and_23_false
                        movl              $1, %eax
                        jmp               logical_and_23_true
logical_and_23_false:   movl              $0, %eax
logical_and_23_true:    cmpl              $0, %eax
                        jz                if_25_next
                                                            # 			return True;
                        movl              $1, %eax
                        jmp               str_equals_end
                                                            #         }
                                                            # 		if (str1[i] == 0 || str2[i] == 0) {
if_25_next:
if_25_end:              movl              -4(%ebp), %eax
                        movl              %eax, %ebx
                        lea               (,%ebx,4), %eax
                        movl              %eax, -8(%ebp)
                        movl              8(%ebp), %eax
                        addl              -8(%ebp), %eax
                        movl              %eax, %ebx
                        movl              (%ebx), %eax
                        movl              %eax, -8(%ebp)
                        movl              $0, %eax
                        subl              -8(%ebp), %eax
                        je                compare_26_true
                        movl              $0, %eax
                        jmp               compare_26_false
compare_26_true:        movl              $1, %eax
compare_26_false:       cmpl              $0, %eax
                        jnz               logical_or_27_true
                        movl              -4(%ebp), %eax
                        movl              %eax, %ebx
                        lea               (,%ebx,4), %eax
                        movl              %eax, -8(%ebp)
                        movl              12(%ebp), %eax
                        addl              -8(%ebp), %eax
                        movl              %eax, %ebx
                        movl              (%ebx), %eax
                        movl              %eax, -8(%ebp)
                        movl              $0, %eax
                        subl              -8(%ebp), %eax
                        je                compare_28_true
                        movl              $0, %eax
                        jmp               compare_28_false
compare_28_true:        movl              $1, %eax
compare_28_false:       cmpl              $0, %eax
                        jnz               logical_or_27_true
                        movl              $0, %eax
                        jmp               logical_or_27_false
logical_or_27_true:     movl              $1, %eax
logical_or_27_false:    cmpl              $0, %eax
                        jz                if_29_next
                                                            # 			return False;
                        movl              $0, %eax
                        jmp               str_equals_end
                                                            #         }
                                                            # 		i = i + 1;
if_29_next:
if_29_end:              movl              -4(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              $1, %eax
                        addl              -8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                                                            # 	}
                                                            # 
                                                            # 	return False;
                        jmp               while_20_test
while_20_end:           movl              $0, %eax
                        jmp               str_equals_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # copy_pos(char dest[], char src[], int dest_pos, int src_pos) {
str_equals_end:
                        leave
                        ret
copy_pos:               enter             $36, $0
                                                            # 	int i;
                                                            # 
                                                            # 	i = 0;
                        movl              $0, %eax
                        movl              %eax, -4(%ebp)
                                                            # 	while (src[i + src_pos] != 0) {
while_30_test:          movl              -4(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              20(%ebp), %eax
                        addl              -8(%ebp), %eax
                        movl              %eax, %ebx
                        lea               (,%ebx,4), %eax
                        movl              %eax, -8(%ebp)
                        movl              12(%ebp), %eax
                        addl              -8(%ebp), %eax
                        movl              %eax, %ebx
                        movl              (%ebx), %eax
                        movl              %eax, -8(%ebp)
                        movl              $0, %eax
                        subl              -8(%ebp), %eax
                        jne               compare_31_true
                        movl              $0, %eax
                        jmp               compare_31_false
compare_31_true:        movl              $1, %eax
compare_31_false:       cmpl              $0, %eax
                        jz                while_30_end
                                                            # 		dest[i + dest_pos] = src[i + src_pos];
                        movl              -4(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              16(%ebp), %eax
                        addl              -8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              -4(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              20(%ebp), %eax
                        addl              -12(%ebp), %eax
                        movl              %eax, %ebx
                        lea               (,%ebx,4), %eax
                        movl              %eax, -12(%ebp)
                        movl              12(%ebp), %eax
                        addl              -12(%ebp), %eax
                        movl              %eax, %ebx
                        movl              (%ebx), %eax
                        movl              %eax, -12(%ebp)
                        movl              -8(%ebp), %eax
                        movl              %eax, %ebx
                        movl              -12(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        lea               (,%ebx,4), %eax
                        movl              %eax, -12(%ebp)
                        movl              8(%ebp), %eax
                        addl              -12(%ebp), %eax
                        movl              %eax, %ebx
                        movl              -8(%ebp), %eax
                        movl              %eax, (%ebx)
                                                            # 		i = i + 1;
                        movl              -4(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              $1, %eax
                        addl              -8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                                                            # 	}
                                                            # 
                                                            # 	dest[i + dest_pos] = 0;
                        jmp               while_30_test
while_30_end:           movl              -4(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              16(%ebp), %eax
                        addl              -8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              $0, %eax
                        movl              %eax, -12(%ebp)
                        movl              -8(%ebp), %eax
                        movl              %eax, %ebx
                        movl              -12(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        lea               (,%ebx,4), %eax
                        movl              %eax, -12(%ebp)
                        movl              8(%ebp), %eax
                        addl              -12(%ebp), %eax
                        movl              %eax, %ebx
                        movl              -8(%ebp), %eax
                        movl              %eax, (%ebx)
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # copy(char dest[], char src[]) {
copy_pos_end:
                        leave
                        ret
copy:                   enter             $32, $0
                                                            # 
                                                            #     copy_pos(dest, src, 0, 0);
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        movl              12(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              $0, %eax
                        movl              %eax, -12(%ebp)
                        movl              $0, %eax
                        movl              %eax, -16(%ebp)
                        movl              -16(%ebp), %eax
                        pushl             %eax
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              copy_pos
                        addl              $16, %esp
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # copy_from(char dest[], char src[], int src_pos) {
copy_end:
                        leave
                        ret
copy_from:              enter             $32, $0
                                                            # 
                                                            #     copy_pos(dest, src, 0, src_pos);
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        movl              12(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              $0, %eax
                        movl              %eax, -12(%ebp)
                        movl              16(%ebp), %eax
                        movl              %eax, -16(%ebp)
                        movl              -16(%ebp), %eax
                        pushl             %eax
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              copy_pos
                        addl              $16, %esp
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # copy_to(char dest[], char src[], int dest_pos) {
copy_from_end:
                        leave
                        ret
copy_to:                enter             $32, $0
                                                            # 
                                                            #     copy_pos(dest, src, dest_pos, 0);
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        movl              12(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              16(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              $0, %eax
                        movl              %eax, -16(%ebp)
                        movl              -16(%ebp), %eax
                        pushl             %eax
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              copy_pos
                        addl              $16, %esp
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # append(char dest[], char src[]) {
copy_to_end:
                        leave
                        ret
append:                 enter             $36, $0
                                                            #     int dest_length;
                                                            # 
                                                            #     dest_length = length(dest);
                        movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              length
                        addl              $4, %esp
                        movl              %eax, -4(%ebp)
                                                            #     copy_to(dest, src, dest_length);
                        movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              12(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              -4(%ebp), %eax
                        movl              %eax, -16(%ebp)
                        movl              -16(%ebp), %eax
                        pushl             %eax
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              copy_to
                        addl              $12, %esp
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # append_char(char dest[], int c) {
append_end:
                        leave
                        ret
append_char:            enter             $40, $0
                                                            #     char s[2];
                                                            # 
                                                            #     s[0] = c;
                        movl              $0, %eax
                        movl              %eax, -12(%ebp)
                        movl              12(%ebp), %eax
                        movl              %eax, -16(%ebp)
                        movl              -12(%ebp), %eax
                        movl              %eax, %ebx
                        movl              -16(%ebp), %eax
                        movl              %eax, -8(%ebp,%ebx,4)
                                                            #     s[1] = 0;
                        movl              $1, %eax
                        movl              %eax, -12(%ebp)
                        movl              $0, %eax
                        movl              %eax, -16(%ebp)
                        movl              -12(%ebp), %eax
                        movl              %eax, %ebx
                        movl              -16(%ebp), %eax
                        movl              %eax, -8(%ebp,%ebx,4)
                                                            #     append(dest, s);
                        movl              8(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        lea               -8(%ebp), %eax
                        movl              %eax, -16(%ebp)
                        movl              -16(%ebp), %eax
                        pushl             %eax
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        call              append
                        addl              $8, %esp
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # fill_until_col(char str[], int col) {
append_char_end:
                        leave
                        ret
fill_until_col:         enter             $36, $0
                                                            # 	int i;
                                                            # 
                                                            #     i = length(str);
                        movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              length
                        addl              $4, %esp
                        movl              %eax, -4(%ebp)
                                                            # 	while (i < col) {
while_32_test:          movl              -4(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              12(%ebp), %eax
                        subl              -8(%ebp), %eax
                        jg                compare_33_true
                        movl              $0, %eax
                        jmp               compare_33_false
compare_33_true:        movl              $1, %eax
compare_33_false:       cmpl              $0, %eax
                        jz                while_32_end
                                                            #         str[i] = ' ';
                        movl              -4(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              $32, %eax
                        movl              %eax, -12(%ebp)
                        movl              -8(%ebp), %eax
                        movl              %eax, %ebx
                        movl              -12(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        lea               (,%ebx,4), %eax
                        movl              %eax, -12(%ebp)
                        movl              8(%ebp), %eax
                        addl              -12(%ebp), %eax
                        movl              %eax, %ebx
                        movl              -8(%ebp), %eax
                        movl              %eax, (%ebx)
                                                            #         i = i + 1;
                        movl              -4(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              $1, %eax
                        addl              -8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                                                            #     }
                                                            # 
                                                            #     str[i] = 0;
                        jmp               while_32_test
while_32_end:           movl              -4(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              $0, %eax
                        movl              %eax, -12(%ebp)
                        movl              -8(%ebp), %eax
                        movl              %eax, %ebx
                        movl              -12(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        lea               (,%ebx,4), %eax
                        movl              %eax, -12(%ebp)
                        movl              8(%ebp), %eax
                        addl              -12(%ebp), %eax
                        movl              %eax, %ebx
                        movl              -8(%ebp), %eax
                        movl              %eax, (%ebx)
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # contains(char str[], char substr[]) {
fill_until_col_end:
                        leave
                        ret
contains:               enter             $44, $0
                                                            # 	int i;
                                                            # 	int j;
                                                            # 	int k;
                                                            # 
                                                            # 	if(substr[0] == 0) {
                        movl              $0, %eax
                        movl              %eax, %ebx
                        lea               (,%ebx,4), %eax
                        movl              %eax, -16(%ebp)
                        movl              12(%ebp), %eax
                        addl              -16(%ebp), %eax
                        movl              %eax, %ebx
                        movl              (%ebx), %eax
                        movl              %eax, -16(%ebp)
                        movl              $0, %eax
                        subl              -16(%ebp), %eax
                        je                compare_34_true
                        movl              $0, %eax
                        jmp               compare_34_false
compare_34_true:        movl              $1, %eax
compare_34_false:       cmpl              $0, %eax
                        jz                if_35_next
                                                            # 		return True;
                        movl              $1, %eax
                        jmp               contains_end
                                                            #     }
                                                            # 
                                                            # 	i = 0;
if_35_next:
if_35_end:              movl              $0, %eax
                        movl              %eax, -4(%ebp)
                                                            # 	while (str[i] != 0) {
while_36_test:          movl              -4(%ebp), %eax
                        movl              %eax, %ebx
                        lea               (,%ebx,4), %eax
                        movl              %eax, -16(%ebp)
                        movl              8(%ebp), %eax
                        addl              -16(%ebp), %eax
                        movl              %eax, %ebx
                        movl              (%ebx), %eax
                        movl              %eax, -16(%ebp)
                        movl              $0, %eax
                        subl              -16(%ebp), %eax
                        jne               compare_37_true
                        movl              $0, %eax
                        jmp               compare_37_false
compare_37_true:        movl              $1, %eax
compare_37_false:       cmpl              $0, %eax
                        jz                while_36_end
                                                            # 		j = i;
                        movl              -4(%ebp), %eax
                        movl              %eax, -8(%ebp)
                                                            # 		k = 0;
                        movl              $0, %eax
                        movl              %eax, -12(%ebp)
                                                            # 		while (str[j] == substr[k]) {
while_38_test:          movl              -8(%ebp), %eax
                        movl              %eax, %ebx
                        lea               (,%ebx,4), %eax
                        movl              %eax, -16(%ebp)
                        movl              8(%ebp), %eax
                        addl              -16(%ebp), %eax
                        movl              %eax, %ebx
                        movl              (%ebx), %eax
                        movl              %eax, -16(%ebp)
                        movl              -12(%ebp), %eax
                        movl              %eax, %ebx
                        lea               (,%ebx,4), %eax
                        movl              %eax, -20(%ebp)
                        movl              12(%ebp), %eax
                        addl              -20(%ebp), %eax
                        movl              %eax, %ebx
                        movl              (%ebx), %eax
                        subl              -16(%ebp), %eax
                        je                compare_39_true
                        movl              $0, %eax
                        jmp               compare_39_false
compare_39_true:        movl              $1, %eax
compare_39_false:       cmpl              $0, %eax
                        jz                while_38_end
                                                            # 			j = j + 1;
                        movl              -8(%ebp), %eax
                        movl              %eax, -16(%ebp)
                        movl              $1, %eax
                        addl              -16(%ebp), %eax
                        movl              %eax, -8(%ebp)
                                                            # 			k = k + 1;
                        movl              -12(%ebp), %eax
                        movl              %eax, -16(%ebp)
                        movl              $1, %eax
                        addl              -16(%ebp), %eax
                        movl              %eax, -12(%ebp)
                                                            # 			if (substr[k] == 0) {
                        movl              -12(%ebp), %eax
                        movl              %eax, %ebx
                        lea               (,%ebx,4), %eax
                        movl              %eax, -16(%ebp)
                        movl              12(%ebp), %eax
                        addl              -16(%ebp), %eax
                        movl              %eax, %ebx
                        movl              (%ebx), %eax
                        movl              %eax, -16(%ebp)
                        movl              $0, %eax
                        subl              -16(%ebp), %eax
                        je                compare_40_true
                        movl              $0, %eax
                        jmp               compare_40_false
compare_40_true:        movl              $1, %eax
compare_40_false:       cmpl              $0, %eax
                        jz                if_41_next
                                                            # 				return True;
                        movl              $1, %eax
                        jmp               contains_end
                                                            #             }
                                                            # 		}
if_41_next:
                                                            # 		i = i + 1;
if_41_end:              jmp               while_38_test
while_38_end:           movl              -4(%ebp), %eax
                        movl              %eax, -16(%ebp)
                        movl              $1, %eax
                        addl              -16(%ebp), %eax
                        movl              %eax, -4(%ebp)
                                                            # 	}
                                                            # 
                                                            # 	return False;
                        jmp               while_36_test
while_36_end:           movl              $0, %eax
                        jmp               contains_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # contains_char(char str[], int c) {
contains_end:
                        leave
                        ret
contains_char:          enter             $40, $0
                                                            #     char s[2];
                                                            # 
                                                            #     s[0] = c;
                        movl              $0, %eax
                        movl              %eax, -12(%ebp)
                        movl              12(%ebp), %eax
                        movl              %eax, -16(%ebp)
                        movl              -12(%ebp), %eax
                        movl              %eax, %ebx
                        movl              -16(%ebp), %eax
                        movl              %eax, -8(%ebp,%ebx,4)
                                                            #     s[1] = 0;
                        movl              $1, %eax
                        movl              %eax, -12(%ebp)
                        movl              $0, %eax
                        movl              %eax, -16(%ebp)
                        movl              -12(%ebp), %eax
                        movl              %eax, %ebx
                        movl              -16(%ebp), %eax
                        movl              %eax, -8(%ebp,%ebx,4)
                                                            #     return contains(str, s);
                        movl              8(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        lea               -8(%ebp), %eax
                        movl              %eax, -16(%ebp)
                        movl              -16(%ebp), %eax
                        pushl             %eax
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        call              contains
                        addl              $8, %esp
                        jmp               contains_char_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # length(char str[]) {
contains_char_end:
                        leave
                        ret
length:                 enter             $36, $0
                                                            # 	int i;
                                                            # 
                                                            # 	i = 0;
                        movl              $0, %eax
                        movl              %eax, -4(%ebp)
                                                            # 	while (str[i] != 0) {
while_42_test:          movl              -4(%ebp), %eax
                        movl              %eax, %ebx
                        lea               (,%ebx,4), %eax
                        movl              %eax, -8(%ebp)
                        movl              8(%ebp), %eax
                        addl              -8(%ebp), %eax
                        movl              %eax, %ebx
                        movl              (%ebx), %eax
                        movl              %eax, -8(%ebp)
                        movl              $0, %eax
                        subl              -8(%ebp), %eax
                        jne               compare_43_true
                        movl              $0, %eax
                        jmp               compare_43_false
compare_43_true:        movl              $1, %eax
compare_43_false:       cmpl              $0, %eax
                        jz                while_42_end
                                                            # 		i = i + 1;
                        movl              -4(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              $1, %eax
                        addl              -8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                                                            #     }
                                                            # 
                                                            # 	return i;
                        jmp               while_42_test
while_42_end:           movl              -4(%ebp), %eax
                        jmp               length_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # str_to_int(char str[]) {
length_end:
                        leave
                        ret
str_to_int:             enter             $40, $0
                                                            # 	int i;
                                                            # 	int n;
                                                            # 
                                                            # 	i = 0;
                        movl              $0, %eax
                        movl              %eax, -4(%ebp)
                                                            # 	n = 0;
                        movl              $0, %eax
                        movl              %eax, -8(%ebp)
                                                            # 	while (str[i] != 0) {
while_44_test:          movl              -4(%ebp), %eax
                        movl              %eax, %ebx
                        lea               (,%ebx,4), %eax
                        movl              %eax, -12(%ebp)
                        movl              8(%ebp), %eax
                        addl              -12(%ebp), %eax
                        movl              %eax, %ebx
                        movl              (%ebx), %eax
                        movl              %eax, -12(%ebp)
                        movl              $0, %eax
                        subl              -12(%ebp), %eax
                        jne               compare_45_true
                        movl              $0, %eax
                        jmp               compare_45_false
compare_45_true:        movl              $1, %eax
compare_45_false:       cmpl              $0, %eax
                        jz                while_44_end
                                                            # 		n = n * 10 + (str[i] - '0');
                        movl              -8(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              $10, %eax
                        imull             -12(%ebp)
                        movl              %eax, -12(%ebp)
                        movl              -4(%ebp), %eax
                        movl              %eax, %ebx
                        lea               (,%ebx,4), %eax
                        movl              %eax, -16(%ebp)
                        movl              8(%ebp), %eax
                        addl              -16(%ebp), %eax
                        movl              %eax, %ebx
                        movl              (%ebx), %eax
                        movl              %eax, -16(%ebp)
                        movl              $48, %eax
                        movl              %eax, -20(%ebp)
                        movl              -16(%ebp), %eax
                        subl              -20(%ebp), %eax
                        addl              -12(%ebp), %eax
                        movl              %eax, -8(%ebp)
                                                            # 		i = i + 1;
                        movl              -4(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              $1, %eax
                        addl              -12(%ebp), %eax
                        movl              %eax, -4(%ebp)
                                                            # 	}
                                                            # 
                                                            # 	return n;
                        jmp               while_44_test
while_44_end:           movl              -8(%ebp), %eax
                        jmp               str_to_int_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # int_to_str(int n, char str[]) {
str_to_int_end:
                        leave
                        ret
int_to_str:             enter             $1072, $0
                                                            #     int pos;
                                                            #     int endpos;
                                                            # 	int n_mod_10;
                                                            #     int absn;
                                                            #     char tmp_str[Str_size];
                                                            # 
                                                            #     absn = n;
                        movl              8(%ebp), %eax
                        movl              %eax, -16(%ebp)
                                                            #     if (absn < 0) {
                        movl              -16(%ebp), %eax
                        movl              %eax, -1044(%ebp)
                        movl              $0, %eax
                        subl              -1044(%ebp), %eax
                        jg                compare_46_true
                        movl              $0, %eax
                        jmp               compare_46_false
compare_46_true:        movl              $1, %eax
compare_46_false:       cmpl              $0, %eax
                        jz                if_47_next
                                                            #         absn = -absn;
                        movl              -16(%ebp), %eax
                        movl              %eax, -1044(%ebp)
                        movl              $0, %eax
                        subl              -1044(%ebp), %eax
                        movl              %eax, -16(%ebp)
                                                            #     }
                                                            # 
                                                            #     pos = Str_size - 1;
if_47_next:
if_47_end:              movl              $256, %eax
                        movl              %eax, -1044(%ebp)
                        movl              $1, %eax
                        movl              %eax, -1048(%ebp)
                        movl              -1044(%ebp), %eax
                        subl              -1048(%ebp), %eax
                        movl              %eax, -4(%ebp)
                                                            #     tmp_str[pos] = 0;
                        movl              -4(%ebp), %eax
                        movl              %eax, -1044(%ebp)
                        movl              $0, %eax
                        movl              %eax, -1048(%ebp)
                        movl              -1044(%ebp), %eax
                        movl              %eax, %ebx
                        movl              -1048(%ebp), %eax
                        movl              %eax, -1040(%ebp,%ebx,4)
                                                            #     endpos = pos;
                        movl              -4(%ebp), %eax
                        movl              %eax, -8(%ebp)
                                                            # 	while (pos == endpos || absn != 0) {
while_48_test:          movl              -4(%ebp), %eax
                        movl              %eax, -1044(%ebp)
                        movl              -8(%ebp), %eax
                        subl              -1044(%ebp), %eax
                        je                compare_49_true
                        movl              $0, %eax
                        jmp               compare_49_false
compare_49_true:        movl              $1, %eax
compare_49_false:       cmpl              $0, %eax
                        jnz               logical_or_50_true
                        movl              -16(%ebp), %eax
                        movl              %eax, -1044(%ebp)
                        movl              $0, %eax
                        subl              -1044(%ebp), %eax
                        jne               compare_51_true
                        movl              $0, %eax
                        jmp               compare_51_false
compare_51_true:        movl              $1, %eax
compare_51_false:       cmpl              $0, %eax
                        jnz               logical_or_50_true
                        movl              $0, %eax
                        jmp               logical_or_50_false
logical_or_50_true:     movl              $1, %eax
logical_or_50_false:    cmpl              $0, %eax
                        jz                while_48_end
                                                            # 		n_mod_10 = absn - (10 * ( absn / 10));
                        movl              -16(%ebp), %eax
                        movl              %eax, -1044(%ebp)
                        movl              $10, %eax
                        movl              %eax, -1048(%ebp)
                        movl              -16(%ebp), %eax
                        movl              %eax, -1052(%ebp)
                        movl              $10, %eax
                        movl              %eax, -1056(%ebp)
                        movl              -1052(%ebp), %eax
                        cdq
                        idivl             -1056(%ebp)
                        imull             -1048(%ebp)
                        movl              %eax, -1048(%ebp)
                        movl              -1044(%ebp), %eax
                        subl              -1048(%ebp), %eax
                        movl              %eax, -12(%ebp)
                                                            # 		pos = pos - 1;
                        movl              -4(%ebp), %eax
                        movl              %eax, -1044(%ebp)
                        movl              $1, %eax
                        movl              %eax, -1048(%ebp)
                        movl              -1044(%ebp), %eax
                        subl              -1048(%ebp), %eax
                        movl              %eax, -4(%ebp)
                                                            # 		tmp_str[pos] = '0' + n_mod_10;
                        movl              -4(%ebp), %eax
                        movl              %eax, -1044(%ebp)
                        movl              $48, %eax
                        movl              %eax, -1048(%ebp)
                        movl              -12(%ebp), %eax
                        addl              -1048(%ebp), %eax
                        movl              %eax, -1048(%ebp)
                        movl              -1044(%ebp), %eax
                        movl              %eax, %ebx
                        movl              -1048(%ebp), %eax
                        movl              %eax, -1040(%ebp,%ebx,4)
                                                            # 		absn = absn / 10;
                        movl              -16(%ebp), %eax
                        movl              %eax, -1044(%ebp)
                        movl              $10, %eax
                        movl              %eax, -1048(%ebp)
                        movl              -1044(%ebp), %eax
                        cdq
                        idivl             -1048(%ebp)
                        movl              %eax, -16(%ebp)
                                                            # 	}
                                                            # 
                                                            #     if (n < 0) {
                        jmp               while_48_test
while_48_end:           movl              8(%ebp), %eax
                        movl              %eax, -1044(%ebp)
                        movl              $0, %eax
                        subl              -1044(%ebp), %eax
                        jg                compare_52_true
                        movl              $0, %eax
                        jmp               compare_52_false
compare_52_true:        movl              $1, %eax
compare_52_false:       cmpl              $0, %eax
                        jz                if_53_next
                                                            # 		pos = pos - 1;
                        movl              -4(%ebp), %eax
                        movl              %eax, -1044(%ebp)
                        movl              $1, %eax
                        movl              %eax, -1048(%ebp)
                        movl              -1044(%ebp), %eax
                        subl              -1048(%ebp), %eax
                        movl              %eax, -4(%ebp)
                                                            #         tmp_str[pos] = '-';
                        movl              -4(%ebp), %eax
                        movl              %eax, -1044(%ebp)
                        movl              $45, %eax
                        movl              %eax, -1048(%ebp)
                        movl              -1044(%ebp), %eax
                        movl              %eax, %ebx
                        movl              -1048(%ebp), %eax
                        movl              %eax, -1040(%ebp,%ebx,4)
                                                            #     }
                                                            # 
                                                            #     copy_from(str, tmp_str, pos);
if_53_next:
if_53_end:              movl              12(%ebp), %eax
                        movl              %eax, -1044(%ebp)
                        lea               -1040(%ebp), %eax
                        movl              %eax, -1048(%ebp)
                        movl              -4(%ebp), %eax
                        movl              %eax, -1052(%ebp)
                        movl              -1052(%ebp), %eax
                        pushl             %eax
                        movl              -1048(%ebp), %eax
                        pushl             %eax
                        movl              -1044(%ebp), %eax
                        pushl             %eax
                        call              copy_from
                        addl              $12, %esp
                                                            # }
                                                            # #ifndef _MSC_VER
                                                            # #line 2 "errormessages.h"
                                                            # #endif
                                                            # 
                                                            # int error_line_no;
int_to_str_end:
                        leave
                        ret
                                                            # int error_line_pos;
                                                            # 
                                                            # char error_file_name[Str_size];
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # error_set_line(int line_no, int line_pos) {
error_set_line:         enter             $32, $0
                                                            #     error_line_no = line_no;
                        movl              8(%ebp), %eax
                        movl              %eax, 0+global
                                                            #     error_line_pos = line_pos;
                        movl              12(%ebp), %eax
                        movl              %eax, 4+global
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # error_set_file_name(char file_name[]) {
error_set_line_end:
                        leave
                        ret
error_set_file_name:    enter             $32, $0
                                                            #     copy(error_file_name, file_name);
                        lea               8+global, %eax
                        movl              %eax, -4(%ebp)
                        movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              copy
                        addl              $8, %esp
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # error_print(char err_type[], char msg[]) {
error_set_file_name_end:
                        leave
                        ret
error_print:            enter             $1056, $0
                                                            #     char str[Str_size];
                                                            # 
                                                            #     write_stderr(err_type); writeln_stderr(msg);
                        movl              8(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              write_stderr
                        addl              $4, %esp
                        movl              12(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              writeln_stderr
                        addl              $4, %esp
                                                            # 
                                                            #     write_stderr("File: "); writeln_stderr(error_file_name);
                        lea               4+string, %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              write_stderr
                        addl              $4, %esp
                        lea               8+global, %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              writeln_stderr
                        addl              $4, %esp
                                                            # 
                                                            #     int_to_str(error_line_no, str);
                        movl              0+global, %eax
                        movl              %eax, -1028(%ebp)
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              int_to_str
                        addl              $8, %esp
                                                            #     write_stderr("Line no: "); writeln_stderr(str);
                        lea               32+string, %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              write_stderr
                        addl              $4, %esp
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              writeln_stderr
                        addl              $4, %esp
                                                            # 
                                                            #     int_to_str(error_line_pos, str);
                        movl              4+global, %eax
                        movl              %eax, -1028(%ebp)
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              int_to_str
                        addl              $8, %esp
                                                            #     write_stderr("Line pos: "); writeln_stderr(str);
                        lea               72+string, %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              write_stderr
                        addl              $4, %esp
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              writeln_stderr
                        addl              $4, %esp
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # error_compiler(char msg[]) {
error_print_end:
                        leave
                        ret
error_compiler:         enter             $32, $0
                                                            #     error_print("Compile error: ", msg);
                        lea               116+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              error_print
                        addl              $8, %esp
                                                            #     exit(1);
                        movl              $1, %eax
                        movl              %eax, %ebx
                        movl              $1, %eax
                        int               $0x80
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # error_syntax(char msg[]) {
error_compiler_end:
                        leave
                        ret
error_syntax:           enter             $32, $0
                                                            #     error_print("Syntax error: ", msg);
                        lea               180+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              error_print
                        addl              $8, %esp
                                                            #     exit(1);
                        movl              $1, %eax
                        movl              %eax, %ebx
                        movl              $1, %eax
                        int               $0x80
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # error_parse(char msg[]) {
error_syntax_end:
                        leave
                        ret
error_parse:            enter             $32, $0
                                                            #     error_print("Parse error: ", msg);
                        lea               240+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              error_print
                        addl              $8, %esp
                                                            #     exit(1);
                        movl              $1, %eax
                        movl              %eax, %ebx
                        movl              $1, %eax
                        int               $0x80
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # error_preprocessor(char msg[]) {
error_parse_end:
                        leave
                        ret
error_preprocessor:     enter             $32, $0
                                                            #     error_print("Error while reading source: ", msg);
                        lea               296+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              error_print
                        addl              $8, %esp
                                                            #     exit(1);
                        movl              $1, %eax
                        movl              %eax, %ebx
                        movl              $1, %eax
                        int               $0x80
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # error_target(char msg[]) {
error_preprocessor_end:
                        leave
                        ret
error_target:           enter             $32, $0
                                                            #     error_print("Code generation error: ", msg);
                        lea               412+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              error_print
                        addl              $8, %esp
                                                            #     exit(1);
                        movl              $1, %eax
                        movl              %eax, %ebx
                        movl              $1, %eax
                        int               $0x80
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # error_internal() {
error_target_end:
                        leave
                        ret
error_internal:         enter             $32, $0
                                                            #     error_print("Internal error", "");
                        lea               508+string, %eax
                        movl              %eax, -4(%ebp)
                        lea               568+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              error_print
                        addl              $8, %esp
                                                            #     exit(1);
                        movl              $1, %eax
                        movl              %eax, %ebx
                        movl              $1, %eax
                        int               $0x80
                                                            # }
                                                            # 
                                                            # #ifndef _MSC_VER
                                                            # #line 2 "preprocessor.h"
                                                            # #endif
                                                            # 
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # char file_name[Str_size];
error_internal_end:
                        leave
                        ret
                                                            # 
                                                            # int line_no;
                                                            # int line_pos;
                                                            # 
                                                            # char line[Str_size];
                                                            # int line_length;
                                                            # 
                                                            # char source_buffer[Source_buffer_length];
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # preprocessor_init() {
preprocessor_init:      enter             $32, $0
                                                            #     line_no = 0;
                        movl              $0, %eax
                        movl              %eax, 2056+global
                                                            #     line_pos = 0;
                        movl              $0, %eax
                        movl              %eax, 2060+global
                                                            #     copy(source_buffer, "");
                        lea               3092+global, %eax
                        movl              %eax, -4(%ebp)
                        lea               572+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              copy
                        addl              $8, %esp
                                                            #     copy(file_name, "N/A");
                        lea               1032+global, %eax
                        movl              %eax, -4(%ebp)
                        lea               576+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              copy
                        addl              $8, %esp
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # preprocessor_get_line_no() {
preprocessor_init_end:
                        leave
                        ret
preprocessor_get_line_no: enter           $32, $0
                                                            #     return line_no;
                        movl              2056+global, %eax
                        jmp               preprocessor_get_line_no_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # preprocessor_get_line_pos() {
preprocessor_get_line_no_end:
                        leave
                        ret
preprocessor_get_line_pos: enter          $32, $0
                                                            #     return line_pos;
                        movl              2060+global, %eax
                        jmp               preprocessor_get_line_pos_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # preprocessor_get_source_chunk(char src[]) {
preprocessor_get_line_pos_end:
                        leave
                        ret
preprocessor_get_source_chunk: enter      $32, $0
                                                            #     copy(src, source_buffer);
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        lea               3092+global, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              copy
                        addl              $8, %esp
                                                            #     copy(source_buffer, "");
                        lea               3092+global, %eax
                        movl              %eax, -4(%ebp)
                        lea               592+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              copy
                        addl              $8, %esp
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # preprocessor_read_next_line() {
preprocessor_get_source_chunk_end:
                        leave
                        ret
preprocessor_read_next_line: enter        $36, $0
                                                            #     int chars_read;
                                                            # 
                                                            #     chars_read = readln(line, Str_size - 1);
                        lea               2064+global, %eax
                        movl              %eax, -8(%ebp)
                        movl              $256, %eax
                        movl              %eax, -12(%ebp)
                        movl              $1, %eax
                        movl              %eax, -16(%ebp)
                        movl              -12(%ebp), %eax
                        subl              -16(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              readln
                        addl              $8, %esp
                        movl              %eax, -4(%ebp)
                                                            #     if (chars_read == Str_size - 1) {
                        movl              -4(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              $256, %eax
                        movl              %eax, -12(%ebp)
                        movl              $1, %eax
                        movl              %eax, -16(%ebp)
                        movl              -12(%ebp), %eax
                        subl              -16(%ebp), %eax
                        subl              -8(%ebp), %eax
                        je                compare_54_true
                        movl              $0, %eax
                        jmp               compare_54_false
compare_54_true:        movl              $1, %eax
compare_54_false:       cmpl              $0, %eax
                        jz                if_55_next
                                                            #         error_preprocessor("line too long");
                        lea               596+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              error_preprocessor
                        addl              $4, %esp
                                                            #     }
                                                            # 
                                                            #     if (str_equals(line, ""))
if_55_next:
if_55_end:              lea               2064+global, %eax
                        movl              %eax, -8(%ebp)
                        lea               652+string, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              str_equals
                        addl              $8, %esp
                        cmpl              $0, %eax
                        jz                if_56_next
                                                            #         return False;
                        movl              $0, %eax
                        jmp               preprocessor_read_next_line_end
if_56_next:
                                                            # 
                                                            #     line_no = line_no + 1;
if_56_end:              movl              2056+global, %eax
                        movl              %eax, -8(%ebp)
                        movl              $1, %eax
                        addl              -8(%ebp), %eax
                        movl              %eax, 2056+global
                                                            #     line_pos = 0;
                        movl              $0, %eax
                        movl              %eax, 2060+global
                                                            #     line_length = length(line);
                        lea               2064+global, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              length
                        addl              $4, %esp
                        movl              %eax, 3088+global
                                                            # 
                                                            #     append(source_buffer, line);
                        lea               3092+global, %eax
                        movl              %eax, -8(%ebp)
                        lea               2064+global, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              append
                        addl              $8, %esp
                                                            #     return True;
                        movl              $1, %eax
                        jmp               preprocessor_read_next_line_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # preprocessor_read_char() {
preprocessor_read_next_line_end:
                        leave
                        ret
preprocessor_read_char: enter             $36, $0
                                                            #     int c;
                                                            # 
                                                            #     if (line_pos >= line_length)
                        movl              2060+global, %eax
                        movl              %eax, -8(%ebp)
                        movl              3088+global, %eax
                        subl              -8(%ebp), %eax
                        jl                compare_57_true
                        je                compare_57_true
                        movl              $0, %eax
                        jmp               compare_57_false
compare_57_true:        movl              $1, %eax
compare_57_false:       cmpl              $0, %eax
                        jz                if_58_next
                                                            #         return '\n';
                        movl              $10, %eax
                        jmp               preprocessor_read_char_end
if_58_next:
                                                            # 
                                                            #     c = line[line_pos];
if_58_end:              movl              2060+global, %eax
                        movl              %eax, %ebx
                        movl              2064+global(,%ebx,4), %eax
                        movl              %eax, -4(%ebp)
                                                            # 
                                                            #     line_pos = line_pos + 1;
                        movl              2060+global, %eax
                        movl              %eax, -8(%ebp)
                        movl              $1, %eax
                        addl              -8(%ebp), %eax
                        movl              %eax, 2060+global
                                                            #     return c;
                        movl              -4(%ebp), %eax
                        jmp               preprocessor_read_char_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # preprocessor_lookahead1() {
preprocessor_read_char_end:
                        leave
                        ret
preprocessor_lookahead1: enter            $32, $0
                                                            #     if (line_pos >= line_length)
                        movl              2060+global, %eax
                        movl              %eax, -4(%ebp)
                        movl              3088+global, %eax
                        subl              -4(%ebp), %eax
                        jl                compare_59_true
                        je                compare_59_true
                        movl              $0, %eax
                        jmp               compare_59_false
compare_59_true:        movl              $1, %eax
compare_59_false:       cmpl              $0, %eax
                        jz                if_60_next
                                                            #         return '\n';
                        movl              $10, %eax
                        jmp               preprocessor_lookahead1_end
if_60_next:
                                                            # 
                                                            #     return line[line_pos];
if_60_end:              movl              2060+global, %eax
                        movl              %eax, %ebx
                        movl              2064+global(,%ebx,4), %eax
                        jmp               preprocessor_lookahead1_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # preprocessor_lookahead2() {
preprocessor_lookahead1_end:
                        leave
                        ret
preprocessor_lookahead2: enter            $32, $0
                                                            #     if (line_pos + 1 >= line_length)
                        movl              2060+global, %eax
                        movl              %eax, -4(%ebp)
                        movl              $1, %eax
                        addl              -4(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        movl              3088+global, %eax
                        subl              -4(%ebp), %eax
                        jl                compare_61_true
                        je                compare_61_true
                        movl              $0, %eax
                        jmp               compare_61_false
compare_61_true:        movl              $1, %eax
compare_61_false:       cmpl              $0, %eax
                        jz                if_62_next
                                                            #         return '\n';
                        movl              $10, %eax
                        jmp               preprocessor_lookahead2_end
if_62_next:
                                                            # 
                                                            #     return line[line_pos + 1];
if_62_end:              movl              2060+global, %eax
                        movl              %eax, -4(%ebp)
                        movl              $1, %eax
                        addl              -4(%ebp), %eax
                        movl              %eax, %ebx
                        movl              2064+global(,%ebx,4), %eax
                        jmp               preprocessor_lookahead2_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # preprocessor_compiler_directive() {
preprocessor_lookahead2_end:
                        leave
                        ret
preprocessor_compiler_directive: enter    $36, $0
                                                            #     int i;
                                                            # 
                                                            #     if (starts_with(line, "#line 2 ")) {
                        lea               2064+global, %eax
                        movl              %eax, -8(%ebp)
                        lea               656+string, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              starts_with
                        addl              $8, %esp
                        cmpl              $0, %eax
                        jz                if_63_next
                                                            #         line_no = 2;
                        movl              $2, %eax
                        movl              %eax, 2056+global
                                                            # 
                                                            #         copy(file_name, "");
                        lea               1032+global, %eax
                        movl              %eax, -8(%ebp)
                        lea               692+string, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              copy
                        addl              $8, %esp
                                                            #         i = length("#line 2 ");
                        lea               696+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              length
                        addl              $4, %esp
                        movl              %eax, -4(%ebp)
                                                            # 
                                                            #         while (line[i] != ' ' && line[i] != '\n' && line[i] != 0) {
while_64_test:          movl              -4(%ebp), %eax
                        movl              %eax, %ebx
                        movl              2064+global(,%ebx,4), %eax
                        movl              %eax, -8(%ebp)
                        movl              $32, %eax
                        subl              -8(%ebp), %eax
                        jne               compare_65_true
                        movl              $0, %eax
                        jmp               compare_65_false
compare_65_true:        movl              $1, %eax
compare_65_false:       cmpl              $0, %eax
                        jz                logical_and_66_false
                        movl              -4(%ebp), %eax
                        movl              %eax, %ebx
                        movl              2064+global(,%ebx,4), %eax
                        movl              %eax, -8(%ebp)
                        movl              $10, %eax
                        subl              -8(%ebp), %eax
                        jne               compare_67_true
                        movl              $0, %eax
                        jmp               compare_67_false
compare_67_true:        movl              $1, %eax
compare_67_false:       cmpl              $0, %eax
                        jz                logical_and_66_false
                        movl              -4(%ebp), %eax
                        movl              %eax, %ebx
                        movl              2064+global(,%ebx,4), %eax
                        movl              %eax, -8(%ebp)
                        movl              $0, %eax
                        subl              -8(%ebp), %eax
                        jne               compare_68_true
                        movl              $0, %eax
                        jmp               compare_68_false
compare_68_true:        movl              $1, %eax
compare_68_false:       cmpl              $0, %eax
                        jz                logical_and_66_false
                        movl              $1, %eax
                        jmp               logical_and_66_true
logical_and_66_false:   movl              $0, %eax
logical_and_66_true:    cmpl              $0, %eax
                        jz                while_64_end
                                                            #             append_char(file_name, line[i]);
                        lea               1032+global, %eax
                        movl              %eax, -8(%ebp)
                        movl              -4(%ebp), %eax
                        movl              %eax, %ebx
                        movl              2064+global(,%ebx,4), %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              append_char
                        addl              $8, %esp
                                                            #             i = i + 1; 
                        movl              -4(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              $1, %eax
                        addl              -8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                                                            #         }
                                                            # 		error_set_file_name(file_name);
                        jmp               while_64_test
while_64_end:           lea               1032+global, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              error_set_file_name
                        addl              $4, %esp
                                                            #         error_set_line(2, 0);
                        movl              $2, %eax
                        movl              %eax, -8(%ebp)
                        movl              $0, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              error_set_line
                        addl              $8, %esp
                                                            # 	}
                                                            # }
if_63_next:
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # preprocessor_skip() {
if_63_end:
preprocessor_compiler_directive_end:
                        leave
                        ret
preprocessor_skip:      enter             $40, $0
                                                            #     int c;
                                                            #     int c1;
                                                            # 
                                                            #     if (line_pos >= line_length) {
                        movl              2060+global, %eax
                        movl              %eax, -12(%ebp)
                        movl              3088+global, %eax
                        subl              -12(%ebp), %eax
                        jl                compare_69_true
                        je                compare_69_true
                        movl              $0, %eax
                        jmp               compare_69_false
compare_69_true:        movl              $1, %eax
compare_69_false:       cmpl              $0, %eax
                        jz                if_70_next
                                                            #         if (! preprocessor_read_next_line())
                        call              preprocessor_read_next_line
                        cmpl              $0, %eax
                        jnz               logical_not_71_false
                        movl              $1, %eax
                        jmp               logical_not_71_true
logical_not_71_false:   movl              $0, %eax
logical_not_71_true:    cmpl              $0, %eax
                        jz                if_72_next
                                                            #             return False;
                        movl              $0, %eax
                        jmp               preprocessor_skip_end
if_72_next:
                                                            # 
                                                            #         if (line_length == 0)
if_72_end:              movl              3088+global, %eax
                        movl              %eax, -12(%ebp)
                        movl              $0, %eax
                        subl              -12(%ebp), %eax
                        je                compare_73_true
                        movl              $0, %eax
                        jmp               compare_73_false
compare_73_true:        movl              $1, %eax
compare_73_false:       cmpl              $0, %eax
                        jz                if_74_next
                                                            #             return preprocessor_skip();
                        call              preprocessor_skip
                        jmp               preprocessor_skip_end
if_74_next:
                                                            # 
                                                            #         if (starts_with(line, "#")) {
if_74_end:              lea               2064+global, %eax
                        movl              %eax, -12(%ebp)
                        lea               732+string, %eax
                        movl              %eax, -16(%ebp)
                        movl              -16(%ebp), %eax
                        pushl             %eax
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        call              starts_with
                        addl              $8, %esp
                        cmpl              $0, %eax
                        jz                if_75_next
                                                            #             preprocessor_compiler_directive();
                        call              preprocessor_compiler_directive
                                                            # 
                                                            #             line_pos = 0;
                        movl              $0, %eax
                        movl              %eax, 2060+global
                                                            #             line_length = 0;
                        movl              $0, %eax
                        movl              %eax, 3088+global
                                                            #             return preprocessor_skip();
                        call              preprocessor_skip
                        jmp               preprocessor_skip_end
                                                            #         }
                                                            #     }
if_75_next:
                                                            # 
                                                            #     c = line[line_pos];
if_75_end:
if_70_next:
if_70_end:              movl              2060+global, %eax
                        movl              %eax, %ebx
                        movl              2064+global(,%ebx,4), %eax
                        movl              %eax, -4(%ebp)
                                                            #     c1 = line[line_pos + 1];
                        movl              2060+global, %eax
                        movl              %eax, -12(%ebp)
                        movl              $1, %eax
                        addl              -12(%ebp), %eax
                        movl              %eax, %ebx
                        movl              2064+global(,%ebx,4), %eax
                        movl              %eax, -8(%ebp)
                                                            # 
                                                            #     if (c == ' ' || c == '\t' || c == '\n') {
                        movl              -4(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              $32, %eax
                        subl              -12(%ebp), %eax
                        je                compare_76_true
                        movl              $0, %eax
                        jmp               compare_76_false
compare_76_true:        movl              $1, %eax
compare_76_false:       cmpl              $0, %eax
                        jnz               logical_or_77_true
                        movl              -4(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              $9, %eax
                        subl              -12(%ebp), %eax
                        je                compare_78_true
                        movl              $0, %eax
                        jmp               compare_78_false
compare_78_true:        movl              $1, %eax
compare_78_false:       cmpl              $0, %eax
                        jnz               logical_or_77_true
                        movl              -4(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              $10, %eax
                        subl              -12(%ebp), %eax
                        je                compare_79_true
                        movl              $0, %eax
                        jmp               compare_79_false
compare_79_true:        movl              $1, %eax
compare_79_false:       cmpl              $0, %eax
                        jnz               logical_or_77_true
                        movl              $0, %eax
                        jmp               logical_or_77_false
logical_or_77_true:     movl              $1, %eax
logical_or_77_false:    cmpl              $0, %eax
                        jz                if_80_next
                                                            #         line_pos = line_pos + 1;
                        movl              2060+global, %eax
                        movl              %eax, -12(%ebp)
                        movl              $1, %eax
                        addl              -12(%ebp), %eax
                        movl              %eax, 2060+global
                                                            #         return preprocessor_skip();
                        call              preprocessor_skip
                        jmp               preprocessor_skip_end
                                                            #     }
                                                            # 
                                                            #     if (c == '/' && c1 == '/') {
if_80_next:
if_80_end:              movl              -4(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              $47, %eax
                        subl              -12(%ebp), %eax
                        je                compare_81_true
                        movl              $0, %eax
                        jmp               compare_81_false
compare_81_true:        movl              $1, %eax
compare_81_false:       cmpl              $0, %eax
                        jz                logical_and_82_false
                        movl              -8(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              $47, %eax
                        subl              -12(%ebp), %eax
                        je                compare_83_true
                        movl              $0, %eax
                        jmp               compare_83_false
compare_83_true:        movl              $1, %eax
compare_83_false:       cmpl              $0, %eax
                        jz                logical_and_82_false
                        movl              $1, %eax
                        jmp               logical_and_82_true
logical_and_82_false:   movl              $0, %eax
logical_and_82_true:    cmpl              $0, %eax
                        jz                if_84_next
                                                            #         line_pos = 0;
                        movl              $0, %eax
                        movl              %eax, 2060+global
                                                            #         line_length = 0;
                        movl              $0, %eax
                        movl              %eax, 3088+global
                                                            #         return preprocessor_skip();
                        call              preprocessor_skip
                        jmp               preprocessor_skip_end
                                                            #     }
                                                            # 
                                                            #     return True;
if_84_next:
if_84_end:              movl              $1, %eax
                        jmp               preprocessor_skip_end
                                                            # }
                                                            # 
                                                            # #ifndef _MSC_VER
                                                            # #line 2 "token.h"
                                                            # #endif
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # //
                                                            # // token
                                                            # //             integer-constant
                                                            # //             character-constant
                                                            # //             string-literal
                                                            # //             identifier-or-keyword
                                                            # //             symbol
                                                            # //
                                                            # // integer-constant
                                                            # //             digit-list
                                                            # //
                                                            # // character-constant
                                                            # //             ' char-escape-sequence '
                                                            # //             ' any-except ' '
                                                            # //            
                                                            # // digit-list
                                                            # //             digit digit-list
                                                            # //             digit
                                                            # //
                                                            # // digit
                                                            # //             one-of 0 1 2 3 4 5 6 7 8 9
                                                            # //            
                                                            # // string-literal
                                                            # //             " string-literal-char-sequence "
                                                            # //
                                                            # // string-literal-char-sequence
                                                            # //             string-literal-char string-literal-char-sequence
                                                            # //             string-literal-char
                                                            # //
                                                            # // string-literal-char
                                                            # //             char-escape-sequence
                                                            # //             any-char-except "
                                                            # //
                                                            # // char-escape-sequence
                                                            # //             one-of \n \r \t \\ \' \"
                                                            # //
                                                            # // identifier-or-keyword
                                                            # //             identifier-nondigit-char identifier-any-char-sequence
                                                            # //             identifier-nondigit-char
                                                            # //            
                                                            # // identifier-nondigit-char
                                                            # //             one-of _ a b c d e f g h i j k l m n o p q r s t u v w x y z
                                                            # //                      A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
                                                            # //            
                                                            # // identifier-any-char
                                                            # //             one-of _ a b c d e f g h i j k l m n o p q r s t u v w x y z
                                                            # //                      A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
                                                            # //                      0 1 2 3 4 5 6 7 8 9
                                                            # //           
                                                            # // identifier-any-char-sequence
                                                            # //             identifier-any-char identifier-any-char-sequence
                                                            # //             identifier-any-char
                                                            # // 
                                                            # // symbol
                                                            # //             one-of  < > + - / * = <= >= ( ) { } [ ] != == ; , 
                                                            # //
                                                            # // keyword
                                                            # //             one-of  const int char if else while enum debug
                                                            # //
                                                            # // ---------------------------------------------------------------------------
                                                            # 
                                                            # int token_type;
preprocessor_skip_end:
                        leave
                        ret
                                                            # int token_lookahead_type;
                                                            # 
                                                            # int token_line_no;
                                                            # int token_lookahead_line_no;
                                                            # 
                                                            # int token_line_pos;
                                                            # int token_lookahead_line_pos;
                                                            # 
                                                            # char token_text[Str_size];
                                                            # char token_lookahead_text[Str_size];
                                                            # 
                                                            # enum {
                                                            #     Token_t_invalid,
                                                            #     Token_t_character_constant,
                                                            #     Token_t_integer_constant,
                                                            #     Token_t_string_literal,
                                                            #     Token_t_identifier,
                                                            #     Token_t_symbol,
                                                            #     Token_t_keyword,
                                                            #     Token_t_eof
                                                            # };
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # token_init() {
token_init:             enter             $32, $0
                                                            #     token_line_no = 0;
                        movl              $0, %eax
                        movl              %eax, 4197404+global
                                                            #     token_line_pos = 0;
                        movl              $0, %eax
                        movl              %eax, 4197412+global
                                                            #     token_lookahead_line_no = 0;
                        movl              $0, %eax
                        movl              %eax, 4197408+global
                                                            #     token_lookahead_line_pos = 0;
                        movl              $0, %eax
                        movl              %eax, 4197416+global
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # token_char_escape_sequence() {
token_init_end:
                        leave
                        ret
token_char_escape_sequence: enter         $40, $0
                                                            #     int c1;
                                                            #     int c2;
                                                            # 
                                                            #     c1 = preprocessor_lookahead1();
                        call              preprocessor_lookahead1
                        movl              %eax, -4(%ebp)
                                                            #     c2 = preprocessor_lookahead2();
                        call              preprocessor_lookahead2
                        movl              %eax, -8(%ebp)
                                                            # 
                                                            #     if (c1 != '\\' || c2 == '\n') {
                        movl              -4(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              $92, %eax
                        subl              -12(%ebp), %eax
                        jne               compare_85_true
                        movl              $0, %eax
                        jmp               compare_85_false
compare_85_true:        movl              $1, %eax
compare_85_false:       cmpl              $0, %eax
                        jnz               logical_or_86_true
                        movl              -8(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              $10, %eax
                        subl              -12(%ebp), %eax
                        je                compare_87_true
                        movl              $0, %eax
                        jmp               compare_87_false
compare_87_true:        movl              $1, %eax
compare_87_false:       cmpl              $0, %eax
                        jnz               logical_or_86_true
                        movl              $0, %eax
                        jmp               logical_or_86_false
logical_or_86_true:     movl              $1, %eax
logical_or_86_false:    cmpl              $0, %eax
                        jz                if_88_next
                                                            #         return False;
                        movl              $0, %eax
                        jmp               token_char_escape_sequence_end
                                                            #     }
                                                            # 
                                                            #     preprocessor_read_char();
if_88_next:
if_88_end:              call              preprocessor_read_char
                                                            #     preprocessor_read_char();
                        call              preprocessor_read_char
                                                            # 
                                                            #     if        (c2 == 'n') {
                        movl              -8(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              $110, %eax
                        subl              -12(%ebp), %eax
                        je                compare_89_true
                        movl              $0, %eax
                        jmp               compare_89_false
compare_89_true:        movl              $1, %eax
compare_89_false:       cmpl              $0, %eax
                        jz                if_90_next
                                                            #         c1 = 10;
                        movl              $10, %eax
                        movl              %eax, -4(%ebp)
                                                            #     } else if (c2 == 'r') {
                        jmp               if_90_end
if_90_next:             movl              -8(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              $114, %eax
                        subl              -12(%ebp), %eax
                        je                compare_91_true
                        movl              $0, %eax
                        jmp               compare_91_false
compare_91_true:        movl              $1, %eax
compare_91_false:       cmpl              $0, %eax
                        jz                if_92_next
                                                            #         c1 = 13;
                        movl              $13, %eax
                        movl              %eax, -4(%ebp)
                                                            #     } else if (c2 == 't') {
                        jmp               if_92_end
if_92_next:             movl              -8(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              $116, %eax
                        subl              -12(%ebp), %eax
                        je                compare_93_true
                        movl              $0, %eax
                        jmp               compare_93_false
compare_93_true:        movl              $1, %eax
compare_93_false:       cmpl              $0, %eax
                        jz                if_94_next
                                                            #         c1 = 9;
                        movl              $9, %eax
                        movl              %eax, -4(%ebp)
                                                            #     } else if (c2 == '\\') {
                        jmp               if_94_end
if_94_next:             movl              -8(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              $92, %eax
                        subl              -12(%ebp), %eax
                        je                compare_95_true
                        movl              $0, %eax
                        jmp               compare_95_false
compare_95_true:        movl              $1, %eax
compare_95_false:       cmpl              $0, %eax
                        jz                if_96_next
                                                            #         c1 = 92;
                        movl              $92, %eax
                        movl              %eax, -4(%ebp)
                                                            #     } else if (c2 == '\'') {
                        jmp               if_96_end
if_96_next:             movl              -8(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              $39, %eax
                        subl              -12(%ebp), %eax
                        je                compare_97_true
                        movl              $0, %eax
                        jmp               compare_97_false
compare_97_true:        movl              $1, %eax
compare_97_false:       cmpl              $0, %eax
                        jz                if_98_next
                                                            #         c1 = 39;
                        movl              $39, %eax
                        movl              %eax, -4(%ebp)
                                                            #     } else if (c2 == '\"') {
                        jmp               if_98_end
if_98_next:             movl              -8(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              $34, %eax
                        subl              -12(%ebp), %eax
                        je                compare_99_true
                        movl              $0, %eax
                        jmp               compare_99_false
compare_99_true:        movl              $1, %eax
compare_99_false:       cmpl              $0, %eax
                        jz                if_100_next
                                                            #         c1 = 34;
                        movl              $34, %eax
                        movl              %eax, -4(%ebp)
                                                            #     } else {
                        jmp               if_100_end
                                                            #         error_parse("invalid character escape sequence");
if_100_next:            lea               740+string, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        call              error_parse
                        addl              $4, %esp
                                                            #     }
                                                            # 
                                                            #     append_char(token_lookahead_text, c1);
if_100_end:
if_98_end:
if_96_end:
if_94_end:
if_92_end:
if_90_end:              lea               4198444+global, %eax
                        movl              %eax, -12(%ebp)
                        movl              -4(%ebp), %eax
                        movl              %eax, -16(%ebp)
                        movl              -16(%ebp), %eax
                        pushl             %eax
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        call              append_char
                        addl              $8, %esp
                                                            #     return True;
                        movl              $1, %eax
                        jmp               token_char_escape_sequence_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # token_string_literal_char() {
token_char_escape_sequence_end:
                        leave
                        ret
token_string_literal_char: enter          $36, $0
                                                            #     int c1;
                                                            # 
                                                            #     if (token_char_escape_sequence()) {
                        call              token_char_escape_sequence
                        cmpl              $0, %eax
                        jz                if_101_next
                                                            #         return True;
                        movl              $1, %eax
                        jmp               token_string_literal_char_end
                                                            #     }
                                                            # 
                                                            #     c1 = preprocessor_lookahead1();
if_101_next:
if_101_end:             call              preprocessor_lookahead1
                        movl              %eax, -4(%ebp)
                                                            #     if (c1 != '"') {
                        movl              -4(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              $34, %eax
                        subl              -8(%ebp), %eax
                        jne               compare_102_true
                        movl              $0, %eax
                        jmp               compare_102_false
compare_102_true:       movl              $1, %eax
compare_102_false:      cmpl              $0, %eax
                        jz                if_103_next
                                                            #         append_char(token_lookahead_text, c1);
                        lea               4198444+global, %eax
                        movl              %eax, -8(%ebp)
                        movl              -4(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              append_char
                        addl              $8, %esp
                                                            #         preprocessor_read_char();
                        call              preprocessor_read_char
                                                            #         return True;
                        movl              $1, %eax
                        jmp               token_string_literal_char_end
                                                            #     }
                                                            # 
                                                            #     return False;
if_103_next:
if_103_end:             movl              $0, %eax
                        jmp               token_string_literal_char_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # token_string_literal_char_sequence() {
token_string_literal_char_end:
                        leave
                        ret
token_string_literal_char_sequence: enter $32, $0
                                                            # 
                                                            #     if (token_string_literal_char()) {
                        call              token_string_literal_char
                        cmpl              $0, %eax
                        jz                if_104_next
                                                            #         token_string_literal_char_sequence();
                        call              token_string_literal_char_sequence
                                                            #         return True;
                        movl              $1, %eax
                        jmp               token_string_literal_char_sequence_end
                                                            #     }
                                                            # 
                                                            #     return False;
if_104_next:
if_104_end:             movl              $0, %eax
                        jmp               token_string_literal_char_sequence_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # token_string_literal() {
token_string_literal_char_sequence_end:
                        leave
                        ret
token_string_literal:   enter             $32, $0
                                                            # 
                                                            #     if (preprocessor_lookahead1() != '"') {
                        call              preprocessor_lookahead1
                        movl              %eax, -4(%ebp)
                        movl              $34, %eax
                        subl              -4(%ebp), %eax
                        jne               compare_105_true
                        movl              $0, %eax
                        jmp               compare_105_false
compare_105_true:       movl              $1, %eax
compare_105_false:      cmpl              $0, %eax
                        jz                if_106_next
                                                            #         return False;
                        movl              $0, %eax
                        jmp               token_string_literal_end
                                                            #     }
                                                            # 
                                                            #     preprocessor_read_char();
if_106_next:
if_106_end:             call              preprocessor_read_char
                                                            #     token_string_literal_char_sequence();
                        call              token_string_literal_char_sequence
                                                            # 
                                                            #     if (preprocessor_read_char() != '"') {
                        call              preprocessor_read_char
                        movl              %eax, -4(%ebp)
                        movl              $34, %eax
                        subl              -4(%ebp), %eax
                        jne               compare_107_true
                        movl              $0, %eax
                        jmp               compare_107_false
compare_107_true:       movl              $1, %eax
compare_107_false:      cmpl              $0, %eax
                        jz                if_108_next
                                                            #         error_parse("string literal not terminated");
                        lea               876+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              error_parse
                        addl              $4, %esp
                                                            #     }
                                                            # 
                                                            #     token_lookahead_type = Token_t_string_literal;
if_108_next:
if_108_end:             movl              $3, %eax
                        movl              %eax, 4197400+global
                                                            #     return True;
                        movl              $1, %eax
                        jmp               token_string_literal_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # token_identifier_any_char() {
token_string_literal_end:
                        leave
                        ret
token_identifier_any_char: enter          $36, $0
                                                            #     int c1;
                                                            # 
                                                            #     c1 = preprocessor_lookahead1();
                        call              preprocessor_lookahead1
                        movl              %eax, -4(%ebp)
                                                            #     if (! contains_char("_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789", c1)) {
                        lea               996+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -4(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              contains_char
                        addl              $8, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_109_false
                        movl              $1, %eax
                        jmp               logical_not_109_true
logical_not_109_false:  movl              $0, %eax
logical_not_109_true:   cmpl              $0, %eax
                        jz                if_110_next
                                                            #         return False;
                        movl              $0, %eax
                        jmp               token_identifier_any_char_end
                                                            #     }
                                                            # 
                                                            #     append_char(token_lookahead_text, c1);
if_110_next:
if_110_end:             lea               4198444+global, %eax
                        movl              %eax, -8(%ebp)
                        movl              -4(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              append_char
                        addl              $8, %esp
                                                            #     preprocessor_read_char();
                        call              preprocessor_read_char
                                                            #     return True;
                        movl              $1, %eax
                        jmp               token_identifier_any_char_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # token_identifier_any_char_sequence() {
token_identifier_any_char_end:
                        leave
                        ret
token_identifier_any_char_sequence: enter $32, $0
                                                            # 
                                                            #     if (! token_identifier_any_char()) {
                        call              token_identifier_any_char
                        cmpl              $0, %eax
                        jnz               logical_not_111_false
                        movl              $1, %eax
                        jmp               logical_not_111_true
logical_not_111_false:  movl              $0, %eax
logical_not_111_true:   cmpl              $0, %eax
                        jz                if_112_next
                                                            #         return False;
                        movl              $0, %eax
                        jmp               token_identifier_any_char_sequence_end
                                                            #     }
                                                            # 
                                                            #     token_identifier_any_char_sequence();
if_112_next:
if_112_end:             call              token_identifier_any_char_sequence
                                                            #     return True;
                        movl              $1, %eax
                        jmp               token_identifier_any_char_sequence_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # token_identifier_non_digit_char() {
token_identifier_any_char_sequence_end:
                        leave
                        ret
token_identifier_non_digit_char: enter    $36, $0
                                                            #     int c1;
                                                            # 
                                                            #     c1 = preprocessor_lookahead1();
                        call              preprocessor_lookahead1
                        movl              %eax, -4(%ebp)
                                                            #     if (! contains_char("_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", c1)) {
                        lea               1252+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -4(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              contains_char
                        addl              $8, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_113_false
                        movl              $1, %eax
                        jmp               logical_not_113_true
logical_not_113_false:  movl              $0, %eax
logical_not_113_true:   cmpl              $0, %eax
                        jz                if_114_next
                                                            #         return False;
                        movl              $0, %eax
                        jmp               token_identifier_non_digit_char_end
                                                            #     }
                                                            # 
                                                            #     append_char(token_lookahead_text, c1);
if_114_next:
if_114_end:             lea               4198444+global, %eax
                        movl              %eax, -8(%ebp)
                        movl              -4(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              append_char
                        addl              $8, %esp
                                                            #     preprocessor_read_char();
                        call              preprocessor_read_char
                                                            #     return True;
                        movl              $1, %eax
                        jmp               token_identifier_non_digit_char_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # token_identifier_or_keyword() {
token_identifier_non_digit_char_end:
                        leave
                        ret
token_identifier_or_keyword: enter        $1056, $0
                                                            #     char tmp_str[Str_size];
                                                            # 
                                                            #     if (! token_identifier_non_digit_char()) {
                        call              token_identifier_non_digit_char
                        cmpl              $0, %eax
                        jnz               logical_not_115_false
                        movl              $1, %eax
                        jmp               logical_not_115_true
logical_not_115_false:  movl              $0, %eax
logical_not_115_true:   cmpl              $0, %eax
                        jz                if_116_next
                                                            #         return False;
                        movl              $0, %eax
                        jmp               token_identifier_or_keyword_end
                                                            #     }
                                                            # 
                                                            #     token_identifier_any_char_sequence();
if_116_next:
if_116_end:             call              token_identifier_any_char_sequence
                                                            #     copy(tmp_str, " ");
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        lea               1468+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              copy
                        addl              $8, %esp
                                                            #     append(tmp_str, token_lookahead_text);
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        lea               4198444+global, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              append
                        addl              $8, %esp
                                                            #     append(tmp_str, " ");
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        lea               1476+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              append
                        addl              $8, %esp
                                                            # 
                                                            #     if (contains(" int char if else while enum return ", tmp_str)) {
                        lea               1484+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              contains
                        addl              $8, %esp
                        cmpl              $0, %eax
                        jz                if_117_next
                                                            #         token_lookahead_type = Token_t_keyword;
                        movl              $6, %eax
                        movl              %eax, 4197400+global
                                                            #     } else {
                        jmp               if_117_end
                                                            #         token_lookahead_type = Token_t_identifier;
if_117_next:            movl              $4, %eax
                        movl              %eax, 4197400+global
                                                            #     }
                                                            # 
                                                            #     return True;
if_117_end:             movl              $1, %eax
                        jmp               token_identifier_or_keyword_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # token_character_constant() {
token_identifier_or_keyword_end:
                        leave
                        ret
token_character_constant: enter           $36, $0
                                                            #     int c1;
                                                            # 
                                                            #     if (preprocessor_lookahead1() != '\'') {
                        call              preprocessor_lookahead1
                        movl              %eax, -8(%ebp)
                        movl              $39, %eax
                        subl              -8(%ebp), %eax
                        jne               compare_118_true
                        movl              $0, %eax
                        jmp               compare_118_false
compare_118_true:       movl              $1, %eax
compare_118_false:      cmpl              $0, %eax
                        jz                if_119_next
                                                            #         return False;
                        movl              $0, %eax
                        jmp               token_character_constant_end
                                                            #     }
                                                            # 
                                                            #     token_lookahead_type = Token_t_character_constant;
if_119_next:
if_119_end:             movl              $1, %eax
                        movl              %eax, 4197400+global
                                                            #     preprocessor_read_char();
                        call              preprocessor_read_char
                                                            # 
                                                            #     if (! token_char_escape_sequence()) {
                        call              token_char_escape_sequence
                        cmpl              $0, %eax
                        jnz               logical_not_120_false
                        movl              $1, %eax
                        jmp               logical_not_120_true
logical_not_120_false:  movl              $0, %eax
logical_not_120_true:   cmpl              $0, %eax
                        jz                if_121_next
                                                            #         c1 = preprocessor_read_char();
                        call              preprocessor_read_char
                        movl              %eax, -4(%ebp)
                                                            #         append_char(token_lookahead_text, c1);
                        lea               4198444+global, %eax
                        movl              %eax, -8(%ebp)
                        movl              -4(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              append_char
                        addl              $8, %esp
                                                            #     }
                                                            # 
                                                            #     c1 = preprocessor_read_char();
if_121_next:
if_121_end:             call              preprocessor_read_char
                        movl              %eax, -4(%ebp)
                                                            #     if (c1 != '\'') {
                        movl              -4(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              $39, %eax
                        subl              -8(%ebp), %eax
                        jne               compare_122_true
                        movl              $0, %eax
                        jmp               compare_122_false
compare_122_true:       movl              $1, %eax
compare_122_false:      cmpl              $0, %eax
                        jz                if_123_next
                                                            #         error_parse("character constant not terminated");
                        lea               1632+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              error_parse
                        addl              $4, %esp
                                                            #     }
                                                            # 
                                                            #     return True;
if_123_next:
if_123_end:             movl              $1, %eax
                        jmp               token_character_constant_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # token_digit() {
token_character_constant_end:
                        leave
                        ret
token_digit:            enter             $36, $0
                                                            #     int c1;
                                                            # 
                                                            #     c1 = preprocessor_lookahead1();
                        call              preprocessor_lookahead1
                        movl              %eax, -4(%ebp)
                                                            # 
                                                            #     if (! contains_char("0123456789", c1)) {
                        lea               1768+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -4(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              contains_char
                        addl              $8, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_124_false
                        movl              $1, %eax
                        jmp               logical_not_124_true
logical_not_124_false:  movl              $0, %eax
logical_not_124_true:   cmpl              $0, %eax
                        jz                if_125_next
                                                            #         return False;
                        movl              $0, %eax
                        jmp               token_digit_end
                                                            #     }
                                                            # 
                                                            #     c1 = preprocessor_read_char();
if_125_next:
if_125_end:             call              preprocessor_read_char
                        movl              %eax, -4(%ebp)
                                                            #     append_char(token_lookahead_text, c1);
                        lea               4198444+global, %eax
                        movl              %eax, -8(%ebp)
                        movl              -4(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              append_char
                        addl              $8, %esp
                                                            # 
                                                            #     return True;
                        movl              $1, %eax
                        jmp               token_digit_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # token_digit_sequence() {
token_digit_end:
                        leave
                        ret
token_digit_sequence:   enter             $32, $0
                                                            #     if (! token_digit()) {
                        call              token_digit
                        cmpl              $0, %eax
                        jnz               logical_not_126_false
                        movl              $1, %eax
                        jmp               logical_not_126_true
logical_not_126_false:  movl              $0, %eax
logical_not_126_true:   cmpl              $0, %eax
                        jz                if_127_next
                                                            #         return False;
                        movl              $0, %eax
                        jmp               token_digit_sequence_end
                                                            #     }
                                                            # 
                                                            #     token_digit_sequence();
if_127_next:
if_127_end:             call              token_digit_sequence
                                                            #     return True;
                        movl              $1, %eax
                        jmp               token_digit_sequence_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # token_integer_constant() {
token_digit_sequence_end:
                        leave
                        ret
token_integer_constant: enter             $32, $0
                                                            #     if (! token_digit_sequence()) {
                        call              token_digit_sequence
                        cmpl              $0, %eax
                        jnz               logical_not_128_false
                        movl              $1, %eax
                        jmp               logical_not_128_true
logical_not_128_false:  movl              $0, %eax
logical_not_128_true:   cmpl              $0, %eax
                        jz                if_129_next
                                                            #         return False;
                        movl              $0, %eax
                        jmp               token_integer_constant_end
                                                            #     }
                                                            # 
                                                            #     token_lookahead_type = Token_t_integer_constant;
if_129_next:
if_129_end:             movl              $2, %eax
                        movl              %eax, 4197400+global
                                                            #     return True;
                        movl              $1, %eax
                        jmp               token_integer_constant_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # token_symbol() {
token_integer_constant_end:
                        leave
                        ret
token_symbol:           enter             $40, $0
                                                            #     int c1;
                                                            #     int c2;
                                                            # 
                                                            #     c1 = preprocessor_lookahead1();
                        call              preprocessor_lookahead1
                        movl              %eax, -4(%ebp)
                                                            #     c2 = preprocessor_lookahead2();
                        call              preprocessor_lookahead2
                        movl              %eax, -8(%ebp)
                                                            # 
                                                            #     if (c1 == '<' && c2 == '=' ||
                        movl              -4(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              $60, %eax
                        subl              -12(%ebp), %eax
                        je                compare_130_true
                        movl              $0, %eax
                        jmp               compare_130_false
compare_130_true:       movl              $1, %eax
compare_130_false:      cmpl              $0, %eax
                        jz                logical_and_131_false
                        movl              -8(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              $61, %eax
                        subl              -12(%ebp), %eax
                        je                compare_132_true
                        movl              $0, %eax
                        jmp               compare_132_false
compare_132_true:       movl              $1, %eax
compare_132_false:      cmpl              $0, %eax
                        jz                logical_and_131_false
                        movl              $1, %eax
                        jmp               logical_and_131_true
logical_and_131_false:  movl              $0, %eax
logical_and_131_true:   cmpl              $0, %eax
                        jnz               logical_or_133_true
                        movl              -4(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              $62, %eax
                        subl              -12(%ebp), %eax
                        je                compare_134_true
                        movl              $0, %eax
                        jmp               compare_134_false
compare_134_true:       movl              $1, %eax
compare_134_false:      cmpl              $0, %eax
                        jz                logical_and_135_false
                        movl              -8(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              $61, %eax
                        subl              -12(%ebp), %eax
                        je                compare_136_true
                        movl              $0, %eax
                        jmp               compare_136_false
compare_136_true:       movl              $1, %eax
compare_136_false:      cmpl              $0, %eax
                        jz                logical_and_135_false
                        movl              $1, %eax
                        jmp               logical_and_135_true
logical_and_135_false:  movl              $0, %eax
logical_and_135_true:   cmpl              $0, %eax
                        jnz               logical_or_133_true
                        movl              -4(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              $61, %eax
                        subl              -12(%ebp), %eax
                        je                compare_137_true
                        movl              $0, %eax
                        jmp               compare_137_false
compare_137_true:       movl              $1, %eax
compare_137_false:      cmpl              $0, %eax
                        jz                logical_and_138_false
                        movl              -8(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              $61, %eax
                        subl              -12(%ebp), %eax
                        je                compare_139_true
                        movl              $0, %eax
                        jmp               compare_139_false
compare_139_true:       movl              $1, %eax
compare_139_false:      cmpl              $0, %eax
                        jz                logical_and_138_false
                        movl              $1, %eax
                        jmp               logical_and_138_true
logical_and_138_false:  movl              $0, %eax
logical_and_138_true:   cmpl              $0, %eax
                        jnz               logical_or_133_true
                        movl              -4(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              $33, %eax
                        subl              -12(%ebp), %eax
                        je                compare_140_true
                        movl              $0, %eax
                        jmp               compare_140_false
compare_140_true:       movl              $1, %eax
compare_140_false:      cmpl              $0, %eax
                        jz                logical_and_141_false
                        movl              -8(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              $61, %eax
                        subl              -12(%ebp), %eax
                        je                compare_142_true
                        movl              $0, %eax
                        jmp               compare_142_false
compare_142_true:       movl              $1, %eax
compare_142_false:      cmpl              $0, %eax
                        jz                logical_and_141_false
                        movl              $1, %eax
                        jmp               logical_and_141_true
logical_and_141_false:  movl              $0, %eax
logical_and_141_true:   cmpl              $0, %eax
                        jnz               logical_or_133_true
                        movl              -4(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              $38, %eax
                        subl              -12(%ebp), %eax
                        je                compare_143_true
                        movl              $0, %eax
                        jmp               compare_143_false
compare_143_true:       movl              $1, %eax
compare_143_false:      cmpl              $0, %eax
                        jz                logical_and_144_false
                        movl              -8(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              $38, %eax
                        subl              -12(%ebp), %eax
                        je                compare_145_true
                        movl              $0, %eax
                        jmp               compare_145_false
compare_145_true:       movl              $1, %eax
compare_145_false:      cmpl              $0, %eax
                        jz                logical_and_144_false
                        movl              $1, %eax
                        jmp               logical_and_144_true
logical_and_144_false:  movl              $0, %eax
logical_and_144_true:   cmpl              $0, %eax
                        jnz               logical_or_133_true
                        movl              -4(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              $124, %eax
                        subl              -12(%ebp), %eax
                        je                compare_146_true
                        movl              $0, %eax
                        jmp               compare_146_false
compare_146_true:       movl              $1, %eax
compare_146_false:      cmpl              $0, %eax
                        jz                logical_and_147_false
                        movl              -8(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              $124, %eax
                        subl              -12(%ebp), %eax
                        je                compare_148_true
                        movl              $0, %eax
                        jmp               compare_148_false
compare_148_true:       movl              $1, %eax
compare_148_false:      cmpl              $0, %eax
                        jz                logical_and_147_false
                        movl              $1, %eax
                        jmp               logical_and_147_true
logical_and_147_false:  movl              $0, %eax
logical_and_147_true:   cmpl              $0, %eax
                        jnz               logical_or_133_true
                        movl              $0, %eax
                        jmp               logical_or_133_false
logical_or_133_true:    movl              $1, %eax
logical_or_133_false:   cmpl              $0, %eax
                        jz                if_149_next
                                                            #         c1 == '>' && c2 == '=' ||
                                                            #         c1 == '=' && c2 == '=' ||
                                                            #         c1 == '!' && c2 == '=' ||
                                                            #         c1 == '&' && c2 == '&' ||
                                                            #         c1 == '|' && c2 == '|') {
                                                            # 
                                                            #         copy(token_lookahead_text, "");
                        lea               4198444+global, %eax
                        movl              %eax, -12(%ebp)
                        lea               1812+string, %eax
                        movl              %eax, -16(%ebp)
                        movl              -16(%ebp), %eax
                        pushl             %eax
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        call              copy
                        addl              $8, %esp
                                                            #         append_char(token_lookahead_text, c1);
                        lea               4198444+global, %eax
                        movl              %eax, -12(%ebp)
                        movl              -4(%ebp), %eax
                        movl              %eax, -16(%ebp)
                        movl              -16(%ebp), %eax
                        pushl             %eax
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        call              append_char
                        addl              $8, %esp
                                                            #         append_char(token_lookahead_text, c2);
                        lea               4198444+global, %eax
                        movl              %eax, -12(%ebp)
                        movl              -8(%ebp), %eax
                        movl              %eax, -16(%ebp)
                        movl              -16(%ebp), %eax
                        pushl             %eax
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        call              append_char
                        addl              $8, %esp
                                                            # 
                                                            #         preprocessor_read_char();
                        call              preprocessor_read_char
                                                            #         preprocessor_read_char();
                        call              preprocessor_read_char
                                                            # 
                                                            #         token_lookahead_type = Token_t_symbol;
                        movl              $5, %eax
                        movl              %eax, 4197400+global
                                                            #         return True;
                        movl              $1, %eax
                        jmp               token_symbol_end
                                                            #     }
                                                            # 
                                                            #     if (contains_char("<>=+-/*()[]{}!;,", c1)) {
if_149_next:
if_149_end:             lea               1816+string, %eax
                        movl              %eax, -12(%ebp)
                        movl              -4(%ebp), %eax
                        movl              %eax, -16(%ebp)
                        movl              -16(%ebp), %eax
                        pushl             %eax
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        call              contains_char
                        addl              $8, %esp
                        cmpl              $0, %eax
                        jz                if_150_next
                                                            #         copy(token_lookahead_text, "");
                        lea               4198444+global, %eax
                        movl              %eax, -12(%ebp)
                        lea               1884+string, %eax
                        movl              %eax, -16(%ebp)
                        movl              -16(%ebp), %eax
                        pushl             %eax
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        call              copy
                        addl              $8, %esp
                                                            #         append_char(token_lookahead_text, c1);
                        lea               4198444+global, %eax
                        movl              %eax, -12(%ebp)
                        movl              -4(%ebp), %eax
                        movl              %eax, -16(%ebp)
                        movl              -16(%ebp), %eax
                        pushl             %eax
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        call              append_char
                        addl              $8, %esp
                                                            # 
                                                            #         token_lookahead_type = Token_t_symbol;
                        movl              $5, %eax
                        movl              %eax, 4197400+global
                                                            # 
                                                            #         preprocessor_read_char();
                        call              preprocessor_read_char
                                                            #         return True;
                        movl              $1, %eax
                        jmp               token_symbol_end
                                                            #     }
                                                            # 
                                                            #     return False;
if_150_next:
if_150_end:             movl              $0, %eax
                        jmp               token_symbol_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # token_token() {
token_symbol_end:
                        leave
                        ret
token_token:            enter             $32, $0
                                                            # 
                                                            #     if (token_integer_constant()) {
                        call              token_integer_constant
                        cmpl              $0, %eax
                        jz                if_151_next
                                                            #         return True;
                        movl              $1, %eax
                        jmp               token_token_end
                                                            #     }
                                                            # 
                                                            #     if (token_character_constant()) {
if_151_next:
if_151_end:             call              token_character_constant
                        cmpl              $0, %eax
                        jz                if_152_next
                                                            #         return True;
                        movl              $1, %eax
                        jmp               token_token_end
                                                            #     }
                                                            # 
                                                            #     if (token_string_literal()) {
if_152_next:
if_152_end:             call              token_string_literal
                        cmpl              $0, %eax
                        jz                if_153_next
                                                            #         return True;
                        movl              $1, %eax
                        jmp               token_token_end
                                                            #     }
                                                            # 
                                                            #     if (token_identifier_or_keyword()) {
if_153_next:
if_153_end:             call              token_identifier_or_keyword
                        cmpl              $0, %eax
                        jz                if_154_next
                                                            #         return True;
                        movl              $1, %eax
                        jmp               token_token_end
                                                            #     }
                                                            # 
                                                            #     if (token_symbol()) {
if_154_next:
if_154_end:             call              token_symbol
                        cmpl              $0, %eax
                        jz                if_155_next
                                                            #         return True;
                        movl              $1, %eax
                        jmp               token_token_end
                                                            #     }
                                                            # 
                                                            #     return False;
if_155_next:
if_155_end:             movl              $0, %eax
                        jmp               token_token_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # token_get_next() {
token_token_end:
                        leave
                        ret
token_get_next:         enter             $32, $0
                                                            #     token_lookahead_type = Token_t_invalid;
                        movl              $0, %eax
                        movl              %eax, 4197400+global
                                                            #     copy(token_lookahead_text, "");
                        lea               4198444+global, %eax
                        movl              %eax, -4(%ebp)
                        lea               1888+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              copy
                        addl              $8, %esp
                                                            # 
                                                            #     if (! preprocessor_skip()) {
                        call              preprocessor_skip
                        cmpl              $0, %eax
                        jnz               logical_not_156_false
                        movl              $1, %eax
                        jmp               logical_not_156_true
logical_not_156_false:  movl              $0, %eax
logical_not_156_true:   cmpl              $0, %eax
                        jz                if_157_next
                                                            #         token_lookahead_type = Token_t_eof;
                        movl              $7, %eax
                        movl              %eax, 4197400+global
                                                            #         return True;
                        movl              $1, %eax
                        jmp               token_get_next_end
                                                            #     }
                                                            # 
                                                            #     token_lookahead_line_no = preprocessor_get_line_no();
if_157_next:
if_157_end:             call              preprocessor_get_line_no
                        movl              %eax, 4197408+global
                                                            #     token_lookahead_line_pos = preprocessor_get_line_pos();
                        call              preprocessor_get_line_pos
                        movl              %eax, 4197416+global
                                                            # 
                                                            #     if (token_token()) {
                        call              token_token
                        cmpl              $0, %eax
                        jz                if_158_next
                                                            #         return True;
                        movl              $1, %eax
                        jmp               token_get_next_end
                                                            #     }
                                                            # 
                                                            #     token_lookahead_type = Token_t_invalid;
if_158_next:
if_158_end:             movl              $0, %eax
                        movl              %eax, 4197400+global
                                                            #     return False;
                        movl              $0, %eax
                        jmp               token_get_next_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # token_text_is(char s[]) {
token_get_next_end:
                        leave
                        ret
token_text_is:          enter             $32, $0
                                                            #     if (token_type == Token_t_identifier || token_type == Token_t_symbol || token_type == Token_t_keyword) {
                        movl              4197396+global, %eax
                        movl              %eax, -4(%ebp)
                        movl              $4, %eax
                        subl              -4(%ebp), %eax
                        je                compare_159_true
                        movl              $0, %eax
                        jmp               compare_159_false
compare_159_true:       movl              $1, %eax
compare_159_false:      cmpl              $0, %eax
                        jnz               logical_or_160_true
                        movl              4197396+global, %eax
                        movl              %eax, -4(%ebp)
                        movl              $5, %eax
                        subl              -4(%ebp), %eax
                        je                compare_161_true
                        movl              $0, %eax
                        jmp               compare_161_false
compare_161_true:       movl              $1, %eax
compare_161_false:      cmpl              $0, %eax
                        jnz               logical_or_160_true
                        movl              4197396+global, %eax
                        movl              %eax, -4(%ebp)
                        movl              $6, %eax
                        subl              -4(%ebp), %eax
                        je                compare_162_true
                        movl              $0, %eax
                        jmp               compare_162_false
compare_162_true:       movl              $1, %eax
compare_162_false:      cmpl              $0, %eax
                        jnz               logical_or_160_true
                        movl              $0, %eax
                        jmp               logical_or_160_false
logical_or_160_true:    movl              $1, %eax
logical_or_160_false:   cmpl              $0, %eax
                        jz                if_163_next
                                                            #         if (str_equals(token_text, s)) {
                        lea               4197420+global, %eax
                        movl              %eax, -4(%ebp)
                        movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              str_equals
                        addl              $8, %esp
                        cmpl              $0, %eax
                        jz                if_164_next
                                                            #             return True;
                        movl              $1, %eax
                        jmp               token_text_is_end
                                                            #         }
                                                            #     }
if_164_next:
                                                            # 
                                                            #     return False;
if_164_end:
if_163_next:
if_163_end:             movl              $0, %eax
                        jmp               token_text_is_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # token_lookahead_text_is(char s[]) {
token_text_is_end:
                        leave
                        ret
token_lookahead_text_is: enter            $32, $0
                                                            #     if (str_equals(token_lookahead_text, s)) {
                        lea               4198444+global, %eax
                        movl              %eax, -4(%ebp)
                        movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              str_equals
                        addl              $8, %esp
                        cmpl              $0, %eax
                        jz                if_165_next
                                                            #         return True;
                        movl              $1, %eax
                        jmp               token_lookahead_text_is_end
                                                            #     }
                                                            # 
                                                            #     return False;
if_165_next:
if_165_end:             movl              $0, %eax
                        jmp               token_lookahead_text_is_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # token_type_is(int t) {
token_lookahead_text_is_end:
                        leave
                        ret
token_type_is:          enter             $32, $0
                                                            #     if (token_type == t) {
                        movl              4197396+global, %eax
                        movl              %eax, -4(%ebp)
                        movl              8(%ebp), %eax
                        subl              -4(%ebp), %eax
                        je                compare_166_true
                        movl              $0, %eax
                        jmp               compare_166_false
compare_166_true:       movl              $1, %eax
compare_166_false:      cmpl              $0, %eax
                        jz                if_167_next
                                                            #         return True;
                        movl              $1, %eax
                        jmp               token_type_is_end
                                                            #     }
                                                            # 
                                                            #     return False;
if_167_next:
if_167_end:             movl              $0, %eax
                        jmp               token_type_is_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # token_lookahead_type_is(int t) {
token_type_is_end:
                        leave
                        ret
token_lookahead_type_is: enter            $32, $0
                                                            #     if (token_lookahead_type == t) {
                        movl              4197400+global, %eax
                        movl              %eax, -4(%ebp)
                        movl              8(%ebp), %eax
                        subl              -4(%ebp), %eax
                        je                compare_168_true
                        movl              $0, %eax
                        jmp               compare_168_false
compare_168_true:       movl              $1, %eax
compare_168_false:      cmpl              $0, %eax
                        jz                if_169_next
                                                            #         return True;
                        movl              $1, %eax
                        jmp               token_lookahead_type_is_end
                                                            #     }
                                                            # 
                                                            #     return False;
if_169_next:
if_169_end:             movl              $0, %eax
                        jmp               token_lookahead_type_is_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # token_advance() {
token_lookahead_type_is_end:
                        leave
                        ret
token_advance:          enter             $32, $0
                                                            #     if (token_lookahead_line_no == 0) {
                        movl              4197408+global, %eax
                        movl              %eax, -4(%ebp)
                        movl              $0, %eax
                        subl              -4(%ebp), %eax
                        je                compare_170_true
                        movl              $0, %eax
                        jmp               compare_170_false
compare_170_true:       movl              $1, %eax
compare_170_false:      cmpl              $0, %eax
                        jz                if_171_next
                                                            #         token_get_next();
                        call              token_get_next
                                                            #     }
                                                            # 
                                                            #     copy(token_text,token_lookahead_text);
if_171_next:
if_171_end:             lea               4197420+global, %eax
                        movl              %eax, -4(%ebp)
                        lea               4198444+global, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              copy
                        addl              $8, %esp
                                                            #     token_type = token_lookahead_type;
                        movl              4197400+global, %eax
                        movl              %eax, 4197396+global
                                                            #     token_line_no = token_lookahead_line_no;
                        movl              4197408+global, %eax
                        movl              %eax, 4197404+global
                                                            #     token_line_pos = token_lookahead_line_pos;
                        movl              4197416+global, %eax
                        movl              %eax, 4197412+global
                                                            # 
                                                            #     error_set_line(token_line_no, token_line_pos);
                        movl              4197404+global, %eax
                        movl              %eax, -4(%ebp)
                        movl              4197412+global, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              error_set_line
                        addl              $8, %esp
                                                            # 
                                                            #     token_get_next();
                        call              token_get_next
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # token_advance_if(char s[]) {
token_advance_end:
                        leave
                        ret
token_advance_if:       enter             $32, $0
                                                            #     if (token_text_is(s)) {
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              token_text_is
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jz                if_172_next
                                                            #         token_advance();
                        call              token_advance
                                                            #         return True;
                        movl              $1, %eax
                        jmp               token_advance_if_end
                                                            #     }
                                                            # 
                                                            #     return False;
if_172_next:
if_172_end:             movl              $0, %eax
                        jmp               token_advance_if_end
                                                            # }
                                                            # 
                                                            # #ifndef _MSC_VER
                                                            # #line 2 "target_linuxassemblerx86.h"
                                                            # #endif
                                                            # 
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # // addressing modes
                                                            # enum {
token_advance_if_end:
                        leave
                        ret
                                                            #     Target_t_ix,
                                                            #     Target_t_local,
                                                            #     Target_t_local_ix,
                                                            #     Target_t_global,
                                                            #     Target_t_global_ix,
                                                            #     Target_t_indirect
                                                            # };
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # enum {
                                                            #     Target_string_table_size = 1048576        // 1 * 1024 * 1024
                                                            # };
                                                            # 
                                                            # int target_string_table_length;
                                                            # char target_string_table[Target_string_table_size];
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # char target_current_label[Str_size];
                                                            # 
                                                            # int target_label_sequence_no;
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # target_init() {
target_init:            enter             $32, $0
                                                            # 
                                                            #     target_string_table_length = 0;
                        movl              $0, %eax
                        movl              %eax, 4199468+global
                                                            #     copy(target_current_label, "");
                        lea               8393776+global, %eax
                        movl              %eax, -4(%ebp)
                        lea               1892+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              copy
                        addl              $8, %esp
                                                            #     target_label_sequence_no = 0;
                        movl              $0, %eax
                        movl              %eax, 8394800+global
                                                            # }
                                                            # 
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # target_comment_print(char comment_block[]) {
target_init_end:
                        leave
                        ret
target_comment_print:   enter             $1060, $0
                                                            #     int i;
                                                            #     char line[Str_size];
                                                            # 
                                                            #     i = 0;
                        movl              $0, %eax
                        movl              %eax, -4(%ebp)
                                                            #     copy(line, "");
                        lea               -1028(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        lea               1896+string, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              copy
                        addl              $8, %esp
                                                            # 
                                                            #     while (comment_block[i] != 0) {
while_173_test:         movl              -4(%ebp), %eax
                        movl              %eax, %ebx
                        lea               (,%ebx,4), %eax
                        movl              %eax, -1032(%ebp)
                        movl              8(%ebp), %eax
                        addl              -1032(%ebp), %eax
                        movl              %eax, %ebx
                        movl              (%ebx), %eax
                        movl              %eax, -1032(%ebp)
                        movl              $0, %eax
                        subl              -1032(%ebp), %eax
                        jne               compare_174_true
                        movl              $0, %eax
                        jmp               compare_174_false
compare_174_true:       movl              $1, %eax
compare_174_false:      cmpl              $0, %eax
                        jz                while_173_end
                                                            # 
                                                            #         if (str_equals(line, "")) {
                        lea               -1028(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        lea               1900+string, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              str_equals
                        addl              $8, %esp
                        cmpl              $0, %eax
                        jz                if_175_next
                                                            #             fill_until_col(line, 60);
                        lea               -1028(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              $60, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              fill_until_col
                        addl              $8, %esp
                                                            #             append(line, "# ");
                        lea               -1028(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        lea               1904+string, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              append
                        addl              $8, %esp
                                                            #         }
                                                            # 
                                                            #         if (comment_block[i] != '\n') {
if_175_next:
if_175_end:             movl              -4(%ebp), %eax
                        movl              %eax, %ebx
                        lea               (,%ebx,4), %eax
                        movl              %eax, -1032(%ebp)
                        movl              8(%ebp), %eax
                        addl              -1032(%ebp), %eax
                        movl              %eax, %ebx
                        movl              (%ebx), %eax
                        movl              %eax, -1032(%ebp)
                        movl              $10, %eax
                        subl              -1032(%ebp), %eax
                        jne               compare_176_true
                        movl              $0, %eax
                        jmp               compare_176_false
compare_176_true:       movl              $1, %eax
compare_176_false:      cmpl              $0, %eax
                        jz                if_177_next
                                                            #             append_char(line, comment_block[i]);
                        lea               -1028(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              -4(%ebp), %eax
                        movl              %eax, %ebx
                        lea               (,%ebx,4), %eax
                        movl              %eax, -1036(%ebp)
                        movl              8(%ebp), %eax
                        addl              -1036(%ebp), %eax
                        movl              %eax, %ebx
                        movl              (%ebx), %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              append_char
                        addl              $8, %esp
                                                            #         }
                                                            # 
                                                            #         if (comment_block[i] == '\n' || comment_block[i + 1] == 0) {
if_177_next:
if_177_end:             movl              -4(%ebp), %eax
                        movl              %eax, %ebx
                        lea               (,%ebx,4), %eax
                        movl              %eax, -1032(%ebp)
                        movl              8(%ebp), %eax
                        addl              -1032(%ebp), %eax
                        movl              %eax, %ebx
                        movl              (%ebx), %eax
                        movl              %eax, -1032(%ebp)
                        movl              $10, %eax
                        subl              -1032(%ebp), %eax
                        je                compare_178_true
                        movl              $0, %eax
                        jmp               compare_178_false
compare_178_true:       movl              $1, %eax
compare_178_false:      cmpl              $0, %eax
                        jnz               logical_or_179_true
                        movl              -4(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              $1, %eax
                        addl              -1032(%ebp), %eax
                        movl              %eax, %ebx
                        lea               (,%ebx,4), %eax
                        movl              %eax, -1032(%ebp)
                        movl              8(%ebp), %eax
                        addl              -1032(%ebp), %eax
                        movl              %eax, %ebx
                        movl              (%ebx), %eax
                        movl              %eax, -1032(%ebp)
                        movl              $0, %eax
                        subl              -1032(%ebp), %eax
                        je                compare_180_true
                        movl              $0, %eax
                        jmp               compare_180_false
compare_180_true:       movl              $1, %eax
compare_180_false:      cmpl              $0, %eax
                        jnz               logical_or_179_true
                        movl              $0, %eax
                        jmp               logical_or_179_false
logical_or_179_true:    movl              $1, %eax
logical_or_179_false:   cmpl              $0, %eax
                        jz                if_181_next
                                                            #             writeln(line);
                        lea               -1028(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              writeln
                        addl              $4, %esp
                                                            #             copy(line, "");
                        lea               -1028(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        lea               1916+string, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              copy
                        addl              $8, %esp
                                                            #         }
                                                            # 
                                                            #         i = i + 1;
if_181_next:
if_181_end:             movl              -4(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              $1, %eax
                        addl              -1032(%ebp), %eax
                        movl              %eax, -4(%ebp)
                                                            #     }
                                                            # }
                        jmp               while_173_test
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # target_instruction_print(char opcode[], char operand1[], char operand2[]) {
while_173_end:
target_comment_print_end:
                        leave
                        ret
target_instruction_print: enter           $1056, $0
                                                            #     char line[Str_size];
                                                            # 
                                                            #     copy(line, "");
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        lea               1920+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              copy
                        addl              $8, %esp
                                                            # 
                                                            #     if (! str_equals(target_current_label, "")) {
                        lea               8393776+global, %eax
                        movl              %eax, -1028(%ebp)
                        lea               1924+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              str_equals
                        addl              $8, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_182_false
                        movl              $1, %eax
                        jmp               logical_not_182_true
logical_not_182_false:  movl              $0, %eax
logical_not_182_true:   cmpl              $0, %eax
                        jz                if_183_next
                                                            #         copy(line, target_current_label);
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        lea               8393776+global, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              copy
                        addl              $8, %esp
                                                            #         append(line, ":");
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        lea               1928+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              append
                        addl              $8, %esp
                                                            # 
                                                            #         copy(target_current_label, "");
                        lea               8393776+global, %eax
                        movl              %eax, -1028(%ebp)
                        lea               1936+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              copy
                        addl              $8, %esp
                                                            #     }
                                                            # 
                                                            #     append(line, " ");
if_183_next:
if_183_end:             lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        lea               1940+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              append
                        addl              $8, %esp
                                                            #     fill_until_col(line, 24);
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        movl              $24, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              fill_until_col
                        addl              $8, %esp
                                                            # 
                                                            #     append(line, opcode);
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        movl              8(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              append
                        addl              $8, %esp
                                                            # 
                                                            #     if (str_equals(operand1, "")) {
                        movl              12(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        lea               1948+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              str_equals
                        addl              $8, %esp
                        cmpl              $0, %eax
                        jz                if_184_next
                                                            #         writeln(line);
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              writeln
                        addl              $4, %esp
                                                            #         return;
                        jmp               target_instruction_print_end
                                                            #     }
                                                            # 
                                                            #     append(line, " ");
if_184_next:
if_184_end:             lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        lea               1952+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              append
                        addl              $8, %esp
                                                            #     fill_until_col(line, 42);
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        movl              $42, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              fill_until_col
                        addl              $8, %esp
                                                            #     append(line, operand1);
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        movl              12(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              append
                        addl              $8, %esp
                                                            # 
                                                            #     if (str_equals(operand2, "")) {
                        movl              16(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        lea               1960+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              str_equals
                        addl              $8, %esp
                        cmpl              $0, %eax
                        jz                if_185_next
                                                            #         writeln(line);
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              writeln
                        addl              $4, %esp
                                                            #         return;
                        jmp               target_instruction_print_end
                                                            #     }
                                                            # 
                                                            #     append(line, ", ");
if_185_next:
if_185_end:             lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        lea               1964+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              append
                        addl              $8, %esp
                                                            #     append(line, operand2);
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        movl              16(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              append
                        addl              $8, %esp
                                                            #     writeln(line);
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              writeln
                        addl              $4, %esp
                                                            # }
                                                            # // ---------------------------------------------------------------------------
                                                            # target_instruction_no_operand(char opcode[]) {
target_instruction_print_end:
                        leave
                        ret
target_instruction_no_operand: enter      $32, $0
                                                            #     
                                                            #     target_instruction_print(opcode, "", "");
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        lea               1976+string, %eax
                        movl              %eax, -8(%ebp)
                        lea               1980+string, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_print
                        addl              $12, %esp
                                                            # }
                                                            # 
                                                            # target_instruction_one_operand(char opcode[], char operand1[]) {
target_instruction_no_operand_end:
                        leave
                        ret
target_instruction_one_operand: enter     $32, $0
                                                            # 
                                                            #     target_instruction_print(opcode, operand1, "");
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        movl              12(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        lea               1984+string, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_print
                        addl              $12, %esp
                                                            # }
                                                            # 
                                                            # target_instruction_two_operands(char opcode[], char operand1[], char operand2[]) {
target_instruction_one_operand_end:
                        leave
                        ret
target_instruction_two_operands: enter    $32, $0
                                                            # 
                                                            #     target_instruction_print(opcode, operand1, operand2);
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        movl              12(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              16(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_print
                        addl              $12, %esp
                                                            # }
                                                            # 
                                                            # target_instruction_branch(char opcode[], char label[], char label_postfix[]) {
target_instruction_two_operands_end:
                        leave
                        ret
target_instruction_branch: enter          $1056, $0
                                                            #     char location_field[Str_size];
                                                            # 
                                                            #     copy(location_field, label);
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        movl              12(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              copy
                        addl              $8, %esp
                                                            #     append(location_field, label_postfix);
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        movl              16(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              append
                        addl              $8, %esp
                                                            # 
                                                            #     target_instruction_one_operand(opcode, location_field);
                        movl              8(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_one_operand
                        addl              $8, %esp
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # generate_address(char address_out[], int address, int address_mode) {
target_instruction_branch_end:
                        leave
                        ret
generate_address:       enter             $32, $0
                                                            # 
                                                            #     if (address_mode == Target_t_global || address_mode == Target_t_global_ix) {
                        movl              16(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        movl              $3, %eax
                        subl              -4(%ebp), %eax
                        je                compare_186_true
                        movl              $0, %eax
                        jmp               compare_186_false
compare_186_true:       movl              $1, %eax
compare_186_false:      cmpl              $0, %eax
                        jnz               logical_or_187_true
                        movl              16(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        movl              $4, %eax
                        subl              -4(%ebp), %eax
                        je                compare_188_true
                        movl              $0, %eax
                        jmp               compare_188_false
compare_188_true:       movl              $1, %eax
compare_188_false:      cmpl              $0, %eax
                        jnz               logical_or_187_true
                        movl              $0, %eax
                        jmp               logical_or_187_false
logical_or_187_true:    movl              $1, %eax
logical_or_187_false:   cmpl              $0, %eax
                        jz                if_189_next
                                                            #         if (address <= 0) {
                        movl              12(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        movl              $0, %eax
                        subl              -4(%ebp), %eax
                        jg                compare_190_true
                        je                compare_190_true
                        movl              $0, %eax
                        jmp               compare_190_false
compare_190_true:       movl              $1, %eax
compare_190_false:      cmpl              $0, %eax
                        jz                if_191_next
                                                            #             int_to_str(-address, address_out);
                        movl              12(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        movl              $0, %eax
                        subl              -4(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              int_to_str
                        addl              $8, %esp
                                                            #             append(address_out, "+global");
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        lea               1988+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              append
                        addl              $8, %esp
                                                            #         } else {
                        jmp               if_191_end
                                                            #             int_to_str(address, address_out);
if_191_next:            movl              12(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              int_to_str
                        addl              $8, %esp
                                                            #             append(address_out, "+string");
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        lea               2020+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              append
                        addl              $8, %esp
                                                            #         }
                                                            # 
                                                            #         if (address_mode == Target_t_global_ix) {
if_191_end:             movl              16(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        movl              $4, %eax
                        subl              -4(%ebp), %eax
                        je                compare_192_true
                        movl              $0, %eax
                        jmp               compare_192_false
compare_192_true:       movl              $1, %eax
compare_192_false:      cmpl              $0, %eax
                        jz                if_193_next
                                                            #             append(address_out, "(,%ebx,4)");
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        lea               2052+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              append
                        addl              $8, %esp
                                                            #         }
                                                            # 
                                                            #     } else if (address_mode == Target_t_local) {
if_193_next:
if_193_end:             jmp               if_189_end
if_189_next:            movl              16(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        movl              $1, %eax
                        subl              -4(%ebp), %eax
                        je                compare_194_true
                        movl              $0, %eax
                        jmp               compare_194_false
compare_194_true:       movl              $1, %eax
compare_194_false:      cmpl              $0, %eax
                        jz                if_195_next
                                                            #         int_to_str(address, address_out);
                        movl              12(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              int_to_str
                        addl              $8, %esp
                                                            #         append(address_out, "(%ebp)");
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        lea               2092+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              append
                        addl              $8, %esp
                                                            # 
                                                            #     } else if (address_mode == Target_t_local_ix) {
                        jmp               if_195_end
if_195_next:            movl              16(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        movl              $2, %eax
                        subl              -4(%ebp), %eax
                        je                compare_196_true
                        movl              $0, %eax
                        jmp               compare_196_false
compare_196_true:       movl              $1, %eax
compare_196_false:      cmpl              $0, %eax
                        jz                if_197_next
                                                            #         int_to_str(address, address_out);
                        movl              12(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              int_to_str
                        addl              $8, %esp
                                                            #         append(address_out, "(%ebp,%ebx,4)");
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        lea               2120+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              append
                        addl              $8, %esp
                                                            # 
                                                            #     } else if (address_mode == Target_t_ix) {
                        jmp               if_197_end
if_197_next:            movl              16(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        movl              $0, %eax
                        subl              -4(%ebp), %eax
                        je                compare_198_true
                        movl              $0, %eax
                        jmp               compare_198_false
compare_198_true:       movl              $1, %eax
compare_198_false:      cmpl              $0, %eax
                        jz                if_199_next
                                                            #         copy(address_out, "(,%ebx,4)");
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        lea               2176+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              copy
                        addl              $8, %esp
                                                            # 
                                                            #     } else if (address_mode == Target_t_indirect) {
                        jmp               if_199_end
if_199_next:            movl              16(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        movl              $5, %eax
                        subl              -4(%ebp), %eax
                        je                compare_200_true
                        movl              $0, %eax
                        jmp               compare_200_false
compare_200_true:       movl              $1, %eax
compare_200_false:      cmpl              $0, %eax
                        jz                if_201_next
                                                            #         copy(address_out, "(%ebx)");
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        lea               2216+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              copy
                        addl              $8, %esp
                                                            # 
                                                            #     } else {
                        jmp               if_201_end
                                                            #         error_internal();
if_201_next:            call              error_internal
                                                            #     }
                                                            # }
if_201_end:
if_199_end:
if_197_end:
if_195_end:
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # target_op_branch(char label[], char postfix[]) {
if_189_end:
generate_address_end:
                        leave
                        ret
target_op_branch:       enter             $32, $0
                                                            #     target_instruction_branch("jmp", label, postfix);
                        lea               2244+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              12(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_branch
                        addl              $12, %esp
                                                            # }
                                                            # 
                                                            # target_op_branch_back(char label[], char postfix[]) {
target_op_branch_end:
                        leave
                        ret
target_op_branch_back:  enter             $32, $0
                                                            #     target_instruction_branch("jmp", label, postfix);
                        lea               2260+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              12(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_branch
                        addl              $12, %esp
                                                            # }
                                                            # 
                                                            # target_op_branch_if_less(char label[], char postfix[]) {
target_op_branch_back_end:
                        leave
                        ret
target_op_branch_if_less: enter           $32, $0
                                                            #     target_instruction_branch("jg", label, postfix);
                        lea               2276+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              12(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_branch
                        addl              $12, %esp
                                                            # }
                                                            # 
                                                            # target_op_branch_if_greater(char label[], char postfix[]) {
target_op_branch_if_less_end:
                        leave
                        ret
target_op_branch_if_greater: enter        $32, $0
                                                            #     target_instruction_branch("jl", label, postfix);
                        lea               2288+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              12(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_branch
                        addl              $12, %esp
                                                            # }
                                                            # 
                                                            # target_op_branch_if_equals(char label[], char postfix[]) {
target_op_branch_if_greater_end:
                        leave
                        ret
target_op_branch_if_equals: enter         $32, $0
                                                            #     target_instruction_branch("je", label, postfix);
                        lea               2300+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              12(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_branch
                        addl              $12, %esp
                                                            # }
                                                            # 
                                                            # target_op_branch_if_not_equals(char label[], char postfix[]) {
target_op_branch_if_equals_end:
                        leave
                        ret
target_op_branch_if_not_equals: enter     $32, $0
                                                            #     target_instruction_branch("jne", label, postfix);
                        lea               2312+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              12(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_branch
                        addl              $12, %esp
                                                            # }
                                                            # 
                                                            # target_op_branch_if_true(char label[], char postfix[]) {
target_op_branch_if_not_equals_end:
                        leave
                        ret
target_op_branch_if_true: enter           $32, $0
                                                            #     target_instruction_branch("jnz", label, postfix);
                        lea               2328+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              12(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_branch
                        addl              $12, %esp
                                                            # }
                                                            # 
                                                            # target_op_branch_if_false(char label[], char postfix[]) {
target_op_branch_if_true_end:
                        leave
                        ret
target_op_branch_if_false: enter          $32, $0
                                                            #     target_instruction_branch("jz", label, postfix);
                        lea               2344+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              12(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_branch
                        addl              $12, %esp
                                                            # 
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # target_op_loadx() {
target_op_branch_if_false_end:
                        leave
                        ret
target_op_loadx:        enter             $32, $0
                                                            #     target_instruction_two_operands("movl", "%eax", "%ebx");
                        lea               2356+string, %eax
                        movl              %eax, -4(%ebp)
                        lea               2376+string, %eax
                        movl              %eax, -8(%ebp)
                        lea               2396+string, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_two_operands
                        addl              $12, %esp
                                                            # }
                                                            # 
                                                            # target_op_load_constant(int constant) {
target_op_loadx_end:
                        leave
                        ret
target_op_load_constant: enter            $2080, $0
                                                            #     char constant_str[Str_size];
                                                            #     char constant_field[Str_size];
                                                            # 
                                                            #     int_to_str(constant, constant_str);
                        movl              8(%ebp), %eax
                        movl              %eax, -2052(%ebp)
                        lea               -1024(%ebp), %eax
                        movl              %eax, -2056(%ebp)
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        movl              -2052(%ebp), %eax
                        pushl             %eax
                        call              int_to_str
                        addl              $8, %esp
                                                            #     copy(constant_field, "$");
                        lea               -2048(%ebp), %eax
                        movl              %eax, -2052(%ebp)
                        lea               2416+string, %eax
                        movl              %eax, -2056(%ebp)
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        movl              -2052(%ebp), %eax
                        pushl             %eax
                        call              copy
                        addl              $8, %esp
                                                            #     append(constant_field, constant_str);
                        lea               -2048(%ebp), %eax
                        movl              %eax, -2052(%ebp)
                        lea               -1024(%ebp), %eax
                        movl              %eax, -2056(%ebp)
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        movl              -2052(%ebp), %eax
                        pushl             %eax
                        call              append
                        addl              $8, %esp
                                                            # 
                                                            #     target_instruction_two_operands("movl", constant_field, "%eax");
                        lea               2424+string, %eax
                        movl              %eax, -2052(%ebp)
                        lea               -2048(%ebp), %eax
                        movl              %eax, -2056(%ebp)
                        lea               2444+string, %eax
                        movl              %eax, -2060(%ebp)
                        movl              -2060(%ebp), %eax
                        pushl             %eax
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        movl              -2052(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_two_operands
                        addl              $12, %esp
                                                            # }
                                                            # 
                                                            # target_op_load_address(int address, int address_mode_type) {
target_op_load_constant_end:
                        leave
                        ret
target_op_load_address: enter             $1056, $0
                                                            #     char address_str[Str_size];
                                                            # 
                                                            #     generate_address(address_str, address, address_mode_type);
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        movl              8(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              12(%ebp), %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              generate_address
                        addl              $12, %esp
                                                            #     target_instruction_two_operands("lea", address_str, "%eax");
                        lea               2464+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        lea               2480+string, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_two_operands
                        addl              $12, %esp
                                                            # }
                                                            # 
                                                            # target_op_load(int address, int address_mode_type) {
target_op_load_address_end:
                        leave
                        ret
target_op_load:         enter             $1056, $0
                                                            #     char address_str[Str_size];
                                                            # 
                                                            #     generate_address(address_str, address, address_mode_type);
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        movl              8(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              12(%ebp), %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              generate_address
                        addl              $12, %esp
                                                            #     target_instruction_two_operands("movl", address_str, "%eax");
                        lea               2500+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        lea               2520+string, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_two_operands
                        addl              $12, %esp
                                                            # }
                                                            # 
                                                            # target_op_store(int address, int address_mode_type) {
target_op_load_end:
                        leave
                        ret
target_op_store:        enter             $1056, $0
                                                            #     char address_str[Str_size];
                                                            # 
                                                            #     generate_address(address_str, address, address_mode_type);
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        movl              8(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              12(%ebp), %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              generate_address
                        addl              $12, %esp
                                                            #     target_instruction_two_operands("movl", "%eax", address_str);
                        lea               2540+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               2560+string, %eax
                        movl              %eax, -1032(%ebp)
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_two_operands
                        addl              $12, %esp
                                                            # }
                                                            # 
                                                            # target_op_add(int address, int address_mode_type) {
target_op_store_end:
                        leave
                        ret
target_op_add:          enter             $1056, $0
                                                            #     char address_str[Str_size];
                                                            # 
                                                            #     generate_address(address_str, address, address_mode_type);
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        movl              8(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              12(%ebp), %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              generate_address
                        addl              $12, %esp
                                                            #     target_instruction_two_operands("addl", address_str, "%eax");
                        lea               2580+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        lea               2600+string, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_two_operands
                        addl              $12, %esp
                                                            # }
                                                            # 
                                                            # target_op_subtract(int address, int address_mode_type) {
target_op_add_end:
                        leave
                        ret
target_op_subtract:     enter             $1056, $0
                                                            #     char address_str[Str_size];
                                                            # 
                                                            #     generate_address(address_str, address, address_mode_type);
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        movl              8(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              12(%ebp), %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              generate_address
                        addl              $12, %esp
                                                            #     target_instruction_two_operands("subl", address_str, "%eax");
                        lea               2620+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        lea               2640+string, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_two_operands
                        addl              $12, %esp
                                                            # }
                                                            # 
                                                            # target_op_multiply (int address, int address_mode_type) {
target_op_subtract_end:
                        leave
                        ret
target_op_multiply:     enter             $1056, $0
                                                            #     char address_str[Str_size];
                                                            # 
                                                            #     generate_address(address_str, address, address_mode_type);
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        movl              8(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              12(%ebp), %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              generate_address
                        addl              $12, %esp
                                                            #     target_instruction_one_operand("imull", address_str);
                        lea               2660+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_one_operand
                        addl              $8, %esp
                                                            # }
                                                            # 
                                                            # target_op_divide(int address, int address_mode_type) {
target_op_multiply_end:
                        leave
                        ret
target_op_divide:       enter             $1056, $0
                                                            #     char address_str[Str_size];
                                                            # 
                                                            #     generate_address(address_str, address, address_mode_type);
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        movl              8(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              12(%ebp), %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              generate_address
                        addl              $12, %esp
                                                            #     target_instruction_no_operand("cdq");
                        lea               2684+string, %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_no_operand
                        addl              $4, %esp
                                                            #     target_instruction_one_operand("idivl", address_str);
                        lea               2700+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_one_operand
                        addl              $8, %esp
                                                            # }
                                                            # 
                                                            # target_op_test() {
target_op_divide_end:
                        leave
                        ret
target_op_test:         enter             $32, $0
                                                            #     target_instruction_two_operands("cmpl", "$0", "%eax");
                        lea               2724+string, %eax
                        movl              %eax, -4(%ebp)
                        lea               2744+string, %eax
                        movl              %eax, -8(%ebp)
                        lea               2756+string, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_two_operands
                        addl              $12, %esp
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # target_op_subroutine_begin(char function_name[], int argument_count, int local_frame_size) {
target_op_test_end:
                        leave
                        ret
target_op_subroutine_begin: enter         $2080, $0
                                                            #     char local_frame_size_str[Str_size];
                                                            #     char local_frame_size_field[Str_size];
                                                            # 
                                                            #     target_emit_label(function_name, "");
                        movl              8(%ebp), %eax
                        movl              %eax, -2052(%ebp)
                        lea               2776+string, %eax
                        movl              %eax, -2056(%ebp)
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        movl              -2052(%ebp), %eax
                        pushl             %eax
                        call              target_emit_label
                        addl              $8, %esp
                                                            # 
                                                            #     int_to_str(local_frame_size * 4, local_frame_size_str);
                        movl              16(%ebp), %eax
                        movl              %eax, -2052(%ebp)
                        movl              $4, %eax
                        imull             -2052(%ebp)
                        movl              %eax, -2052(%ebp)
                        lea               -1024(%ebp), %eax
                        movl              %eax, -2056(%ebp)
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        movl              -2052(%ebp), %eax
                        pushl             %eax
                        call              int_to_str
                        addl              $8, %esp
                                                            #     copy(local_frame_size_field, "$");
                        lea               -2048(%ebp), %eax
                        movl              %eax, -2052(%ebp)
                        lea               2780+string, %eax
                        movl              %eax, -2056(%ebp)
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        movl              -2052(%ebp), %eax
                        pushl             %eax
                        call              copy
                        addl              $8, %esp
                                                            #     append(local_frame_size_field, local_frame_size_str);
                        lea               -2048(%ebp), %eax
                        movl              %eax, -2052(%ebp)
                        lea               -1024(%ebp), %eax
                        movl              %eax, -2056(%ebp)
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        movl              -2052(%ebp), %eax
                        pushl             %eax
                        call              append
                        addl              $8, %esp
                                                            #     target_instruction_two_operands("enter", local_frame_size_field, "$0");
                        lea               2788+string, %eax
                        movl              %eax, -2052(%ebp)
                        lea               -2048(%ebp), %eax
                        movl              %eax, -2056(%ebp)
                        lea               2812+string, %eax
                        movl              %eax, -2060(%ebp)
                        movl              -2060(%ebp), %eax
                        pushl             %eax
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        movl              -2052(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_two_operands
                        addl              $12, %esp
                                                            # }
                                                            # 
                                                            # target_op_subroutine_end(char function_name[], int argument_count, int local_frame_size) {
target_op_subroutine_begin_end:
                        leave
                        ret
target_op_subroutine_end: enter           $32, $0
                                                            # 
                                                            #     target_emit_label("", "");
                        lea               2824+string, %eax
                        movl              %eax, -4(%ebp)
                        lea               2828+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_emit_label
                        addl              $8, %esp
                                                            #     target_instruction_no_operand("leave");
                        lea               2832+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_no_operand
                        addl              $4, %esp
                                                            #     target_instruction_no_operand("ret");
                        lea               2856+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_no_operand
                        addl              $4, %esp
                                                            # }
                                                            # 
                                                            # target_op_call_subroutine(char function_name[], int argument_count, int local_frame_size) {
target_op_subroutine_end_end:
                        leave
                        ret
target_op_call_subroutine: enter          $2080, $0
                                                            #     char argument_size_str[Str_size];
                                                            #     char argument_size_field[Str_size];
                                                            # 
                                                            #     target_instruction_one_operand("call", function_name);
                        lea               2872+string, %eax
                        movl              %eax, -2052(%ebp)
                        movl              8(%ebp), %eax
                        movl              %eax, -2056(%ebp)
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        movl              -2052(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_one_operand
                        addl              $8, %esp
                                                            # 
                                                            #     if (argument_count < 1) {
                        movl              12(%ebp), %eax
                        movl              %eax, -2052(%ebp)
                        movl              $1, %eax
                        subl              -2052(%ebp), %eax
                        jg                compare_202_true
                        movl              $0, %eax
                        jmp               compare_202_false
compare_202_true:       movl              $1, %eax
compare_202_false:      cmpl              $0, %eax
                        jz                if_203_next
                                                            #         return;
                        jmp               target_op_call_subroutine_end
                                                            #     }
                                                            # 
                                                            #     int_to_str(argument_count * 4, argument_size_str);
if_203_next:
if_203_end:             movl              12(%ebp), %eax
                        movl              %eax, -2052(%ebp)
                        movl              $4, %eax
                        imull             -2052(%ebp)
                        movl              %eax, -2052(%ebp)
                        lea               -1024(%ebp), %eax
                        movl              %eax, -2056(%ebp)
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        movl              -2052(%ebp), %eax
                        pushl             %eax
                        call              int_to_str
                        addl              $8, %esp
                                                            #     copy(argument_size_field, "$");
                        lea               -2048(%ebp), %eax
                        movl              %eax, -2052(%ebp)
                        lea               2892+string, %eax
                        movl              %eax, -2056(%ebp)
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        movl              -2052(%ebp), %eax
                        pushl             %eax
                        call              copy
                        addl              $8, %esp
                                                            #     append(argument_size_field, argument_size_str);
                        lea               -2048(%ebp), %eax
                        movl              %eax, -2052(%ebp)
                        lea               -1024(%ebp), %eax
                        movl              %eax, -2056(%ebp)
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        movl              -2052(%ebp), %eax
                        pushl             %eax
                        call              append
                        addl              $8, %esp
                                                            # 
                                                            #     target_instruction_two_operands("addl", argument_size_field, "%esp");
                        lea               2900+string, %eax
                        movl              %eax, -2052(%ebp)
                        lea               -2048(%ebp), %eax
                        movl              %eax, -2056(%ebp)
                        lea               2920+string, %eax
                        movl              %eax, -2060(%ebp)
                        movl              -2060(%ebp), %eax
                        pushl             %eax
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        movl              -2052(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_two_operands
                        addl              $12, %esp
                                                            # }
                                                            # 
                                                            # target_op_pass_argument(int argument_no, int argument_count, int local_frame_size) {
target_op_call_subroutine_end:
                        leave
                        ret
target_op_pass_argument: enter            $32, $0
                                                            # 
                                                            #     target_instruction_one_operand("pushl", "%eax");
                        lea               2940+string, %eax
                        movl              %eax, -4(%ebp)
                        lea               2964+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_one_operand
                        addl              $8, %esp
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # target_emit_label(char label[], char label_postfix[]) {
target_op_pass_argument_end:
                        leave
                        ret
target_emit_label:      enter             $32, $0
                                                            # 
                                                            #     if (! str_equals(target_current_label, "")) {
                        lea               8393776+global, %eax
                        movl              %eax, -4(%ebp)
                        lea               2984+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              str_equals
                        addl              $8, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_204_false
                        movl              $1, %eax
                        jmp               logical_not_204_true
logical_not_204_false:  movl              $0, %eax
logical_not_204_true:   cmpl              $0, %eax
                        jz                if_205_next
                                                            #         write(target_current_label);
                        lea               8393776+global, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              write
                        addl              $4, %esp
                                                            #         writeln(":");
                        lea               2988+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              writeln
                        addl              $4, %esp
                                                            #     }
                                                            # 
                                                            #     copy(target_current_label, label);
if_205_next:
if_205_end:             lea               8393776+global, %eax
                        movl              %eax, -4(%ebp)
                        movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              copy
                        addl              $8, %esp
                                                            #     append(target_current_label, label_postfix);
                        lea               8393776+global, %eax
                        movl              %eax, -4(%ebp)
                        movl              12(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              append
                        addl              $8, %esp
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # target_begin_branch_block(char label[], char label_postfix[]) {
target_emit_label_end:
                        leave
                        ret
target_begin_branch_block: enter          $32, $0
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # target_end_branch_block(char label[], char label_postfix[]) {
target_begin_branch_block_end:
                        leave
                        ret
target_end_branch_block: enter            $32, $0
                                                            #     target_emit_label(label, label_postfix);
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        movl              12(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_emit_label
                        addl              $8, %esp
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # target_begin_back_branch_block(char label[], char label_postfix[]) {
target_end_branch_block_end:
                        leave
                        ret
target_begin_back_branch_block: enter     $32, $0
                                                            #     target_emit_label(label, label_postfix);
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        movl              12(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_emit_label
                        addl              $8, %esp
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # target_end_back_branch_block(char label[], char label_postfix[]) {
target_begin_back_branch_block_end:
                        leave
                        ret
target_end_back_branch_block: enter       $32, $0
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # target_built_in_function_debug() {
target_end_back_branch_block_end:
                        leave
                        ret
target_built_in_function_debug: enter     $1056, $0
                                                            #     char label[Str_size];
                                                            # 
                                                            #     target_instruction_two_operands("movl", "%eax", "%ecx");
                        lea               2996+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               3016+string, %eax
                        movl              %eax, -1032(%ebp)
                        lea               3036+string, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_two_operands
                        addl              $12, %esp
                                                            # 
                                                            #     target_get_label("debug_neg_if", label);
                        lea               3056+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_get_label
                        addl              $8, %esp
                                                            #     target_instruction_two_operands("cmpl", "$0", "%eax");
                        lea               3108+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               3128+string, %eax
                        movl              %eax, -1032(%ebp)
                        lea               3140+string, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_two_operands
                        addl              $12, %esp
                                                            #     target_instruction_branch("jge", label, "_end");
                        lea               3160+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        lea               3176+string, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_branch
                        addl              $12, %esp
                                                            #     target_instruction_one_operand("neg", "%eax");
                        lea               3196+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               3212+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_one_operand
                        addl              $8, %esp
                                                            #     target_emit_label(label, "_end");
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        lea               3232+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_emit_label
                        addl              $8, %esp
                                                            # 
                                                            #     target_instruction_one_operand("pushl", "$'\\n");
                        lea               3252+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               3276+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_one_operand
                        addl              $8, %esp
                                                            # 
                                                            #     target_get_label("debug_to_str", label);
                        lea               3296+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_get_label
                        addl              $8, %esp
                                                            #     target_instruction_two_operands("movl", "$1", "%esi");
                        lea               3348+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               3368+string, %eax
                        movl              %eax, -1032(%ebp)
                        lea               3380+string, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_two_operands
                        addl              $12, %esp
                                                            #     target_emit_label(label, "_begin");
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        lea               3400+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_emit_label
                        addl              $8, %esp
                                                            #     target_instruction_two_operands("movl", "$0", "%edx");
                        lea               3428+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               3448+string, %eax
                        movl              %eax, -1032(%ebp)
                        lea               3460+string, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_two_operands
                        addl              $12, %esp
                                                            #     target_instruction_two_operands("movl", "$10", "%ebx");
                        lea               3480+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               3500+string, %eax
                        movl              %eax, -1032(%ebp)
                        lea               3516+string, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_two_operands
                        addl              $12, %esp
                                                            #     target_instruction_one_operand("divl", "%ebx");
                        lea               3536+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               3556+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_one_operand
                        addl              $8, %esp
                                                            #     target_instruction_two_operands("addl", "$48", "%edx");
                        lea               3576+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               3596+string, %eax
                        movl              %eax, -1032(%ebp)
                        lea               3612+string, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_two_operands
                        addl              $12, %esp
                                                            #     target_instruction_one_operand("pushl", "%edx");
                        lea               3632+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               3656+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_one_operand
                        addl              $8, %esp
                                                            #     target_instruction_one_operand("incl", "%esi");
                        lea               3676+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               3696+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_one_operand
                        addl              $8, %esp
                                                            #     target_instruction_two_operands("cmpl", "$0", "%eax");
                        lea               3716+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               3736+string, %eax
                        movl              %eax, -1032(%ebp)
                        lea               3748+string, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_two_operands
                        addl              $12, %esp
                                                            #     target_instruction_branch("jz", label, "_end");
                        lea               3768+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        lea               3780+string, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_branch
                        addl              $12, %esp
                                                            #     target_instruction_branch("jmp", label, "_begin");
                        lea               3800+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        lea               3816+string, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_branch
                        addl              $12, %esp
                                                            #     target_emit_label(label, "_end");
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        lea               3844+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_emit_label
                        addl              $8, %esp
                                                            # 
                                                            #     target_get_label("debug_sign_if", label);
                        lea               3864+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_get_label
                        addl              $8, %esp
                                                            #     target_instruction_two_operands("cmpl", "$0", "%ecx");
                        lea               3920+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               3940+string, %eax
                        movl              %eax, -1032(%ebp)
                        lea               3952+string, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_two_operands
                        addl              $12, %esp
                                                            #     target_instruction_branch("jge", label, "_end");
                        lea               3972+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        lea               3988+string, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_branch
                        addl              $12, %esp
                                                            #     target_instruction_one_operand("pushl", "$'-");
                        lea               4008+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               4032+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_one_operand
                        addl              $8, %esp
                                                            #     target_instruction_one_operand("incl", "%esi");
                        lea               4048+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               4068+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_one_operand
                        addl              $8, %esp
                                                            #     target_emit_label(label, "_end");
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        lea               4088+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_emit_label
                        addl              $8, %esp
                                                            #     
                                                            #     target_get_label("debug_print", label);
                        lea               4108+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_get_label
                        addl              $8, %esp
                                                            #     target_emit_label(label, "_begin");
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        lea               4156+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_emit_label
                        addl              $8, %esp
                                                            #     target_instruction_two_operands("cmpl", "$0", "%esi");
                        lea               4184+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               4204+string, %eax
                        movl              %eax, -1032(%ebp)
                        lea               4216+string, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_two_operands
                        addl              $12, %esp
                                                            #     target_instruction_branch("jz", label, "_end");
                        lea               4236+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        lea               4248+string, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_branch
                        addl              $12, %esp
                                                            #     target_instruction_one_operand("decl", "%esi");
                        lea               4268+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               4288+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_one_operand
                        addl              $8, %esp
                                                            #     target_instruction_two_operands("movl", "$4", "%eax");
                        lea               4308+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               4328+string, %eax
                        movl              %eax, -1032(%ebp)
                        lea               4340+string, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_two_operands
                        addl              $12, %esp
                                                            #     target_instruction_two_operands("movl", "%esp", "%ecx");
                        lea               4360+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               4380+string, %eax
                        movl              %eax, -1032(%ebp)
                        lea               4400+string, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_two_operands
                        addl              $12, %esp
                                                            #     target_instruction_two_operands("movl", "$1", "%ebx");
                        lea               4420+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               4440+string, %eax
                        movl              %eax, -1032(%ebp)
                        lea               4452+string, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_two_operands
                        addl              $12, %esp
                                                            #     target_instruction_two_operands("movl", "$1", "%edx");
                        lea               4472+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               4492+string, %eax
                        movl              %eax, -1032(%ebp)
                        lea               4504+string, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_two_operands
                        addl              $12, %esp
                                                            #     target_instruction_one_operand("int", "$0x80");
                        lea               4524+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               4540+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_one_operand
                        addl              $8, %esp
                                                            #     target_instruction_two_operands("addl", "$4", "%esp");
                        lea               4564+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               4584+string, %eax
                        movl              %eax, -1032(%ebp)
                        lea               4596+string, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_two_operands
                        addl              $12, %esp
                                                            #     target_instruction_branch("jmp", label, "_begin");
                        lea               4616+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        lea               4632+string, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_branch
                        addl              $12, %esp
                                                            #     target_emit_label(label, "_end");
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        lea               4660+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_emit_label
                        addl              $8, %esp
                                                            # }
                                                            # 
                                                            # target_built_in_function_exit() {
target_built_in_function_debug_end:
                        leave
                        ret
target_built_in_function_exit: enter      $32, $0
                                                            # 
                                                            #     target_instruction_two_operands("movl", "%eax", "%ebx");
                        lea               4680+string, %eax
                        movl              %eax, -4(%ebp)
                        lea               4700+string, %eax
                        movl              %eax, -8(%ebp)
                        lea               4720+string, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_two_operands
                        addl              $12, %esp
                                                            #     target_instruction_two_operands("movl", "$1", "%eax");
                        lea               4740+string, %eax
                        movl              %eax, -4(%ebp)
                        lea               4760+string, %eax
                        movl              %eax, -8(%ebp)
                        lea               4772+string, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_two_operands
                        addl              $12, %esp
                                                            #     target_instruction_one_operand("int", "$0x80");
                        lea               4792+string, %eax
                        movl              %eax, -4(%ebp)
                        lea               4808+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_one_operand
                        addl              $8, %esp
                                                            # }
                                                            # 
                                                            # target_built_in_function_fgetc() {
target_built_in_function_exit_end:
                        leave
                        ret
target_built_in_function_fgetc: enter     $1056, $0
                                                            #     char label[Str_size];
                                                            # 
                                                            #     target_get_label("fgetc_if", label);
                        lea               4832+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_get_label
                        addl              $8, %esp
                                                            #     target_instruction_two_operands("subl", "$4", "%esp");
                        lea               4868+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               4888+string, %eax
                        movl              %eax, -1032(%ebp)
                        lea               4900+string, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_two_operands
                        addl              $12, %esp
                                                            #     target_instruction_two_operands("movl", "$3", "%eax");
                        lea               4920+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               4940+string, %eax
                        movl              %eax, -1032(%ebp)
                        lea               4952+string, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_two_operands
                        addl              $12, %esp
                                                            #     target_instruction_two_operands("movl", "$0", "%ebx");
                        lea               4972+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               4992+string, %eax
                        movl              %eax, -1032(%ebp)
                        lea               5004+string, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_two_operands
                        addl              $12, %esp
                                                            #     target_instruction_two_operands("movl", "%esp", "%ecx");
                        lea               5024+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               5044+string, %eax
                        movl              %eax, -1032(%ebp)
                        lea               5064+string, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_two_operands
                        addl              $12, %esp
                                                            #     target_instruction_two_operands("movl", "$1", "%edx");
                        lea               5084+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               5104+string, %eax
                        movl              %eax, -1032(%ebp)
                        lea               5116+string, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_two_operands
                        addl              $12, %esp
                                                            #     target_instruction_one_operand("int", "$0x80");
                        lea               5136+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               5152+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_one_operand
                        addl              $8, %esp
                                                            #     target_instruction_two_operands("cmpl", "$1", "%eax");
                        lea               5176+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               5196+string, %eax
                        movl              %eax, -1032(%ebp)
                        lea               5208+string, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_two_operands
                        addl              $12, %esp
                                                            #     target_instruction_branch("jne", label, "_else");
                        lea               5228+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        lea               5244+string, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_branch
                        addl              $12, %esp
                                                            #     target_instruction_one_operand("popl", "%eax");
                        lea               5268+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               5288+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_one_operand
                        addl              $8, %esp
                                                            #     target_instruction_two_operands("andl", "$0xff", "%eax");
                        lea               5308+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               5328+string, %eax
                        movl              %eax, -1032(%ebp)
                        lea               5352+string, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_two_operands
                        addl              $12, %esp
                                                            #     target_instruction_branch("jmp", label, "_end");
                        lea               5372+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        lea               5388+string, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_branch
                        addl              $12, %esp
                                                            #     target_emit_label(label, "_else");
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        lea               5408+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_emit_label
                        addl              $8, %esp
                                                            #     target_instruction_two_operands("addl", "$4", "%esp");
                        lea               5432+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               5452+string, %eax
                        movl              %eax, -1032(%ebp)
                        lea               5464+string, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_two_operands
                        addl              $12, %esp
                                                            #     target_instruction_two_operands("movl", "$-1", "%eax");
                        lea               5484+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               5504+string, %eax
                        movl              %eax, -1032(%ebp)
                        lea               5520+string, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_two_operands
                        addl              $12, %esp
                                                            #     target_emit_label(label, "_end");
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        lea               5540+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_emit_label
                        addl              $8, %esp
                                                            # }
                                                            # 
                                                            # target_built_in_function_fputc_stdout() {
target_built_in_function_fgetc_end:
                        leave
                        ret
target_built_in_function_fputc_stdout: enter $32, $0
                                                            #     target_instruction_one_operand("pushl", "%eax");
                        lea               5560+string, %eax
                        movl              %eax, -4(%ebp)
                        lea               5584+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_one_operand
                        addl              $8, %esp
                                                            #     target_instruction_two_operands("movl", "$4", "%eax");
                        lea               5604+string, %eax
                        movl              %eax, -4(%ebp)
                        lea               5624+string, %eax
                        movl              %eax, -8(%ebp)
                        lea               5636+string, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_two_operands
                        addl              $12, %esp
                                                            #     target_instruction_two_operands("movl", "$1", "%ebx");
                        lea               5656+string, %eax
                        movl              %eax, -4(%ebp)
                        lea               5676+string, %eax
                        movl              %eax, -8(%ebp)
                        lea               5688+string, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_two_operands
                        addl              $12, %esp
                                                            #     target_instruction_two_operands("movl", "%esp", "%ecx");
                        lea               5708+string, %eax
                        movl              %eax, -4(%ebp)
                        lea               5728+string, %eax
                        movl              %eax, -8(%ebp)
                        lea               5748+string, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_two_operands
                        addl              $12, %esp
                                                            #     target_instruction_two_operands("movl", "$1", "%edx");
                        lea               5768+string, %eax
                        movl              %eax, -4(%ebp)
                        lea               5788+string, %eax
                        movl              %eax, -8(%ebp)
                        lea               5800+string, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_two_operands
                        addl              $12, %esp
                                                            #     target_instruction_one_operand("int", "$0x80");
                        lea               5820+string, %eax
                        movl              %eax, -4(%ebp)
                        lea               5836+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_one_operand
                        addl              $8, %esp
                                                            #     target_instruction_two_operands("addl", "$4", "%esp");
                        lea               5860+string, %eax
                        movl              %eax, -4(%ebp)
                        lea               5880+string, %eax
                        movl              %eax, -8(%ebp)
                        lea               5892+string, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_two_operands
                        addl              $12, %esp
                                                            # }
                                                            # 
                                                            # target_built_in_function_fputc_stderr() {
target_built_in_function_fputc_stdout_end:
                        leave
                        ret
target_built_in_function_fputc_stderr: enter $32, $0
                                                            #     target_instruction_one_operand("pushl", "%eax");
                        lea               5912+string, %eax
                        movl              %eax, -4(%ebp)
                        lea               5936+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_one_operand
                        addl              $8, %esp
                                                            #     target_instruction_two_operands("movl", "$4", "%eax");
                        lea               5956+string, %eax
                        movl              %eax, -4(%ebp)
                        lea               5976+string, %eax
                        movl              %eax, -8(%ebp)
                        lea               5988+string, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_two_operands
                        addl              $12, %esp
                                                            #     target_instruction_two_operands("movl", "$2", "%ebx");
                        lea               6008+string, %eax
                        movl              %eax, -4(%ebp)
                        lea               6028+string, %eax
                        movl              %eax, -8(%ebp)
                        lea               6040+string, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_two_operands
                        addl              $12, %esp
                                                            #     target_instruction_two_operands("movl", "%esp", "%ecx");
                        lea               6060+string, %eax
                        movl              %eax, -4(%ebp)
                        lea               6080+string, %eax
                        movl              %eax, -8(%ebp)
                        lea               6100+string, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_two_operands
                        addl              $12, %esp
                                                            #     target_instruction_two_operands("movl", "$1", "%edx");
                        lea               6120+string, %eax
                        movl              %eax, -4(%ebp)
                        lea               6140+string, %eax
                        movl              %eax, -8(%ebp)
                        lea               6152+string, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_two_operands
                        addl              $12, %esp
                                                            #     target_instruction_one_operand("int", "$0x80");
                        lea               6172+string, %eax
                        movl              %eax, -4(%ebp)
                        lea               6188+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_one_operand
                        addl              $8, %esp
                                                            #     target_instruction_two_operands("addl", "$4", "%esp");
                        lea               6212+string, %eax
                        movl              %eax, -4(%ebp)
                        lea               6232+string, %eax
                        movl              %eax, -8(%ebp)
                        lea               6244+string, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_two_operands
                        addl              $12, %esp
                                                            # }
                                                            # 
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # target_allocate_string(char string[], int string_length) {
target_built_in_function_fputc_stderr_end:
                        leave
                        ret
target_allocate_string: enter             $40, $0
                                                            #     int i;
                                                            #     int offset;
                                                            # 
                                                            #     if (target_string_table_length + string_length > Target_string_table_size) {
                        movl              4199468+global, %eax
                        movl              %eax, -12(%ebp)
                        movl              12(%ebp), %eax
                        addl              -12(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              $1048576, %eax
                        subl              -12(%ebp), %eax
                        jl                compare_206_true
                        movl              $0, %eax
                        jmp               compare_206_false
compare_206_true:       movl              $1, %eax
compare_206_false:      cmpl              $0, %eax
                        jz                if_207_next
                                                            #         error_target("out of initialised (string) storage space");
                        lea               6264+string, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        call              error_target
                        addl              $4, %esp
                                                            #     }
                                                            # 
                                                            #     i = 0;
if_207_next:
if_207_end:             movl              $0, %eax
                        movl              %eax, -4(%ebp)
                                                            #     while(i <= string_length) {
while_208_test:         movl              -4(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              12(%ebp), %eax
                        subl              -12(%ebp), %eax
                        jg                compare_209_true
                        je                compare_209_true
                        movl              $0, %eax
                        jmp               compare_209_false
compare_209_true:       movl              $1, %eax
compare_209_false:      cmpl              $0, %eax
                        jz                while_208_end
                                                            #         target_string_table[target_string_table_length + i] = string[i];
                        movl              4199468+global, %eax
                        movl              %eax, -12(%ebp)
                        movl              -4(%ebp), %eax
                        addl              -12(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              -4(%ebp), %eax
                        movl              %eax, %ebx
                        lea               (,%ebx,4), %eax
                        movl              %eax, -16(%ebp)
                        movl              8(%ebp), %eax
                        addl              -16(%ebp), %eax
                        movl              %eax, %ebx
                        movl              (%ebx), %eax
                        movl              %eax, -16(%ebp)
                        movl              -12(%ebp), %eax
                        movl              %eax, %ebx
                        movl              -16(%ebp), %eax
                        movl              %eax, 4199472+global(,%ebx,4)
                                                            #         i = i + 1;
                        movl              -4(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              $1, %eax
                        addl              -12(%ebp), %eax
                        movl              %eax, -4(%ebp)
                                                            #     }
                                                            # 
                                                            #     offset = target_string_table_length;
                        jmp               while_208_test
while_208_end:          movl              4199468+global, %eax
                        movl              %eax, -8(%ebp)
                                                            #     target_string_table_length = target_string_table_length + string_length;
                        movl              4199468+global, %eax
                        movl              %eax, -12(%ebp)
                        movl              12(%ebp), %eax
                        addl              -12(%ebp), %eax
                        movl              %eax, 4199468+global
                                                            # 
                                                            #     return offset * 4 + 4;
                        movl              -8(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              $4, %eax
                        imull             -12(%ebp)
                        movl              %eax, -12(%ebp)
                        movl              $4, %eax
                        addl              -12(%ebp), %eax
                        jmp               target_allocate_string_end
                                                            # }
                                                            # 
                                                            # target_allocate_global_address(int offset, int var_size) {
target_allocate_string_end:
                        leave
                        ret
target_allocate_global_address: enter     $32, $0
                                                            #     
                                                            #     return -offset * 4;
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        movl              $0, %eax
                        subl              -4(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        movl              $4, %eax
                        imull             -4(%ebp)
                        jmp               target_allocate_global_address_end
                                                            # }
                                                            # 
                                                            # target_allocate_local_address(int offset, int var_size, int function_argument_count) {
target_allocate_global_address_end:
                        leave
                        ret
target_allocate_local_address: enter      $32, $0
                                                            # 
                                                            #     return -offset * 4 - var_size * 4;
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        movl              $0, %eax
                        subl              -4(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        movl              $4, %eax
                        imull             -4(%ebp)
                        movl              %eax, -4(%ebp)
                        movl              12(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              $4, %eax
                        imull             -8(%ebp)
                        movl              %eax, -8(%ebp)
                        movl              -4(%ebp), %eax
                        subl              -8(%ebp), %eax
                        jmp               target_allocate_local_address_end
                                                            # }
                                                            # 
                                                            # target_allocate_function_argument_address(int argument_no, int var_size) {
target_allocate_local_address_end:
                        leave
                        ret
target_allocate_function_argument_address: enter $32, $0
                                                            # 
                                                            #     return argument_no * 4 + 4;
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        movl              $4, %eax
                        imull             -4(%ebp)
                        movl              %eax, -4(%ebp)
                        movl              $4, %eax
                        addl              -4(%ebp), %eax
                        jmp               target_allocate_function_argument_address_end
                                                            # }
                                                            # // ---------------------------------------------------------------------------
                                                            # target_program_begin() {
target_allocate_function_argument_address_end:
                        leave
                        ret
target_program_begin:   enter             $32, $0
                                                            # 
                                                            #     writeln("");
                        lea               6432+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              writeln
                        addl              $4, %esp
                                                            #     writeln(".text");
                        lea               6436+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              writeln
                        addl              $4, %esp
                                                            #     writeln(".globl _start");
                        lea               6460+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              writeln
                        addl              $4, %esp
                                                            #     writeln("_start:");
                        lea               6516+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              writeln
                        addl              $4, %esp
                                                            #     target_instruction_one_operand("call", "main");
                        lea               6548+string, %eax
                        movl              %eax, -4(%ebp)
                        lea               6568+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_one_operand
                        addl              $8, %esp
                                                            #     target_instruction_two_operands("movl", "$1", "%eax");
                        lea               6588+string, %eax
                        movl              %eax, -4(%ebp)
                        lea               6608+string, %eax
                        movl              %eax, -8(%ebp)
                        lea               6620+string, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_two_operands
                        addl              $12, %esp
                                                            #     target_instruction_two_operands("movl", "$0", "%ebx");
                        lea               6640+string, %eax
                        movl              %eax, -4(%ebp)
                        lea               6660+string, %eax
                        movl              %eax, -8(%ebp)
                        lea               6672+string, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_two_operands
                        addl              $12, %esp
                                                            #     target_instruction_one_operand("int", "$0x80");
                        lea               6692+string, %eax
                        movl              %eax, -4(%ebp)
                        lea               6708+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_instruction_one_operand
                        addl              $8, %esp
                                                            #     writeln("");
                        lea               6732+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              writeln
                        addl              $4, %esp
                                                            # }
                                                            #  
                                                            # target_program_end(int global_data_size) {
target_program_begin_end:
                        leave
                        ret
target_program_end:     enter             $2088, $0
                                                            #     int i;
                                                            #     int ch;
                                                            #     char s[Str_size];
                                                            #     char global_data_size_str[Str_size];
                                                            # 
                                                            #     int_to_str(global_data_size * 4, global_data_size_str);
                        movl              8(%ebp), %eax
                        movl              %eax, -2060(%ebp)
                        movl              $4, %eax
                        imull             -2060(%ebp)
                        movl              %eax, -2060(%ebp)
                        lea               -2056(%ebp), %eax
                        movl              %eax, -2064(%ebp)
                        movl              -2064(%ebp), %eax
                        pushl             %eax
                        movl              -2060(%ebp), %eax
                        pushl             %eax
                        call              int_to_str
                        addl              $8, %esp
                                                            # 
                                                            #     writeln(".bss");
                        lea               6736+string, %eax
                        movl              %eax, -2060(%ebp)
                        movl              -2060(%ebp), %eax
                        pushl             %eax
                        call              writeln
                        addl              $4, %esp
                                                            #     writeln("global:");
                        lea               6756+string, %eax
                        movl              %eax, -2060(%ebp)
                        movl              -2060(%ebp), %eax
                        pushl             %eax
                        call              writeln
                        addl              $4, %esp
                                                            #     write(".lcomm global_storage_space, ");
                        lea               6788+string, %eax
                        movl              %eax, -2060(%ebp)
                        movl              -2060(%ebp), %eax
                        pushl             %eax
                        call              write
                        addl              $4, %esp
                                                            #     writeln(global_data_size_str);
                        lea               -2056(%ebp), %eax
                        movl              %eax, -2060(%ebp)
                        movl              -2060(%ebp), %eax
                        pushl             %eax
                        call              writeln
                        addl              $4, %esp
                                                            #     writeln("");
                        lea               6908+string, %eax
                        movl              %eax, -2060(%ebp)
                        movl              -2060(%ebp), %eax
                        pushl             %eax
                        call              writeln
                        addl              $4, %esp
                                                            #     writeln(".data");
                        lea               6912+string, %eax
                        movl              %eax, -2060(%ebp)
                        movl              -2060(%ebp), %eax
                        pushl             %eax
                        call              writeln
                        addl              $4, %esp
                                                            #     writeln("string:");
                        lea               6936+string, %eax
                        movl              %eax, -2060(%ebp)
                        movl              -2060(%ebp), %eax
                        pushl             %eax
                        call              writeln
                        addl              $4, %esp
                                                            #     writeln(".int 0");
                        lea               6968+string, %eax
                        movl              %eax, -2060(%ebp)
                        movl              -2060(%ebp), %eax
                        pushl             %eax
                        call              writeln
                        addl              $4, %esp
                                                            #     i = 0;
                        movl              $0, %eax
                        movl              %eax, -4(%ebp)
                                                            #     while (i < target_string_table_length) {
while_210_test:         movl              -4(%ebp), %eax
                        movl              %eax, -2060(%ebp)
                        movl              4199468+global, %eax
                        subl              -2060(%ebp), %eax
                        jg                compare_211_true
                        movl              $0, %eax
                        jmp               compare_211_false
compare_211_true:       movl              $1, %eax
compare_211_false:      cmpl              $0, %eax
                        jz                while_210_end
                                                            #         ch = target_string_table[i];
                        movl              -4(%ebp), %eax
                        movl              %eax, %ebx
                        movl              4199472+global(,%ebx,4), %eax
                        movl              %eax, -8(%ebp)
                                                            # 
                                                            #         int_to_str(ch, s);
                        movl              -8(%ebp), %eax
                        movl              %eax, -2060(%ebp)
                        lea               -1032(%ebp), %eax
                        movl              %eax, -2064(%ebp)
                        movl              -2064(%ebp), %eax
                        pushl             %eax
                        movl              -2060(%ebp), %eax
                        pushl             %eax
                        call              int_to_str
                        addl              $8, %esp
                                                            #         write(".int ");
                        lea               6996+string, %eax
                        movl              %eax, -2060(%ebp)
                        movl              -2060(%ebp), %eax
                        pushl             %eax
                        call              write
                        addl              $4, %esp
                                                            #         write(s);
                        lea               -1032(%ebp), %eax
                        movl              %eax, -2060(%ebp)
                        movl              -2060(%ebp), %eax
                        pushl             %eax
                        call              write
                        addl              $4, %esp
                                                            # 
                                                            #         if (ch >= ' ' && ch <= '~') {
                        movl              -8(%ebp), %eax
                        movl              %eax, -2060(%ebp)
                        movl              $32, %eax
                        subl              -2060(%ebp), %eax
                        jl                compare_212_true
                        je                compare_212_true
                        movl              $0, %eax
                        jmp               compare_212_false
compare_212_true:       movl              $1, %eax
compare_212_false:      cmpl              $0, %eax
                        jz                logical_and_213_false
                        movl              -8(%ebp), %eax
                        movl              %eax, -2060(%ebp)
                        movl              $126, %eax
                        subl              -2060(%ebp), %eax
                        jg                compare_214_true
                        je                compare_214_true
                        movl              $0, %eax
                        jmp               compare_214_false
compare_214_true:       movl              $1, %eax
compare_214_false:      cmpl              $0, %eax
                        jz                logical_and_213_false
                        movl              $1, %eax
                        jmp               logical_and_213_true
logical_and_213_false:  movl              $0, %eax
logical_and_213_true:   cmpl              $0, %eax
                        jz                if_215_next
                                                            #             copy(s, " # ' '");
                        lea               -1032(%ebp), %eax
                        movl              %eax, -2060(%ebp)
                        lea               7020+string, %eax
                        movl              %eax, -2064(%ebp)
                        movl              -2064(%ebp), %eax
                        pushl             %eax
                        movl              -2060(%ebp), %eax
                        pushl             %eax
                        call              copy
                        addl              $8, %esp
                                                            #             s[4] = ch;
                        movl              $4, %eax
                        movl              %eax, -2060(%ebp)
                        movl              -8(%ebp), %eax
                        movl              %eax, -2064(%ebp)
                        movl              -2060(%ebp), %eax
                        movl              %eax, %ebx
                        movl              -2064(%ebp), %eax
                        movl              %eax, -1032(%ebp,%ebx,4)
                                                            #             write(s);
                        lea               -1032(%ebp), %eax
                        movl              %eax, -2060(%ebp)
                        movl              -2060(%ebp), %eax
                        pushl             %eax
                        call              write
                        addl              $4, %esp
                                                            #         }
                                                            #  
                                                            #         writeln("");
if_215_next:
if_215_end:             lea               7048+string, %eax
                        movl              %eax, -2060(%ebp)
                        movl              -2060(%ebp), %eax
                        pushl             %eax
                        call              writeln
                        addl              $4, %esp
                                                            #         i = i + 1;
                        movl              -4(%ebp), %eax
                        movl              %eax, -2060(%ebp)
                        movl              $1, %eax
                        addl              -2060(%ebp), %eax
                        movl              %eax, -4(%ebp)
                                                            #     }
                                                            # 
                                                            #     writeln(".end");
                        jmp               while_210_test
while_210_end:          lea               7052+string, %eax
                        movl              %eax, -2060(%ebp)
                        movl              -2060(%ebp), %eax
                        pushl             %eax
                        call              writeln
                        addl              $4, %esp
                                                            # }
                                                            # 
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # target_get_label(char start_with[], char out_label[]) {
target_program_end_end:
                        leave
                        ret
target_get_label:       enter             $1056, $0
                                                            #     char sequence_no_str[Str_size];
                                                            # 
                                                            #     int_to_str(target_label_sequence_no, sequence_no_str);
                        movl              8394800+global, %eax
                        movl              %eax, -1028(%ebp)
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              int_to_str
                        addl              $8, %esp
                                                            #     copy(out_label, start_with);
                        movl              12(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        movl              8(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              copy
                        addl              $8, %esp
                                                            #     append(out_label, "_");
                        movl              12(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        lea               7072+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              append
                        addl              $8, %esp
                                                            #     append(out_label, sequence_no_str);
                        movl              12(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              append
                        addl              $8, %esp
                                                            # 
                                                            #     target_label_sequence_no = target_label_sequence_no + 1;
                        movl              8394800+global, %eax
                        movl              %eax, -1028(%ebp)
                        movl              $1, %eax
                        addl              -1028(%ebp), %eax
                        movl              %eax, 8394800+global
                                                            # }
                                                            # #ifndef _MSC_VER
                                                            # #line 2 "compiler.h"
                                                            # #endif
                                                            # 
                                                            # // ===========================================================================
                                                            # //
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # enum {
target_get_label_end:
                        leave
                        ret
                                                            #     Compiler_t_integer_pointer,
                                                            #     Compiler_t_integer,
                                                            #     Compiler_t_integer_array,
                                                            #     Compiler_t_integer_constant,
                                                            #     Compiler_t_function
                                                            # };
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # enum {
                                                            #     Compiler_t_global,
                                                            #     Compiler_t_local
                                                            # };
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # 
                                                            # enum {
                                                            #     Compiler_max_identifiers = 8192
                                                            # };
                                                            # 
                                                            # int compiler_col_value[Compiler_max_identifiers];
                                                            # int compiler_col_type[Compiler_max_identifiers];
                                                            # char compiler_col_name[2097152];   // Compiler_max_identifiers * Str_size
                                                            # char compiler_col_parent[2097152]; // Compiler_max_identifiers * Str_size
                                                            # 
                                                            # int compiler_identifier_table_size;
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # char compiler_function_name[Str_size];
                                                            # int compiler_function_argument_count;
                                                            # int compiler_function_local_data_size;
                                                            # int compiler_function_temp_data_size;
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # int compiler_global_data_size;
                                                            # 
                                                            # enum {
                                                            #     Compiler_max_temp_data_size = 8
                                                            # };
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # char compiler_source_chunk[Source_buffer_length];
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # int compiler_current_enum_value;
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # int compiler_label_sequence_no;
                                                            # 
                                                            # // ===========================================================================
                                                            # //
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_init() {
compiler_init:          enter             $32, $0
                                                            # 
                                                            #     compiler_identifier_table_size = 0;
                        movl              $0, %eax
                        movl              %eax, 25237556+global
                                                            #     compiler_global_data_size = 0;
                        movl              $0, %eax
                        movl              %eax, 25238596+global
                                                            # 
                                                            #     compiler_current_enum_value = 0;
                        movl              $0, %eax
                        movl              %eax, 29432904+global
                                                            #     compiler_label_sequence_no = 0;
                        movl              $0, %eax
                        movl              %eax, 29432908+global
                                                            # 
                                                            #     copy(compiler_function_name, "");
                        lea               25237560+global, %eax
                        movl              %eax, -4(%ebp)
                        lea               7080+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              copy
                        addl              $8, %esp
                                                            #     compiler_function_argument_count = 0;
                        movl              $0, %eax
                        movl              %eax, 25238584+global
                                                            #     compiler_function_local_data_size = 0;
                        movl              $0, %eax
                        movl              %eax, 25238588+global
                                                            #     compiler_function_temp_data_size = 0;
                        movl              $0, %eax
                        movl              %eax, 25238592+global
                                                            # }
                                                            # 
                                                            # // ===========================================================================
                                                            # compiler_get_current_scope() {
compiler_init_end:
                        leave
                        ret
compiler_get_current_scope: enter         $32, $0
                                                            #     if (! str_equals(compiler_function_name, "")) {
                        lea               25237560+global, %eax
                        movl              %eax, -4(%ebp)
                        lea               7084+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              str_equals
                        addl              $8, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_216_false
                        movl              $1, %eax
                        jmp               logical_not_216_true
logical_not_216_false:  movl              $0, %eax
logical_not_216_true:   cmpl              $0, %eax
                        jz                if_217_next
                                                            #         return Compiler_t_local;
                        movl              $1, %eax
                        jmp               compiler_get_current_scope_end
                                                            #     }
                                                            # 
                                                            #     return Compiler_t_global;
if_217_next:
if_217_end:             movl              $0, %eax
                        jmp               compiler_get_current_scope_end
                                                            # }
                                                            # 
                                                            # // ===========================================================================
                                                            # //
                                                            # compiler_find_identifier_with_parent(char name[], char parent[], int out_value[], int out_type[]) {
compiler_get_current_scope_end:
                        leave
                        ret
compiler_find_identifier_with_parent: enter $1060, $0
                                                            #     int i;
                                                            #     char str[Str_size];
                                                            # 
                                                            #     i = 0;
                        movl              $0, %eax
                        movl              %eax, -4(%ebp)
                                                            #     while (i < compiler_identifier_table_size) {
while_218_test:         movl              -4(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              25237556+global, %eax
                        subl              -1032(%ebp), %eax
                        jg                compare_219_true
                        movl              $0, %eax
                        jmp               compare_219_false
compare_219_true:       movl              $1, %eax
compare_219_false:      cmpl              $0, %eax
                        jz                while_218_end
                                                            #         copy_from(str, compiler_col_name, i * Str_size);
                        lea               -1028(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        lea               8460340+global, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -4(%ebp), %eax
                        movl              %eax, -1040(%ebp)
                        movl              $256, %eax
                        imull             -1040(%ebp)
                        movl              %eax, -1040(%ebp)
                        movl              -1040(%ebp), %eax
                        pushl             %eax
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              copy_from
                        addl              $12, %esp
                                                            #         if (str_equals(str, name)) {
                        lea               -1028(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              8(%ebp), %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              str_equals
                        addl              $8, %esp
                        cmpl              $0, %eax
                        jz                if_220_next
                                                            #             out_value[0] = compiler_col_value[i];
                        movl              $0, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -4(%ebp), %eax
                        movl              %eax, %ebx
                        movl              8394804+global(,%ebx,4), %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1032(%ebp), %eax
                        movl              %eax, %ebx
                        movl              -1036(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        lea               (,%ebx,4), %eax
                        movl              %eax, -1036(%ebp)
                        movl              16(%ebp), %eax
                        addl              -1036(%ebp), %eax
                        movl              %eax, %ebx
                        movl              -1032(%ebp), %eax
                        movl              %eax, (%ebx)
                                                            #             out_type[0] = compiler_col_type[i];
                        movl              $0, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -4(%ebp), %eax
                        movl              %eax, %ebx
                        movl              8427572+global(,%ebx,4), %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1032(%ebp), %eax
                        movl              %eax, %ebx
                        movl              -1036(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        lea               (,%ebx,4), %eax
                        movl              %eax, -1036(%ebp)
                        movl              20(%ebp), %eax
                        addl              -1036(%ebp), %eax
                        movl              %eax, %ebx
                        movl              -1032(%ebp), %eax
                        movl              %eax, (%ebx)
                                                            #             copy_from(str, compiler_col_parent, i * Str_size);
                        lea               -1028(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        lea               16848948+global, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -4(%ebp), %eax
                        movl              %eax, -1040(%ebp)
                        movl              $256, %eax
                        imull             -1040(%ebp)
                        movl              %eax, -1040(%ebp)
                        movl              -1040(%ebp), %eax
                        pushl             %eax
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              copy_from
                        addl              $12, %esp
                                                            #             if (str_equals(str, parent)) {
                        lea               -1028(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              12(%ebp), %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              str_equals
                        addl              $8, %esp
                        cmpl              $0, %eax
                        jz                if_221_next
                                                            #                 return True;
                        movl              $1, %eax
                        jmp               compiler_find_identifier_with_parent_end
                                                            #             }
                                                            #         }
if_221_next:
                                                            #         i = i + 1;
if_221_end:
if_220_next:
if_220_end:             movl              -4(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              $1, %eax
                        addl              -1032(%ebp), %eax
                        movl              %eax, -4(%ebp)
                                                            #     }
                                                            # 
                                                            #     return False;
                        jmp               while_218_test
while_218_end:          movl              $0, %eax
                        jmp               compiler_find_identifier_with_parent_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_find_identifier(char name[], int out_value[], int out_type[], int out_scope[]) {
compiler_find_identifier_with_parent_end:
                        leave
                        ret
compiler_find_identifier: enter           $32, $0
                                                            # 
                                                            #     if (compiler_get_current_scope() == Compiler_t_local) {
                        call              compiler_get_current_scope
                        movl              %eax, -4(%ebp)
                        movl              $1, %eax
                        subl              -4(%ebp), %eax
                        je                compare_222_true
                        movl              $0, %eax
                        jmp               compare_222_false
compare_222_true:       movl              $1, %eax
compare_222_false:      cmpl              $0, %eax
                        jz                if_223_next
                                                            #         if (compiler_find_identifier_with_parent(name, compiler_function_name, out_value, out_type)) {
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        lea               25237560+global, %eax
                        movl              %eax, -8(%ebp)
                        movl              12(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              16(%ebp), %eax
                        movl              %eax, -16(%ebp)
                        movl              -16(%ebp), %eax
                        pushl             %eax
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              compiler_find_identifier_with_parent
                        addl              $16, %esp
                        cmpl              $0, %eax
                        jz                if_224_next
                                                            #             out_scope[0] = Compiler_t_local;
                        movl              $0, %eax
                        movl              %eax, -4(%ebp)
                        movl              $1, %eax
                        movl              %eax, -8(%ebp)
                        movl              -4(%ebp), %eax
                        movl              %eax, %ebx
                        movl              -8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        lea               (,%ebx,4), %eax
                        movl              %eax, -8(%ebp)
                        movl              20(%ebp), %eax
                        addl              -8(%ebp), %eax
                        movl              %eax, %ebx
                        movl              -4(%ebp), %eax
                        movl              %eax, (%ebx)
                                                            #             return True;
                        movl              $1, %eax
                        jmp               compiler_find_identifier_end
                                                            #         }
                                                            #     }
if_224_next:
                                                            # 
                                                            #     if (compiler_find_identifier_with_parent(name, "", out_value, out_type)) {
if_224_end:
if_223_next:
if_223_end:             movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        lea               7088+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              12(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              16(%ebp), %eax
                        movl              %eax, -16(%ebp)
                        movl              -16(%ebp), %eax
                        pushl             %eax
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              compiler_find_identifier_with_parent
                        addl              $16, %esp
                        cmpl              $0, %eax
                        jz                if_225_next
                                                            #         out_scope[0] = Compiler_t_global;
                        movl              $0, %eax
                        movl              %eax, -4(%ebp)
                        movl              $0, %eax
                        movl              %eax, -8(%ebp)
                        movl              -4(%ebp), %eax
                        movl              %eax, %ebx
                        movl              -8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        lea               (,%ebx,4), %eax
                        movl              %eax, -8(%ebp)
                        movl              20(%ebp), %eax
                        addl              -8(%ebp), %eax
                        movl              %eax, %ebx
                        movl              -4(%ebp), %eax
                        movl              %eax, (%ebx)
                                                            #         return True;
                        movl              $1, %eax
                        jmp               compiler_find_identifier_end
                                                            #     }
                                                            # 
                                                            #     return False;
if_225_next:
if_225_end:             movl              $0, %eax
                        jmp               compiler_find_identifier_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_identifier_must_not_be_defined_in_current_scope(char name[]) {
compiler_find_identifier_end:
                        leave
                        ret
compiler_identifier_must_not_be_defined_in_current_scope: enter $44, $0
                                                            #     int value[1];
                                                            #     int type[1];
                                                            #     int scope[1];
                                                            # 
                                                            #     if (! compiler_find_identifier(name, value, type, scope)) {
                        movl              8(%ebp), %eax
                        movl              %eax, -16(%ebp)
                        lea               -4(%ebp), %eax
                        movl              %eax, -20(%ebp)
                        lea               -8(%ebp), %eax
                        movl              %eax, -24(%ebp)
                        lea               -12(%ebp), %eax
                        movl              %eax, -28(%ebp)
                        movl              -28(%ebp), %eax
                        pushl             %eax
                        movl              -24(%ebp), %eax
                        pushl             %eax
                        movl              -20(%ebp), %eax
                        pushl             %eax
                        movl              -16(%ebp), %eax
                        pushl             %eax
                        call              compiler_find_identifier
                        addl              $16, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_226_false
                        movl              $1, %eax
                        jmp               logical_not_226_true
logical_not_226_false:  movl              $0, %eax
logical_not_226_true:   cmpl              $0, %eax
                        jz                if_227_next
                                                            #         return;
                        jmp               compiler_identifier_must_not_be_defined_in_current_scope_end
                                                            #     }
                                                            # 
                                                            #     if (scope[0] == compiler_get_current_scope())  {
if_227_next:
if_227_end:             movl              $0, %eax
                        movl              %eax, %ebx
                        movl              -12(%ebp,%ebx,4), %eax
                        movl              %eax, -16(%ebp)
                        call              compiler_get_current_scope
                        subl              -16(%ebp), %eax
                        je                compare_228_true
                        movl              $0, %eax
                        jmp               compare_228_false
compare_228_true:       movl              $1, %eax
compare_228_false:      cmpl              $0, %eax
                        jz                if_229_next
                                                            #         error_compiler("name already defined");
                        lea               7092+string, %eax
                        movl              %eax, -16(%ebp)
                        movl              -16(%ebp), %eax
                        pushl             %eax
                        call              error_compiler
                        addl              $4, %esp
                                                            #     }
                                                            # }
if_229_next:
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_add_identifier(char name[], int type, int value) {
if_229_end:
compiler_identifier_must_not_be_defined_in_current_scope_end:
                        leave
                        ret
compiler_add_identifier: enter            $32, $0
                                                            # 
                                                            #     compiler_identifier_must_not_be_defined_in_current_scope(name);
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              compiler_identifier_must_not_be_defined_in_current_scope
                        addl              $4, %esp
                                                            # 
                                                            #     if (compiler_identifier_table_size >= Compiler_max_identifiers) {
                        movl              25237556+global, %eax
                        movl              %eax, -4(%ebp)
                        movl              $8192, %eax
                        subl              -4(%ebp), %eax
                        jl                compare_230_true
                        je                compare_230_true
                        movl              $0, %eax
                        jmp               compare_230_false
compare_230_true:       movl              $1, %eax
compare_230_false:      cmpl              $0, %eax
                        jz                if_231_next
                                                            #         error_compiler("out of symbol table space");
                        lea               7176+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              error_compiler
                        addl              $4, %esp
                                                            #     }
                                                            # 
                                                            #     copy_to(compiler_col_name, name, compiler_identifier_table_size * Str_size);
if_231_next:
if_231_end:             lea               8460340+global, %eax
                        movl              %eax, -4(%ebp)
                        movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              25237556+global, %eax
                        movl              %eax, -12(%ebp)
                        movl              $256, %eax
                        imull             -12(%ebp)
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              copy_to
                        addl              $12, %esp
                                                            #     copy_to(compiler_col_parent, compiler_function_name, compiler_identifier_table_size * Str_size);
                        lea               16848948+global, %eax
                        movl              %eax, -4(%ebp)
                        lea               25237560+global, %eax
                        movl              %eax, -8(%ebp)
                        movl              25237556+global, %eax
                        movl              %eax, -12(%ebp)
                        movl              $256, %eax
                        imull             -12(%ebp)
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              copy_to
                        addl              $12, %esp
                                                            #     compiler_col_type[compiler_identifier_table_size] = type;
                        movl              25237556+global, %eax
                        movl              %eax, -4(%ebp)
                        movl              12(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              -4(%ebp), %eax
                        movl              %eax, %ebx
                        movl              -8(%ebp), %eax
                        movl              %eax, 8427572+global(,%ebx,4)
                                                            #     compiler_col_value[compiler_identifier_table_size] = value;
                        movl              25237556+global, %eax
                        movl              %eax, -4(%ebp)
                        movl              16(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              -4(%ebp), %eax
                        movl              %eax, %ebx
                        movl              -8(%ebp), %eax
                        movl              %eax, 8394804+global(,%ebx,4)
                                                            # 
                                                            #     compiler_identifier_table_size = compiler_identifier_table_size + 1;
                        movl              25237556+global, %eax
                        movl              %eax, -4(%ebp)
                        movl              $1, %eax
                        addl              -4(%ebp), %eax
                        movl              %eax, 25237556+global
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_must_find_identifier(char name[], int out_type[], int out_scope[]) {
compiler_add_identifier_end:
                        leave
                        ret
compiler_must_find_identifier: enter      $36, $0
                                                            #     int value[1];
                                                            # 
                                                            #     if (! compiler_find_identifier(name, value, out_type, out_scope)) {
                        movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        lea               -4(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              12(%ebp), %eax
                        movl              %eax, -16(%ebp)
                        movl              16(%ebp), %eax
                        movl              %eax, -20(%ebp)
                        movl              -20(%ebp), %eax
                        pushl             %eax
                        movl              -16(%ebp), %eax
                        pushl             %eax
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              compiler_find_identifier
                        addl              $16, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_232_false
                        movl              $1, %eax
                        jmp               logical_not_232_true
logical_not_232_false:  movl              $0, %eax
logical_not_232_true:   cmpl              $0, %eax
                        jz                if_233_next
                                                            #         error_compiler("name not defined");
                        lea               7280+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              error_compiler
                        addl              $4, %esp
                                                            #     }
                                                            # 
                                                            #     return value[0];
if_233_next:
if_233_end:             movl              $0, %eax
                        movl              %eax, %ebx
                        movl              -4(%ebp,%ebx,4), %eax
                        jmp               compiler_must_find_identifier_end
                                                            # }
                                                            # 
                                                            # // ===========================================================================
                                                            # //
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_allocate_temp_local() {
compiler_must_find_identifier_end:
                        leave
                        ret
compiler_allocate_temp_local: enter       $40, $0
                                                            #     int temp_local_address;
                                                            #     int offset;
                                                            #     
                                                            #     if (compiler_function_temp_data_size >= Compiler_max_temp_data_size) {
                        movl              25238592+global, %eax
                        movl              %eax, -12(%ebp)
                        movl              $8, %eax
                        subl              -12(%ebp), %eax
                        jl                compare_234_true
                        je                compare_234_true
                        movl              $0, %eax
                        jmp               compare_234_false
compare_234_true:       movl              $1, %eax
compare_234_false:      cmpl              $0, %eax
                        jz                if_235_next
                                                            #         error_compiler("too many local temporary variables");
                        lea               7348+string, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        call              error_compiler
                        addl              $4, %esp
                                                            #     }
                                                            # 
                                                            #     offset = compiler_function_local_data_size + compiler_function_temp_data_size;
if_235_next:
if_235_end:             movl              25238588+global, %eax
                        movl              %eax, -12(%ebp)
                        movl              25238592+global, %eax
                        addl              -12(%ebp), %eax
                        movl              %eax, -8(%ebp)
                                                            #     temp_local_address = target_allocate_local_address(offset, 1, compiler_function_argument_count);
                        movl              -8(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              $1, %eax
                        movl              %eax, -16(%ebp)
                        movl              25238584+global, %eax
                        movl              %eax, -20(%ebp)
                        movl              -20(%ebp), %eax
                        pushl             %eax
                        movl              -16(%ebp), %eax
                        pushl             %eax
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        call              target_allocate_local_address
                        addl              $12, %esp
                        movl              %eax, -4(%ebp)
                                                            # 
                                                            #     compiler_function_temp_data_size = compiler_function_temp_data_size + 1;
                        movl              25238592+global, %eax
                        movl              %eax, -12(%ebp)
                        movl              $1, %eax
                        addl              -12(%ebp), %eax
                        movl              %eax, 25238592+global
                                                            # 
                                                            #     return temp_local_address;
                        movl              -4(%ebp), %eax
                        jmp               compiler_allocate_temp_local_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_free_temp_local(int temp_local_address) {
compiler_allocate_temp_local_end:
                        leave
                        ret
compiler_free_temp_local: enter           $40, $0
                                                            #     int sanity_check_address;
                                                            #     int offset;
                                                            #     
                                                            #     compiler_function_temp_data_size = compiler_function_temp_data_size - 1;
                        movl              25238592+global, %eax
                        movl              %eax, -12(%ebp)
                        movl              $1, %eax
                        movl              %eax, -16(%ebp)
                        movl              -12(%ebp), %eax
                        subl              -16(%ebp), %eax
                        movl              %eax, 25238592+global
                                                            # 
                                                            #     offset = compiler_function_local_data_size + compiler_function_temp_data_size;
                        movl              25238588+global, %eax
                        movl              %eax, -12(%ebp)
                        movl              25238592+global, %eax
                        addl              -12(%ebp), %eax
                        movl              %eax, -8(%ebp)
                                                            #     sanity_check_address = target_allocate_local_address(offset, 1, compiler_function_argument_count);
                        movl              -8(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              $1, %eax
                        movl              %eax, -16(%ebp)
                        movl              25238584+global, %eax
                        movl              %eax, -20(%ebp)
                        movl              -20(%ebp), %eax
                        pushl             %eax
                        movl              -16(%ebp), %eax
                        pushl             %eax
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        call              target_allocate_local_address
                        addl              $12, %esp
                        movl              %eax, -4(%ebp)
                                                            # 
                                                            #     if (temp_local_address != sanity_check_address) {
                        movl              8(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              -4(%ebp), %eax
                        subl              -12(%ebp), %eax
                        jne               compare_236_true
                        movl              $0, %eax
                        jmp               compare_236_false
compare_236_true:       movl              $1, %eax
compare_236_false:      cmpl              $0, %eax
                        jz                if_237_next
                                                            #         error_internal();
                        call              error_internal
                                                            #     }
                                                            # }
if_237_next:
                                                            # 
                                                            # // ===========================================================================
                                                            # //
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_get_label(char start_with[], char out_label[]) {
if_237_end:
compiler_free_temp_local_end:
                        leave
                        ret
compiler_get_label:     enter             $1056, $0
                                                            #     char sequence_no_str[Str_size];
                                                            # 
                                                            #     int_to_str(compiler_label_sequence_no, sequence_no_str);
                        movl              29432908+global, %eax
                        movl              %eax, -1028(%ebp)
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              int_to_str
                        addl              $8, %esp
                                                            #     copy(out_label, start_with);
                        movl              12(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        movl              8(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              copy
                        addl              $8, %esp
                                                            #     append(out_label, "_");
                        movl              12(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        lea               7488+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              append
                        addl              $8, %esp
                                                            #     append(out_label, sequence_no_str);
                        movl              12(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              append
                        addl              $8, %esp
                                                            # 
                                                            #     compiler_label_sequence_no = compiler_label_sequence_no + 1;
                        movl              29432908+global, %eax
                        movl              %eax, -1028(%ebp)
                        movl              $1, %eax
                        addl              -1028(%ebp), %eax
                        movl              %eax, 29432908+global
                                                            # }
                                                            # 
                                                            # 
                                                            # // ===========================================================================
                                                            # //
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_enumerator(char name[]) {
compiler_get_label_end:
                        leave
                        ret
compiler_enumerator:    enter             $32, $0
                                                            # 
                                                            #     compiler_identifier_must_not_be_defined_in_current_scope(name);
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              compiler_identifier_must_not_be_defined_in_current_scope
                        addl              $4, %esp
                                                            # 
                                                            #     compiler_add_identifier(name, Compiler_t_integer_constant, compiler_current_enum_value);
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        movl              $3, %eax
                        movl              %eax, -8(%ebp)
                        movl              29432904+global, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              compiler_add_identifier
                        addl              $12, %esp
                                                            #     compiler_current_enum_value = compiler_current_enum_value + 1;
                        movl              29432904+global, %eax
                        movl              %eax, -4(%ebp)
                        movl              $1, %eax
                        addl              -4(%ebp), %eax
                        movl              %eax, 29432904+global
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_enumerator_assigned_value(char name[], char value[]) {
compiler_enumerator_end:
                        leave
                        ret
compiler_enumerator_assigned_value: enter $32, $0
                                                            # 
                                                            #     compiler_current_enum_value = str_to_int(value);
                        movl              12(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              str_to_int
                        addl              $4, %esp
                        movl              %eax, 29432904+global
                                                            #     compiler_enumerator(name);
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              compiler_enumerator
                        addl              $4, %esp
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_enumerator_list_end() {
compiler_enumerator_assigned_value_end:
                        leave
                        ret
compiler_enumerator_list_end: enter       $32, $0
                                                            # 
                                                            #     compiler_current_enum_value = 0;
                        movl              $0, %eax
                        movl              %eax, 29432904+global
                                                            # }
                                                            # 
                                                            # // ===========================================================================
                                                            # //
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_declaration_integer(char variable_name[]) {
compiler_enumerator_list_end_end:
                        leave
                        ret
compiler_declaration_integer: enter       $36, $0
                                                            #     int address;
                                                            # 
                                                            #     if (compiler_get_current_scope() == Compiler_t_local) {
                        call              compiler_get_current_scope
                        movl              %eax, -8(%ebp)
                        movl              $1, %eax
                        subl              -8(%ebp), %eax
                        je                compare_238_true
                        movl              $0, %eax
                        jmp               compare_238_false
compare_238_true:       movl              $1, %eax
compare_238_false:      cmpl              $0, %eax
                        jz                if_239_next
                                                            #         address = target_allocate_local_address(compiler_function_local_data_size, 1, compiler_function_argument_count);
                        movl              25238588+global, %eax
                        movl              %eax, -8(%ebp)
                        movl              $1, %eax
                        movl              %eax, -12(%ebp)
                        movl              25238584+global, %eax
                        movl              %eax, -16(%ebp)
                        movl              -16(%ebp), %eax
                        pushl             %eax
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              target_allocate_local_address
                        addl              $12, %esp
                        movl              %eax, -4(%ebp)
                                                            #         compiler_function_local_data_size = compiler_function_local_data_size + 1;
                        movl              25238588+global, %eax
                        movl              %eax, -8(%ebp)
                        movl              $1, %eax
                        addl              -8(%ebp), %eax
                        movl              %eax, 25238588+global
                                                            #         compiler_add_identifier(variable_name, Compiler_t_integer, address);
                        movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              $1, %eax
                        movl              %eax, -12(%ebp)
                        movl              -4(%ebp), %eax
                        movl              %eax, -16(%ebp)
                        movl              -16(%ebp), %eax
                        pushl             %eax
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              compiler_add_identifier
                        addl              $12, %esp
                                                            #         return;
                        jmp               compiler_declaration_integer_end
                                                            #     }
                                                            # 
                                                            #     if (compiler_get_current_scope() == Compiler_t_global) {
if_239_next:
if_239_end:             call              compiler_get_current_scope
                        movl              %eax, -8(%ebp)
                        movl              $0, %eax
                        subl              -8(%ebp), %eax
                        je                compare_240_true
                        movl              $0, %eax
                        jmp               compare_240_false
compare_240_true:       movl              $1, %eax
compare_240_false:      cmpl              $0, %eax
                        jz                if_241_next
                                                            #         address = target_allocate_global_address(compiler_global_data_size, 1);
                        movl              25238596+global, %eax
                        movl              %eax, -8(%ebp)
                        movl              $1, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              target_allocate_global_address
                        addl              $8, %esp
                        movl              %eax, -4(%ebp)
                                                            #         compiler_global_data_size = compiler_global_data_size + 1;
                        movl              25238596+global, %eax
                        movl              %eax, -8(%ebp)
                        movl              $1, %eax
                        addl              -8(%ebp), %eax
                        movl              %eax, 25238596+global
                                                            #         compiler_add_identifier(variable_name, Compiler_t_integer, address);
                        movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              $1, %eax
                        movl              %eax, -12(%ebp)
                        movl              -4(%ebp), %eax
                        movl              %eax, -16(%ebp)
                        movl              -16(%ebp), %eax
                        pushl             %eax
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              compiler_add_identifier
                        addl              $12, %esp
                                                            #         return;
                        jmp               compiler_declaration_integer_end
                                                            #     }
                                                            # 
                                                            #     error_internal();
if_241_next:
if_241_end:             call              error_internal
                                                            # }
                                                            # 
                                                            # // ===========================================================================
                                                            # //
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_declaration_integer_array(char array_name[], int array_length) {
compiler_declaration_integer_end:
                        leave
                        ret
compiler_declaration_integer_array: enter $36, $0
                                                            #     int address;
                                                            # 
                                                            #     if (array_length <= 0) {
                        movl              12(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              $0, %eax
                        subl              -8(%ebp), %eax
                        jg                compare_242_true
                        je                compare_242_true
                        movl              $0, %eax
                        jmp               compare_242_false
compare_242_true:       movl              $1, %eax
compare_242_false:      cmpl              $0, %eax
                        jz                if_243_next
                                                            #         error_compiler("array length must be greater than zero");
                        lea               7496+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              error_compiler
                        addl              $4, %esp
                                                            #     }
                                                            # 
                                                            #     if (compiler_get_current_scope() == Compiler_t_local) {
if_243_next:
if_243_end:             call              compiler_get_current_scope
                        movl              %eax, -8(%ebp)
                        movl              $1, %eax
                        subl              -8(%ebp), %eax
                        je                compare_244_true
                        movl              $0, %eax
                        jmp               compare_244_false
compare_244_true:       movl              $1, %eax
compare_244_false:      cmpl              $0, %eax
                        jz                if_245_next
                                                            #         address = target_allocate_local_address(compiler_function_local_data_size, array_length, compiler_function_argument_count);
                        movl              25238588+global, %eax
                        movl              %eax, -8(%ebp)
                        movl              12(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              25238584+global, %eax
                        movl              %eax, -16(%ebp)
                        movl              -16(%ebp), %eax
                        pushl             %eax
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              target_allocate_local_address
                        addl              $12, %esp
                        movl              %eax, -4(%ebp)
                                                            #         compiler_function_local_data_size = compiler_function_local_data_size + array_length;
                        movl              25238588+global, %eax
                        movl              %eax, -8(%ebp)
                        movl              12(%ebp), %eax
                        addl              -8(%ebp), %eax
                        movl              %eax, 25238588+global
                                                            #         compiler_add_identifier(array_name, Compiler_t_integer_array, address);
                        movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              $2, %eax
                        movl              %eax, -12(%ebp)
                        movl              -4(%ebp), %eax
                        movl              %eax, -16(%ebp)
                        movl              -16(%ebp), %eax
                        pushl             %eax
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              compiler_add_identifier
                        addl              $12, %esp
                                                            #         return;
                        jmp               compiler_declaration_integer_array_end
                                                            #     }
                                                            # 
                                                            #     if (compiler_get_current_scope() == Compiler_t_global) {
if_245_next:
if_245_end:             call              compiler_get_current_scope
                        movl              %eax, -8(%ebp)
                        movl              $0, %eax
                        subl              -8(%ebp), %eax
                        je                compare_246_true
                        movl              $0, %eax
                        jmp               compare_246_false
compare_246_true:       movl              $1, %eax
compare_246_false:      cmpl              $0, %eax
                        jz                if_247_next
                                                            #         address = target_allocate_global_address(compiler_global_data_size, array_length);
                        movl              25238596+global, %eax
                        movl              %eax, -8(%ebp)
                        movl              12(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              target_allocate_global_address
                        addl              $8, %esp
                        movl              %eax, -4(%ebp)
                                                            #         compiler_global_data_size = compiler_global_data_size + array_length;
                        movl              25238596+global, %eax
                        movl              %eax, -8(%ebp)
                        movl              12(%ebp), %eax
                        addl              -8(%ebp), %eax
                        movl              %eax, 25238596+global
                                                            #         compiler_add_identifier(array_name, Compiler_t_integer_array, address);
                        movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              $2, %eax
                        movl              %eax, -12(%ebp)
                        movl              -4(%ebp), %eax
                        movl              %eax, -16(%ebp)
                        movl              -16(%ebp), %eax
                        pushl             %eax
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              compiler_add_identifier
                        addl              $12, %esp
                                                            #         return;
                        jmp               compiler_declaration_integer_array_end
                                                            #     }
                                                            # 
                                                            #     error_internal();
if_247_next:
if_247_end:             call              error_internal
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_declaration_integer_array_constant_length_specifier(char array_name[], char array_length_integer_constant[])  {
compiler_declaration_integer_array_end:
                        leave
                        ret
compiler_declaration_integer_array_constant_length_specifier: enter $36, $0
                                                            #     int length;
                                                            # 
                                                            #     length = str_to_int(array_length_integer_constant);
                        movl              12(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              str_to_int
                        addl              $4, %esp
                        movl              %eax, -4(%ebp)
                                                            #     compiler_declaration_integer_array(array_name, length);
                        movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              -4(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              compiler_declaration_integer_array
                        addl              $8, %esp
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_declaration_integer_array_identifier_length_specifier(char array_name[], char array_length_identifier[])  {
compiler_declaration_integer_array_constant_length_specifier_end:
                        leave
                        ret
compiler_declaration_integer_array_identifier_length_specifier: enter $44, $0
                                                            #     int array_length;
                                                            #     int type[1];
                                                            #     int scope[1];
                                                            # 
                                                            #     array_length = compiler_must_find_identifier(array_length_identifier, type, scope);
                        movl              12(%ebp), %eax
                        movl              %eax, -16(%ebp)
                        lea               -8(%ebp), %eax
                        movl              %eax, -20(%ebp)
                        lea               -12(%ebp), %eax
                        movl              %eax, -24(%ebp)
                        movl              -24(%ebp), %eax
                        pushl             %eax
                        movl              -20(%ebp), %eax
                        pushl             %eax
                        movl              -16(%ebp), %eax
                        pushl             %eax
                        call              compiler_must_find_identifier
                        addl              $12, %esp
                        movl              %eax, -4(%ebp)
                                                            # 
                                                            #     if (type[0] != Compiler_t_integer_constant) {
                        movl              $0, %eax
                        movl              %eax, %ebx
                        movl              -8(%ebp,%ebx,4), %eax
                        movl              %eax, -16(%ebp)
                        movl              $3, %eax
                        subl              -16(%ebp), %eax
                        jne               compare_248_true
                        movl              $0, %eax
                        jmp               compare_248_false
compare_248_true:       movl              $1, %eax
compare_248_false:      cmpl              $0, %eax
                        jz                if_249_next
                                                            #         error_compiler("constant array length specifier expected");
                        lea               7652+string, %eax
                        movl              %eax, -16(%ebp)
                        movl              -16(%ebp), %eax
                        pushl             %eax
                        call              error_compiler
                        addl              $4, %esp
                                                            #     }
                                                            # 
                                                            #     compiler_declaration_integer_array(array_name, array_length);
if_249_next:
if_249_end:             movl              8(%ebp), %eax
                        movl              %eax, -16(%ebp)
                        movl              -4(%ebp), %eax
                        movl              %eax, -20(%ebp)
                        movl              -20(%ebp), %eax
                        pushl             %eax
                        movl              -16(%ebp), %eax
                        pushl             %eax
                        call              compiler_declaration_integer_array
                        addl              $8, %esp
                                                            # }
                                                            # 
                                                            # // ===========================================================================
                                                            # //
                                                            # // ---------------------------------------------------------------------------
                                                            # // 
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_function_definition_begin(char function_name[]) {
compiler_declaration_integer_array_identifier_length_specifier_end:
                        leave
                        ret
compiler_function_definition_begin: enter $32, $0
                                                            # 
                                                            #     compiler_identifier_must_not_be_defined_in_current_scope(function_name);
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              compiler_identifier_must_not_be_defined_in_current_scope
                        addl              $4, %esp
                                                            #     compiler_add_identifier(function_name, Compiler_t_function, 0);
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        movl              $4, %eax
                        movl              %eax, -8(%ebp)
                        movl              $0, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              compiler_add_identifier
                        addl              $12, %esp
                                                            # 
                                                            #     copy(compiler_function_name, function_name);
                        lea               25237560+global, %eax
                        movl              %eax, -4(%ebp)
                        movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              copy
                        addl              $8, %esp
                                                            #     compiler_function_local_data_size = 0;
                        movl              $0, %eax
                        movl              %eax, 25238588+global
                                                            #     compiler_function_temp_data_size = 0;
                        movl              $0, %eax
                        movl              %eax, 25238592+global
                                                            #     compiler_function_argument_count = 0;
                        movl              $0, %eax
                        movl              %eax, 25238584+global
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_function_argument_declaration_item(char argument_name[], int argument_type, int argument_no) {
compiler_function_definition_begin_end:
                        leave
                        ret
compiler_function_argument_declaration_item: enter $36, $0
                                                            #     int address;
                                                            # 
                                                            #     compiler_function_argument_count = compiler_function_argument_count + 1;
                        movl              25238584+global, %eax
                        movl              %eax, -8(%ebp)
                        movl              $1, %eax
                        addl              -8(%ebp), %eax
                        movl              %eax, 25238584+global
                                                            # 
                                                            #     address = target_allocate_function_argument_address(argument_no, 1);
                        movl              16(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              $1, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              target_allocate_function_argument_address
                        addl              $8, %esp
                        movl              %eax, -4(%ebp)
                                                            #     compiler_add_identifier(argument_name, argument_type, address);
                        movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              12(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              -4(%ebp), %eax
                        movl              %eax, -16(%ebp)
                        movl              -16(%ebp), %eax
                        pushl             %eax
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              compiler_add_identifier
                        addl              $12, %esp
                                                            # }
                                                            #     
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_function_compound_statement_locals_declared() {
compiler_function_argument_declaration_item_end:
                        leave
                        ret
compiler_function_compound_statement_locals_declared: enter $32, $0
                                                            # 
                                                            #     target_op_subroutine_begin(compiler_function_name,
                        lea               25237560+global, %eax
                        movl              %eax, -4(%ebp)
                        movl              25238584+global, %eax
                        movl              %eax, -8(%ebp)
                        movl              25238588+global, %eax
                        movl              %eax, -12(%ebp)
                        movl              $8, %eax
                        addl              -12(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_op_subroutine_begin
                        addl              $12, %esp
                                                            #                                compiler_function_argument_count,
                                                            #                                compiler_function_local_data_size + Compiler_max_temp_data_size);
                                                            # 	
                                                            # 	target_begin_branch_block(compiler_function_name, "_end");
                        lea               25237560+global, %eax
                        movl              %eax, -4(%ebp)
                        lea               7816+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_begin_branch_block
                        addl              $8, %esp
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_function_definition_end() {
compiler_function_compound_statement_locals_declared_end:
                        leave
                        ret
compiler_function_definition_end: enter   $32, $0
                                                            # 
                                                            #     target_end_branch_block(compiler_function_name, "_end");
                        lea               25237560+global, %eax
                        movl              %eax, -4(%ebp)
                        lea               7836+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_end_branch_block
                        addl              $8, %esp
                                                            # 
                                                            #     target_op_subroutine_end(compiler_function_name,
                        lea               25237560+global, %eax
                        movl              %eax, -4(%ebp)
                        movl              25238584+global, %eax
                        movl              %eax, -8(%ebp)
                        movl              25238588+global, %eax
                        movl              %eax, -12(%ebp)
                        movl              $8, %eax
                        addl              -12(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_op_subroutine_end
                        addl              $12, %esp
                                                            #                              compiler_function_argument_count,
                                                            #                              compiler_function_local_data_size + Compiler_max_temp_data_size);
                                                            # 
                                                            #     copy(compiler_function_name, "");
                        lea               25237560+global, %eax
                        movl              %eax, -4(%ebp)
                        lea               7856+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              copy
                        addl              $8, %esp
                                                            # 
                                                            #     if (compiler_function_temp_data_size != 0) {
                        movl              25238592+global, %eax
                        movl              %eax, -4(%ebp)
                        movl              $0, %eax
                        subl              -4(%ebp), %eax
                        jne               compare_250_true
                        movl              $0, %eax
                        jmp               compare_250_false
compare_250_true:       movl              $1, %eax
compare_250_false:      cmpl              $0, %eax
                        jz                if_251_next
                                                            #         error_internal();
                        call              error_internal
                                                            #     }
                                                            # }
if_251_next:
                                                            # 
                                                            # // ===========================================================================
                                                            # //
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_program_begin() {
if_251_end:
compiler_function_definition_end_end:
                        leave
                        ret
compiler_program_begin: enter             $32, $0
                                                            # 
                                                            #     target_program_begin();
                        call              target_program_begin
                                                            # }
                                                            # 
                                                            # compiler_program_end() {
compiler_program_begin_end:
                        leave
                        ret
compiler_program_end:   enter             $32, $0
                                                            # 
                                                            #     target_program_end(compiler_global_data_size);
                        movl              25238596+global, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_program_end
                        addl              $4, %esp
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_output_source_as_comment() {
compiler_program_end_end:
                        leave
                        ret
compiler_output_source_as_comment: enter  $32, $0
                                                            # 
                                                            #     preprocessor_get_source_chunk(compiler_source_chunk);
                        lea               25238600+global, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              preprocessor_get_source_chunk
                        addl              $4, %esp
                                                            # 
                                                            #     target_comment_print(compiler_source_chunk);
                        lea               25238600+global, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_comment_print
                        addl              $4, %esp
                                                            # }
                                                            # 
                                                            # // ===========================================================================
                                                            # //
                                                            # // ---------------------------------------------------------------------------
                                                            # 
                                                            # compiler_built_in_function_fgetc() {
compiler_output_source_as_comment_end:
                        leave
                        ret
compiler_built_in_function_fgetc: enter   $32, $0
                                                            # 
                                                            #     target_built_in_function_fgetc();
                        call              target_built_in_function_fgetc
                                                            # }
                                                            # 
                                                            # compiler_built_in_function_fputc_stdout() {
compiler_built_in_function_fgetc_end:
                        leave
                        ret
compiler_built_in_function_fputc_stdout: enter $32, $0
                                                            # 
                                                            #     target_built_in_function_fputc_stdout();
                        call              target_built_in_function_fputc_stdout
                                                            # }
                                                            # 
                                                            # compiler_built_in_function_fputc_stderr() {
compiler_built_in_function_fputc_stdout_end:
                        leave
                        ret
compiler_built_in_function_fputc_stderr: enter $32, $0
                                                            # 
                                                            #     target_built_in_function_fputc_stderr();
                        call              target_built_in_function_fputc_stderr
                                                            # }
                                                            # 
                                                            # compiler_built_in_function_exit() {
compiler_built_in_function_fputc_stderr_end:
                        leave
                        ret
compiler_built_in_function_exit: enter    $32, $0
                                                            # 
                                                            #     target_built_in_function_exit();
                        call              target_built_in_function_exit
                                                            # }
                                                            # 
                                                            # compiler_built_in_function_debug() {
compiler_built_in_function_exit_end:
                        leave
                        ret
compiler_built_in_function_debug: enter   $32, $0
                                                            # 
                                                            #     target_built_in_function_debug();
                        call              target_built_in_function_debug
                                                            # }
                                                            # 
                                                            # // ===========================================================================
                                                            # //
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_function_call_prepare(char function_name[], char out_function_name_cookie[]) {
compiler_built_in_function_debug_end:
                        leave
                        ret
compiler_function_call_prepare: enter     $32, $0
                                                            # 
                                                            #     copy(out_function_name_cookie, function_name);
                        movl              12(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              copy
                        addl              $8, %esp
                                                            # }
                                                            # 
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_function_call_string_literal_argument(char string_literal[]) {
compiler_function_call_prepare_end:
                        leave
                        ret
compiler_function_call_string_literal_argument: enter $40, $0
                                                            #     int string_length;
                                                            #     int address;
                                                            # 
                                                            #     string_length = length(string_literal);
                        movl              8(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        call              length
                        addl              $4, %esp
                        movl              %eax, -4(%ebp)
                                                            #     address = target_allocate_string(string_literal, string_length + 1);
                        movl              8(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              -4(%ebp), %eax
                        movl              %eax, -16(%ebp)
                        movl              $1, %eax
                        addl              -16(%ebp), %eax
                        movl              %eax, -16(%ebp)
                        movl              -16(%ebp), %eax
                        pushl             %eax
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        call              target_allocate_string
                        addl              $8, %esp
                        movl              %eax, -8(%ebp)
                                                            # 
                                                            #     target_op_load_address(address, Target_t_global);
                        movl              -8(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              $3, %eax
                        movl              %eax, -16(%ebp)
                        movl              -16(%ebp), %eax
                        pushl             %eax
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        call              target_op_load_address
                        addl              $8, %esp
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_function_call_pointer_argument(char identifier[]) {
compiler_function_call_string_literal_argument_end:
                        leave
                        ret
compiler_function_call_pointer_argument: enter $44, $0
                                                            #     int value[1];
                                                            #     int type[1];
                                                            #     int scope[1];
                                                            # 
                                                            #     if (! compiler_find_identifier(identifier, value, type, scope)) {
                        movl              8(%ebp), %eax
                        movl              %eax, -16(%ebp)
                        lea               -4(%ebp), %eax
                        movl              %eax, -20(%ebp)
                        lea               -8(%ebp), %eax
                        movl              %eax, -24(%ebp)
                        lea               -12(%ebp), %eax
                        movl              %eax, -28(%ebp)
                        movl              -28(%ebp), %eax
                        pushl             %eax
                        movl              -24(%ebp), %eax
                        pushl             %eax
                        movl              -20(%ebp), %eax
                        pushl             %eax
                        movl              -16(%ebp), %eax
                        pushl             %eax
                        call              compiler_find_identifier
                        addl              $16, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_252_false
                        movl              $1, %eax
                        jmp               logical_not_252_true
logical_not_252_false:  movl              $0, %eax
logical_not_252_true:   cmpl              $0, %eax
                        jz                if_253_next
                                                            #         return False;
                        movl              $0, %eax
                        jmp               compiler_function_call_pointer_argument_end
                                                            #     }
                                                            # 
                                                            #     if (type[0] == Compiler_t_integer_array && scope[0] == Compiler_t_local) {
if_253_next:
if_253_end:             movl              $0, %eax
                        movl              %eax, %ebx
                        movl              -8(%ebp,%ebx,4), %eax
                        movl              %eax, -16(%ebp)
                        movl              $2, %eax
                        subl              -16(%ebp), %eax
                        je                compare_254_true
                        movl              $0, %eax
                        jmp               compare_254_false
compare_254_true:       movl              $1, %eax
compare_254_false:      cmpl              $0, %eax
                        jz                logical_and_255_false
                        movl              $0, %eax
                        movl              %eax, %ebx
                        movl              -12(%ebp,%ebx,4), %eax
                        movl              %eax, -16(%ebp)
                        movl              $1, %eax
                        subl              -16(%ebp), %eax
                        je                compare_256_true
                        movl              $0, %eax
                        jmp               compare_256_false
compare_256_true:       movl              $1, %eax
compare_256_false:      cmpl              $0, %eax
                        jz                logical_and_255_false
                        movl              $1, %eax
                        jmp               logical_and_255_true
logical_and_255_false:  movl              $0, %eax
logical_and_255_true:   cmpl              $0, %eax
                        jz                if_257_next
                                                            #         target_op_load_address(value[0], Target_t_local);
                        movl              $0, %eax
                        movl              %eax, %ebx
                        movl              -4(%ebp,%ebx,4), %eax
                        movl              %eax, -16(%ebp)
                        movl              $1, %eax
                        movl              %eax, -20(%ebp)
                        movl              -20(%ebp), %eax
                        pushl             %eax
                        movl              -16(%ebp), %eax
                        pushl             %eax
                        call              target_op_load_address
                        addl              $8, %esp
                                                            #         return True;
                        movl              $1, %eax
                        jmp               compiler_function_call_pointer_argument_end
                                                            #     }
                                                            # 
                                                            #     if (type[0] == Compiler_t_integer_array && scope[0] == Compiler_t_global) {
if_257_next:
if_257_end:             movl              $0, %eax
                        movl              %eax, %ebx
                        movl              -8(%ebp,%ebx,4), %eax
                        movl              %eax, -16(%ebp)
                        movl              $2, %eax
                        subl              -16(%ebp), %eax
                        je                compare_258_true
                        movl              $0, %eax
                        jmp               compare_258_false
compare_258_true:       movl              $1, %eax
compare_258_false:      cmpl              $0, %eax
                        jz                logical_and_259_false
                        movl              $0, %eax
                        movl              %eax, %ebx
                        movl              -12(%ebp,%ebx,4), %eax
                        movl              %eax, -16(%ebp)
                        movl              $0, %eax
                        subl              -16(%ebp), %eax
                        je                compare_260_true
                        movl              $0, %eax
                        jmp               compare_260_false
compare_260_true:       movl              $1, %eax
compare_260_false:      cmpl              $0, %eax
                        jz                logical_and_259_false
                        movl              $1, %eax
                        jmp               logical_and_259_true
logical_and_259_false:  movl              $0, %eax
logical_and_259_true:   cmpl              $0, %eax
                        jz                if_261_next
                                                            #         target_op_load_address(value[0], Target_t_global);
                        movl              $0, %eax
                        movl              %eax, %ebx
                        movl              -4(%ebp,%ebx,4), %eax
                        movl              %eax, -16(%ebp)
                        movl              $3, %eax
                        movl              %eax, -20(%ebp)
                        movl              -20(%ebp), %eax
                        pushl             %eax
                        movl              -16(%ebp), %eax
                        pushl             %eax
                        call              target_op_load_address
                        addl              $8, %esp
                                                            #         return True;
                        movl              $1, %eax
                        jmp               compiler_function_call_pointer_argument_end
                                                            #     }
                                                            # 
                                                            #     if (type[0] == Compiler_t_integer_pointer && scope[0] == Compiler_t_local) {
if_261_next:
if_261_end:             movl              $0, %eax
                        movl              %eax, %ebx
                        movl              -8(%ebp,%ebx,4), %eax
                        movl              %eax, -16(%ebp)
                        movl              $0, %eax
                        subl              -16(%ebp), %eax
                        je                compare_262_true
                        movl              $0, %eax
                        jmp               compare_262_false
compare_262_true:       movl              $1, %eax
compare_262_false:      cmpl              $0, %eax
                        jz                logical_and_263_false
                        movl              $0, %eax
                        movl              %eax, %ebx
                        movl              -12(%ebp,%ebx,4), %eax
                        movl              %eax, -16(%ebp)
                        movl              $1, %eax
                        subl              -16(%ebp), %eax
                        je                compare_264_true
                        movl              $0, %eax
                        jmp               compare_264_false
compare_264_true:       movl              $1, %eax
compare_264_false:      cmpl              $0, %eax
                        jz                logical_and_263_false
                        movl              $1, %eax
                        jmp               logical_and_263_true
logical_and_263_false:  movl              $0, %eax
logical_and_263_true:   cmpl              $0, %eax
                        jz                if_265_next
                                                            #         target_op_load(value[0], Target_t_local);
                        movl              $0, %eax
                        movl              %eax, %ebx
                        movl              -4(%ebp,%ebx,4), %eax
                        movl              %eax, -16(%ebp)
                        movl              $1, %eax
                        movl              %eax, -20(%ebp)
                        movl              -20(%ebp), %eax
                        pushl             %eax
                        movl              -16(%ebp), %eax
                        pushl             %eax
                        call              target_op_load
                        addl              $8, %esp
                                                            #         return True;
                        movl              $1, %eax
                        jmp               compiler_function_call_pointer_argument_end
                                                            #     }
                                                            # 
                                                            #     return False;
if_265_next:
if_265_end:             movl              $0, %eax
                        jmp               compiler_function_call_pointer_argument_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_function_call_argument_prepare(int out_argument_temp_local_cookie[]) {
compiler_function_call_pointer_argument_end:
                        leave
                        ret
compiler_function_call_argument_prepare: enter $36, $0
                                                            #     int temp_local;
                                                            # 
                                                            #     temp_local = compiler_allocate_temp_local();
                        call              compiler_allocate_temp_local
                        movl              %eax, -4(%ebp)
                                                            #     target_op_store(temp_local, Target_t_local);
                        movl              -4(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              $1, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              target_op_store
                        addl              $8, %esp
                                                            # 
                                                            #     out_argument_temp_local_cookie[0] = temp_local;
                        movl              $0, %eax
                        movl              %eax, -8(%ebp)
                        movl              -4(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              -8(%ebp), %eax
                        movl              %eax, %ebx
                        movl              -12(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        lea               (,%ebx,4), %eax
                        movl              %eax, -12(%ebp)
                        movl              8(%ebp), %eax
                        addl              -12(%ebp), %eax
                        movl              %eax, %ebx
                        movl              -8(%ebp), %eax
                        movl              %eax, (%ebx)
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_function_call_argument_pass(int argument_number, int argument_count, int argument_temp_local_cookie[]) {
compiler_function_call_argument_prepare_end:
                        leave
                        ret
compiler_function_call_argument_pass: enter $32, $0
                                                            # 
                                                            #     target_op_load(argument_temp_local_cookie[0], Target_t_local);
                        movl              $0, %eax
                        movl              %eax, %ebx
                        lea               (,%ebx,4), %eax
                        movl              %eax, -4(%ebp)
                        movl              16(%ebp), %eax
                        addl              -4(%ebp), %eax
                        movl              %eax, %ebx
                        movl              (%ebx), %eax
                        movl              %eax, -4(%ebp)
                        movl              $1, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_op_load
                        addl              $8, %esp
                                                            #     
                                                            #     target_op_pass_argument(argument_number,
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        movl              12(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              25238588+global, %eax
                        movl              %eax, -12(%ebp)
                        movl              $8, %eax
                        addl              -12(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_op_pass_argument
                        addl              $12, %esp
                                                            #                             argument_count,
                                                            #                             compiler_function_local_data_size + Compiler_max_temp_data_size);
                                                            # 
                                                            #     compiler_free_temp_local(argument_temp_local_cookie[0]);
                        movl              $0, %eax
                        movl              %eax, %ebx
                        lea               (,%ebx,4), %eax
                        movl              %eax, -4(%ebp)
                        movl              16(%ebp), %eax
                        addl              -4(%ebp), %eax
                        movl              %eax, %ebx
                        movl              (%ebx), %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              compiler_free_temp_local
                        addl              $4, %esp
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_function_call_execute(char function_name_cookie[], int function_argument_count) {
compiler_function_call_argument_pass_end:
                        leave
                        ret
compiler_function_call_execute: enter     $32, $0
                                                            # 
                                                            #     target_op_call_subroutine(function_name_cookie,
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        movl              12(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              25238588+global, %eax
                        movl              %eax, -12(%ebp)
                        movl              $8, %eax
                        addl              -12(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_op_call_subroutine
                        addl              $12, %esp
                                                            #                               function_argument_count,
                                                            #                               compiler_function_local_data_size + Compiler_max_temp_data_size);
                                                            # }
                                                            # 
                                                            # // ===========================================================================
                                                            # //
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_primary_expression_array_index() {
compiler_function_call_execute_end:
                        leave
                        ret
compiler_primary_expression_array_index: enter $32, $0
                                                            # 
                                                            #     target_op_loadx();
                        call              target_op_loadx
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_primary_expression_identifier(char identifier[]) {
compiler_primary_expression_array_index_end:
                        leave
                        ret
compiler_primary_expression_identifier: enter $48, $0
                                                            #     int value;
                                                            #     int type[1];
                                                            #     int scope[1];
                                                            #     int temp_array_index;
                                                            # 
                                                            #     value = compiler_must_find_identifier(identifier, type, scope);
                        movl              8(%ebp), %eax
                        movl              %eax, -20(%ebp)
                        lea               -8(%ebp), %eax
                        movl              %eax, -24(%ebp)
                        lea               -12(%ebp), %eax
                        movl              %eax, -28(%ebp)
                        movl              -28(%ebp), %eax
                        pushl             %eax
                        movl              -24(%ebp), %eax
                        pushl             %eax
                        movl              -20(%ebp), %eax
                        pushl             %eax
                        call              compiler_must_find_identifier
                        addl              $12, %esp
                        movl              %eax, -4(%ebp)
                                                            # 
                                                            #     if (type[0] == Compiler_t_integer_constant) {
                        movl              $0, %eax
                        movl              %eax, %ebx
                        movl              -8(%ebp,%ebx,4), %eax
                        movl              %eax, -20(%ebp)
                        movl              $3, %eax
                        subl              -20(%ebp), %eax
                        je                compare_266_true
                        movl              $0, %eax
                        jmp               compare_266_false
compare_266_true:       movl              $1, %eax
compare_266_false:      cmpl              $0, %eax
                        jz                if_267_next
                                                            #         target_op_load_constant(value);
                        movl              -4(%ebp), %eax
                        movl              %eax, -20(%ebp)
                        movl              -20(%ebp), %eax
                        pushl             %eax
                        call              target_op_load_constant
                        addl              $4, %esp
                                                            #         return;
                        jmp               compiler_primary_expression_identifier_end
                                                            #     }
                                                            # 
                                                            #     if (type[0] == Compiler_t_integer && scope[0] == Compiler_t_local) {
if_267_next:
if_267_end:             movl              $0, %eax
                        movl              %eax, %ebx
                        movl              -8(%ebp,%ebx,4), %eax
                        movl              %eax, -20(%ebp)
                        movl              $1, %eax
                        subl              -20(%ebp), %eax
                        je                compare_268_true
                        movl              $0, %eax
                        jmp               compare_268_false
compare_268_true:       movl              $1, %eax
compare_268_false:      cmpl              $0, %eax
                        jz                logical_and_269_false
                        movl              $0, %eax
                        movl              %eax, %ebx
                        movl              -12(%ebp,%ebx,4), %eax
                        movl              %eax, -20(%ebp)
                        movl              $1, %eax
                        subl              -20(%ebp), %eax
                        je                compare_270_true
                        movl              $0, %eax
                        jmp               compare_270_false
compare_270_true:       movl              $1, %eax
compare_270_false:      cmpl              $0, %eax
                        jz                logical_and_269_false
                        movl              $1, %eax
                        jmp               logical_and_269_true
logical_and_269_false:  movl              $0, %eax
logical_and_269_true:   cmpl              $0, %eax
                        jz                if_271_next
                                                            #         target_op_load(value, Target_t_local);
                        movl              -4(%ebp), %eax
                        movl              %eax, -20(%ebp)
                        movl              $1, %eax
                        movl              %eax, -24(%ebp)
                        movl              -24(%ebp), %eax
                        pushl             %eax
                        movl              -20(%ebp), %eax
                        pushl             %eax
                        call              target_op_load
                        addl              $8, %esp
                                                            #         return;
                        jmp               compiler_primary_expression_identifier_end
                                                            #     }
                                                            # 
                                                            #     if (type[0] == Compiler_t_integer && scope[0] == Compiler_t_global) {
if_271_next:
if_271_end:             movl              $0, %eax
                        movl              %eax, %ebx
                        movl              -8(%ebp,%ebx,4), %eax
                        movl              %eax, -20(%ebp)
                        movl              $1, %eax
                        subl              -20(%ebp), %eax
                        je                compare_272_true
                        movl              $0, %eax
                        jmp               compare_272_false
compare_272_true:       movl              $1, %eax
compare_272_false:      cmpl              $0, %eax
                        jz                logical_and_273_false
                        movl              $0, %eax
                        movl              %eax, %ebx
                        movl              -12(%ebp,%ebx,4), %eax
                        movl              %eax, -20(%ebp)
                        movl              $0, %eax
                        subl              -20(%ebp), %eax
                        je                compare_274_true
                        movl              $0, %eax
                        jmp               compare_274_false
compare_274_true:       movl              $1, %eax
compare_274_false:      cmpl              $0, %eax
                        jz                logical_and_273_false
                        movl              $1, %eax
                        jmp               logical_and_273_true
logical_and_273_false:  movl              $0, %eax
logical_and_273_true:   cmpl              $0, %eax
                        jz                if_275_next
                                                            #         target_op_load(value, Target_t_global);
                        movl              -4(%ebp), %eax
                        movl              %eax, -20(%ebp)
                        movl              $3, %eax
                        movl              %eax, -24(%ebp)
                        movl              -24(%ebp), %eax
                        pushl             %eax
                        movl              -20(%ebp), %eax
                        pushl             %eax
                        call              target_op_load
                        addl              $8, %esp
                                                            #         return;
                        jmp               compiler_primary_expression_identifier_end
                                                            #     }
                                                            # 
                                                            #     if (type[0] == Compiler_t_integer_array && scope[0] == Compiler_t_local) {
if_275_next:
if_275_end:             movl              $0, %eax
                        movl              %eax, %ebx
                        movl              -8(%ebp,%ebx,4), %eax
                        movl              %eax, -20(%ebp)
                        movl              $2, %eax
                        subl              -20(%ebp), %eax
                        je                compare_276_true
                        movl              $0, %eax
                        jmp               compare_276_false
compare_276_true:       movl              $1, %eax
compare_276_false:      cmpl              $0, %eax
                        jz                logical_and_277_false
                        movl              $0, %eax
                        movl              %eax, %ebx
                        movl              -12(%ebp,%ebx,4), %eax
                        movl              %eax, -20(%ebp)
                        movl              $1, %eax
                        subl              -20(%ebp), %eax
                        je                compare_278_true
                        movl              $0, %eax
                        jmp               compare_278_false
compare_278_true:       movl              $1, %eax
compare_278_false:      cmpl              $0, %eax
                        jz                logical_and_277_false
                        movl              $1, %eax
                        jmp               logical_and_277_true
logical_and_277_false:  movl              $0, %eax
logical_and_277_true:   cmpl              $0, %eax
                        jz                if_279_next
                                                            #         target_op_load(value, Target_t_local_ix);
                        movl              -4(%ebp), %eax
                        movl              %eax, -20(%ebp)
                        movl              $2, %eax
                        movl              %eax, -24(%ebp)
                        movl              -24(%ebp), %eax
                        pushl             %eax
                        movl              -20(%ebp), %eax
                        pushl             %eax
                        call              target_op_load
                        addl              $8, %esp
                                                            #         return;
                        jmp               compiler_primary_expression_identifier_end
                                                            #     }
                                                            # 
                                                            #     if (type[0] == Compiler_t_integer_array && scope[0] == Compiler_t_global) {
if_279_next:
if_279_end:             movl              $0, %eax
                        movl              %eax, %ebx
                        movl              -8(%ebp,%ebx,4), %eax
                        movl              %eax, -20(%ebp)
                        movl              $2, %eax
                        subl              -20(%ebp), %eax
                        je                compare_280_true
                        movl              $0, %eax
                        jmp               compare_280_false
compare_280_true:       movl              $1, %eax
compare_280_false:      cmpl              $0, %eax
                        jz                logical_and_281_false
                        movl              $0, %eax
                        movl              %eax, %ebx
                        movl              -12(%ebp,%ebx,4), %eax
                        movl              %eax, -20(%ebp)
                        movl              $0, %eax
                        subl              -20(%ebp), %eax
                        je                compare_282_true
                        movl              $0, %eax
                        jmp               compare_282_false
compare_282_true:       movl              $1, %eax
compare_282_false:      cmpl              $0, %eax
                        jz                logical_and_281_false
                        movl              $1, %eax
                        jmp               logical_and_281_true
logical_and_281_false:  movl              $0, %eax
logical_and_281_true:   cmpl              $0, %eax
                        jz                if_283_next
                                                            #         target_op_load(value, Target_t_global_ix);
                        movl              -4(%ebp), %eax
                        movl              %eax, -20(%ebp)
                        movl              $4, %eax
                        movl              %eax, -24(%ebp)
                        movl              -24(%ebp), %eax
                        pushl             %eax
                        movl              -20(%ebp), %eax
                        pushl             %eax
                        call              target_op_load
                        addl              $8, %esp
                                                            #         return;
                        jmp               compiler_primary_expression_identifier_end
                                                            #     }
                                                            # 
                                                            #     if (type[0] == Compiler_t_integer_pointer && scope[0] == Compiler_t_local) {
if_283_next:
if_283_end:             movl              $0, %eax
                        movl              %eax, %ebx
                        movl              -8(%ebp,%ebx,4), %eax
                        movl              %eax, -20(%ebp)
                        movl              $0, %eax
                        subl              -20(%ebp), %eax
                        je                compare_284_true
                        movl              $0, %eax
                        jmp               compare_284_false
compare_284_true:       movl              $1, %eax
compare_284_false:      cmpl              $0, %eax
                        jz                logical_and_285_false
                        movl              $0, %eax
                        movl              %eax, %ebx
                        movl              -12(%ebp,%ebx,4), %eax
                        movl              %eax, -20(%ebp)
                        movl              $1, %eax
                        subl              -20(%ebp), %eax
                        je                compare_286_true
                        movl              $0, %eax
                        jmp               compare_286_false
compare_286_true:       movl              $1, %eax
compare_286_false:      cmpl              $0, %eax
                        jz                logical_and_285_false
                        movl              $1, %eax
                        jmp               logical_and_285_true
logical_and_285_false:  movl              $0, %eax
logical_and_285_true:   cmpl              $0, %eax
                        jz                if_287_next
                                                            #         temp_array_index = compiler_allocate_temp_local();
                        call              compiler_allocate_temp_local
                        movl              %eax, -16(%ebp)
                                                            #         target_op_load_address(0, Target_t_ix);                 // temp_array_index = X
                        movl              $0, %eax
                        movl              %eax, -20(%ebp)
                        movl              $0, %eax
                        movl              %eax, -24(%ebp)
                        movl              -24(%ebp), %eax
                        pushl             %eax
                        movl              -20(%ebp), %eax
                        pushl             %eax
                        call              target_op_load_address
                        addl              $8, %esp
                                                            #         target_op_store(temp_array_index, Target_t_local);
                        movl              -16(%ebp), %eax
                        movl              %eax, -20(%ebp)
                        movl              $1, %eax
                        movl              %eax, -24(%ebp)
                        movl              -24(%ebp), %eax
                        pushl             %eax
                        movl              -20(%ebp), %eax
                        pushl             %eax
                        call              target_op_store
                        addl              $8, %esp
                                                            #         target_op_load(value, Target_t_local);                  // A = address held in local pointer variable
                        movl              -4(%ebp), %eax
                        movl              %eax, -20(%ebp)
                        movl              $1, %eax
                        movl              %eax, -24(%ebp)
                        movl              -24(%ebp), %eax
                        pushl             %eax
                        movl              -20(%ebp), %eax
                        pushl             %eax
                        call              target_op_load
                        addl              $8, %esp
                                                            #         target_op_add(temp_array_index, Target_t_local);        // X = A + temp_array_index
                        movl              -16(%ebp), %eax
                        movl              %eax, -20(%ebp)
                        movl              $1, %eax
                        movl              %eax, -24(%ebp)
                        movl              -24(%ebp), %eax
                        pushl             %eax
                        movl              -20(%ebp), %eax
                        pushl             %eax
                        call              target_op_add
                        addl              $8, %esp
                                                            #         target_op_loadx();
                        call              target_op_loadx
                                                            #         target_op_load(0, Target_t_indirect);                         // load (X)
                        movl              $0, %eax
                        movl              %eax, -20(%ebp)
                        movl              $5, %eax
                        movl              %eax, -24(%ebp)
                        movl              -24(%ebp), %eax
                        pushl             %eax
                        movl              -20(%ebp), %eax
                        pushl             %eax
                        call              target_op_load
                        addl              $8, %esp
                                                            #         compiler_free_temp_local(temp_array_index);
                        movl              -16(%ebp), %eax
                        movl              %eax, -20(%ebp)
                        movl              -20(%ebp), %eax
                        pushl             %eax
                        call              compiler_free_temp_local
                        addl              $4, %esp
                                                            #         return;
                        jmp               compiler_primary_expression_identifier_end
                                                            #     }
                                                            # 
                                                            #     error_compiler("identifier cannot be used in an expression");
if_287_next:
if_287_end:             lea               7860+string, %eax
                        movl              %eax, -20(%ebp)
                        movl              -20(%ebp), %eax
                        pushl             %eax
                        call              error_compiler
                        addl              $4, %esp
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_primary_expression_integer_constant(char integer_constant_str[]) {
compiler_primary_expression_identifier_end:
                        leave
                        ret
compiler_primary_expression_integer_constant: enter $36, $0
                                                            #     int integer_constant;
                                                            # 
                                                            #     integer_constant = str_to_int(integer_constant_str);
                        movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              str_to_int
                        addl              $4, %esp
                        movl              %eax, -4(%ebp)
                                                            #     target_op_load_constant(integer_constant);
                        movl              -4(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              target_op_load_constant
                        addl              $4, %esp
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_primary_expression_character_constant(int character_code) {
compiler_primary_expression_integer_constant_end:
                        leave
                        ret
compiler_primary_expression_character_constant: enter $32, $0
                                                            # 
                                                            #     target_op_load_constant(character_code);
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_op_load_constant
                        addl              $4, %esp
                                                            # }
                                                            # 
                                                            # // ===========================================================================
                                                            # //
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_unary_expression(char operator_text[]) {
compiler_primary_expression_character_constant_end:
                        leave
                        ret
compiler_unary_expression: enter          $1060, $0
                                                            #     int temp_local;
                                                            #     char label[Str_size];
                                                            # 
                                                            #     if (str_equals(operator_text, "+")) {
                        movl              8(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        lea               8032+string, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              str_equals
                        addl              $8, %esp
                        cmpl              $0, %eax
                        jz                if_288_next
                                                            #         return;
                        jmp               compiler_unary_expression_end
                                                            #     }
                                                            # 
                                                            #     if (str_equals(operator_text, "-")) {
if_288_next:
if_288_end:             movl              8(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        lea               8040+string, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              str_equals
                        addl              $8, %esp
                        cmpl              $0, %eax
                        jz                if_289_next
                                                            #         temp_local = compiler_allocate_temp_local();
                        call              compiler_allocate_temp_local
                        movl              %eax, -4(%ebp)
                                                            #         target_op_store(temp_local, Target_t_local);
                        movl              -4(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              $1, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              target_op_store
                        addl              $8, %esp
                                                            #         target_op_load_constant(0);
                        movl              $0, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              target_op_load_constant
                        addl              $4, %esp
                                                            #         target_op_subtract(temp_local, Target_t_local);
                        movl              -4(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              $1, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              target_op_subtract
                        addl              $8, %esp
                                                            #         compiler_free_temp_local(temp_local);
                        movl              -4(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              compiler_free_temp_local
                        addl              $4, %esp
                                                            #         return;
                        jmp               compiler_unary_expression_end
                                                            #     }
                                                            # 
                                                            #     if (str_equals(operator_text, "!")) {
if_289_next:
if_289_end:             movl              8(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        lea               8048+string, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              str_equals
                        addl              $8, %esp
                        cmpl              $0, %eax
                        jz                if_290_next
                                                            #         target_get_label("logical_not", label);
                        lea               8056+string, %eax
                        movl              %eax, -1032(%ebp)
                        lea               -1028(%ebp), %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              target_get_label
                        addl              $8, %esp
                                                            # 		target_begin_branch_block(label, "_true");
                        lea               -1028(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        lea               8104+string, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              target_begin_branch_block
                        addl              $8, %esp
                                                            # 		target_begin_branch_block(label, "_false");
                        lea               -1028(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        lea               8128+string, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              target_begin_branch_block
                        addl              $8, %esp
                                                            #         target_op_test();
                        call              target_op_test
                                                            #         target_op_branch_if_true(label, "_false");
                        lea               -1028(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        lea               8156+string, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              target_op_branch_if_true
                        addl              $8, %esp
                                                            #         target_op_load_constant(1);
                        movl              $1, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              target_op_load_constant
                        addl              $4, %esp
                                                            #         target_op_branch(label, "_true");
                        lea               -1028(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        lea               8184+string, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              target_op_branch
                        addl              $8, %esp
                                                            #         target_end_branch_block(label, "_false");
                        lea               -1028(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        lea               8208+string, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              target_end_branch_block
                        addl              $8, %esp
                                                            #         target_op_load_constant(0);
                        movl              $0, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              target_op_load_constant
                        addl              $4, %esp
                                                            #         target_end_branch_block(label, "_true");
                        lea               -1028(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        lea               8236+string, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              target_end_branch_block
                        addl              $8, %esp
                                                            #         return;
                        jmp               compiler_unary_expression_end
                                                            #     }
                                                            # 
                                                            #     error_internal();
if_290_next:
if_290_end:             call              error_internal
                                                            # }
                                                            # 
                                                            # // ===========================================================================
                                                            # //
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_multiplicative_expression_sequence_begin() {
compiler_unary_expression_end:
                        leave
                        ret
compiler_multiplicative_expression_sequence_begin: enter $36, $0
                                                            #     int temp_left_cookie;
                                                            # 
                                                            #     temp_left_cookie = compiler_allocate_temp_local();
                        call              compiler_allocate_temp_local
                        movl              %eax, -4(%ebp)
                                                            #     target_op_store(temp_left_cookie, Target_t_local);
                        movl              -4(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              $1, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              target_op_store
                        addl              $8, %esp
                                                            # 
                                                            #     return temp_left_cookie;
                        movl              -4(%ebp), %eax
                        jmp               compiler_multiplicative_expression_sequence_begin_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_multiplicative_expression_sequence_end(char operator_text[], int temp_left_cookie) {
compiler_multiplicative_expression_sequence_begin_end:
                        leave
                        ret
compiler_multiplicative_expression_sequence_end: enter $36, $0
                                                            #     int temp_right;
                                                            # 
                                                            #     if (str_equals(operator_text, "*")) {
                        movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        lea               8260+string, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              str_equals
                        addl              $8, %esp
                        cmpl              $0, %eax
                        jz                if_291_next
                                                            #         target_op_multiply(temp_left_cookie, Target_t_local);
                        movl              12(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              $1, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              target_op_multiply
                        addl              $8, %esp
                                                            #         compiler_free_temp_local(temp_left_cookie);
                        movl              12(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              compiler_free_temp_local
                        addl              $4, %esp
                                                            #         return;
                        jmp               compiler_multiplicative_expression_sequence_end_end
                                                            #     }
                                                            # 
                                                            #     if (str_equals(operator_text, "/")) {
if_291_next:
if_291_end:             movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        lea               8268+string, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              str_equals
                        addl              $8, %esp
                        cmpl              $0, %eax
                        jz                if_292_next
                                                            #         temp_right = compiler_allocate_temp_local();
                        call              compiler_allocate_temp_local
                        movl              %eax, -4(%ebp)
                                                            #         target_op_store(temp_right, Target_t_local);
                        movl              -4(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              $1, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              target_op_store
                        addl              $8, %esp
                                                            #         target_op_load(temp_left_cookie, Target_t_local);
                        movl              12(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              $1, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              target_op_load
                        addl              $8, %esp
                                                            #         target_op_divide(temp_right, Target_t_local);
                        movl              -4(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              $1, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              target_op_divide
                        addl              $8, %esp
                                                            #         compiler_free_temp_local(temp_right);
                        movl              -4(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              compiler_free_temp_local
                        addl              $4, %esp
                                                            #         compiler_free_temp_local(temp_left_cookie);
                        movl              12(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              compiler_free_temp_local
                        addl              $4, %esp
                                                            #         return;
                        jmp               compiler_multiplicative_expression_sequence_end_end
                                                            #     }
                                                            # 
                                                            #     error_internal();
if_292_next:
if_292_end:             call              error_internal
                                                            # }
                                                            # 
                                                            # // ===========================================================================
                                                            # //
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_additive_expression_sequence_begin() {
compiler_multiplicative_expression_sequence_end_end:
                        leave
                        ret
compiler_additive_expression_sequence_begin: enter $36, $0
                                                            #     int temp_left_cookie;
                                                            # 
                                                            #     temp_left_cookie = compiler_allocate_temp_local();
                        call              compiler_allocate_temp_local
                        movl              %eax, -4(%ebp)
                                                            #     target_op_store(temp_left_cookie, Target_t_local);
                        movl              -4(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              $1, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              target_op_store
                        addl              $8, %esp
                                                            # 
                                                            #     return temp_left_cookie;
                        movl              -4(%ebp), %eax
                        jmp               compiler_additive_expression_sequence_begin_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_additive_expression_sequence_end(char operator_text[], int temp_left_cookie) {
compiler_additive_expression_sequence_begin_end:
                        leave
                        ret
compiler_additive_expression_sequence_end: enter $36, $0
                                                            #     int temp_right;
                                                            # 
                                                            #     if (str_equals(operator_text, "+")) {
                        movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        lea               8276+string, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              str_equals
                        addl              $8, %esp
                        cmpl              $0, %eax
                        jz                if_293_next
                                                            #         target_op_add(temp_left_cookie, Target_t_local);
                        movl              12(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              $1, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              target_op_add
                        addl              $8, %esp
                                                            #         compiler_free_temp_local(temp_left_cookie);
                        movl              12(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              compiler_free_temp_local
                        addl              $4, %esp
                                                            #         return;
                        jmp               compiler_additive_expression_sequence_end_end
                                                            #     }
                                                            # 
                                                            #     if (str_equals(operator_text, "-")) {
if_293_next:
if_293_end:             movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        lea               8284+string, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              str_equals
                        addl              $8, %esp
                        cmpl              $0, %eax
                        jz                if_294_next
                                                            #         temp_right = compiler_allocate_temp_local();
                        call              compiler_allocate_temp_local
                        movl              %eax, -4(%ebp)
                                                            #         target_op_store(temp_right, Target_t_local);
                        movl              -4(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              $1, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              target_op_store
                        addl              $8, %esp
                                                            #         target_op_load(temp_left_cookie, Target_t_local);
                        movl              12(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              $1, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              target_op_load
                        addl              $8, %esp
                                                            #         target_op_subtract(temp_right, Target_t_local);
                        movl              -4(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              $1, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              target_op_subtract
                        addl              $8, %esp
                                                            #         compiler_free_temp_local(temp_right);
                        movl              -4(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              compiler_free_temp_local
                        addl              $4, %esp
                                                            #         compiler_free_temp_local(temp_left_cookie);
                        movl              12(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              compiler_free_temp_local
                        addl              $4, %esp
                                                            #         return;
                        jmp               compiler_additive_expression_sequence_end_end
                                                            #     }
                                                            # 
                                                            #     error_internal();
if_294_next:
if_294_end:             call              error_internal
                                                            # }
                                                            # 
                                                            # // ===========================================================================
                                                            # //
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_relational_or_equality_expression_sequence_begin() {
compiler_additive_expression_sequence_end_end:
                        leave
                        ret
compiler_relational_or_equality_expression_sequence_begin: enter $36, $0
                                                            #     int temp_left_cookie;
                                                            # 
                                                            #     temp_left_cookie = compiler_allocate_temp_local();
                        call              compiler_allocate_temp_local
                        movl              %eax, -4(%ebp)
                                                            #     target_op_store(temp_left_cookie, Target_t_local);
                        movl              -4(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              $1, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              target_op_store
                        addl              $8, %esp
                                                            # 
                                                            #     return temp_left_cookie;
                        movl              -4(%ebp), %eax
                        jmp               compiler_relational_or_equality_expression_sequence_begin_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_relational_or_equality_expression_sequence_end(char operator_text[], int temp_left_cookie) {
compiler_relational_or_equality_expression_sequence_begin_end:
                        leave
                        ret
compiler_relational_or_equality_expression_sequence_end: enter $1056, $0
                                                            #     char label[Str_size];
                                                            # 
                                                            #     target_get_label("compare", label);
                        lea               8292+string, %eax
                        movl              %eax, -1028(%ebp)
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_get_label
                        addl              $8, %esp
                                                            # 
                                                            #     target_op_subtract(temp_left_cookie, Target_t_local);
                        movl              12(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        movl              $1, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_op_subtract
                        addl              $8, %esp
                                                            #     compiler_free_temp_local(temp_left_cookie);
                        movl              12(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              compiler_free_temp_local
                        addl              $4, %esp
                                                            # 
                                                            # 	target_begin_branch_block(label, "_false");
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        lea               8324+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_begin_branch_block
                        addl              $8, %esp
                                                            # 	target_begin_branch_block(label, "_true");
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        lea               8352+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_begin_branch_block
                        addl              $8, %esp
                                                            # 
                                                            #     if (str_equals(operator_text, "==")) {
                        movl              8(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        lea               8376+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              str_equals
                        addl              $8, %esp
                        cmpl              $0, %eax
                        jz                if_295_next
                                                            #         target_op_branch_if_equals(label, "_true");
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        lea               8388+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_op_branch_if_equals
                        addl              $8, %esp
                                                            #     }
                                                            #     else if (str_equals(operator_text, "!=")) {
                        jmp               if_295_end
if_295_next:            movl              8(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        lea               8412+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              str_equals
                        addl              $8, %esp
                        cmpl              $0, %eax
                        jz                if_296_next
                                                            #         target_op_branch_if_not_equals(label, "_true");
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        lea               8424+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_op_branch_if_not_equals
                        addl              $8, %esp
                                                            #     }
                                                            #     else if (str_equals(operator_text, "<")) {
                        jmp               if_296_end
if_296_next:            movl              8(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        lea               8448+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              str_equals
                        addl              $8, %esp
                        cmpl              $0, %eax
                        jz                if_297_next
                                                            #         target_op_branch_if_less(label, "_true");
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        lea               8456+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_op_branch_if_less
                        addl              $8, %esp
                                                            #     }
                                                            #     else if (str_equals(operator_text, "<=")) {
                        jmp               if_297_end
if_297_next:            movl              8(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        lea               8480+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              str_equals
                        addl              $8, %esp
                        cmpl              $0, %eax
                        jz                if_298_next
                                                            #         target_op_branch_if_less(label, "_true");
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        lea               8492+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_op_branch_if_less
                        addl              $8, %esp
                                                            #         target_op_branch_if_equals(label, "_true");
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        lea               8516+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_op_branch_if_equals
                        addl              $8, %esp
                                                            #     }
                                                            #     else if (str_equals(operator_text, ">")) {
                        jmp               if_298_end
if_298_next:            movl              8(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        lea               8540+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              str_equals
                        addl              $8, %esp
                        cmpl              $0, %eax
                        jz                if_299_next
                                                            #         target_op_branch_if_greater(label, "_true");
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        lea               8548+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_op_branch_if_greater
                        addl              $8, %esp
                                                            #     }
                                                            #     else if (str_equals(operator_text, ">=")) {
                        jmp               if_299_end
if_299_next:            movl              8(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        lea               8572+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              str_equals
                        addl              $8, %esp
                        cmpl              $0, %eax
                        jz                if_300_next
                                                            #         target_op_branch_if_greater(label, "_true");
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        lea               8584+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_op_branch_if_greater
                        addl              $8, %esp
                                                            #         target_op_branch_if_equals(label, "_true");
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        lea               8608+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_op_branch_if_equals
                        addl              $8, %esp
                                                            #     }
                                                            #     else {
                        jmp               if_300_end
                                                            #         error_internal();
if_300_next:            call              error_internal
                                                            #     }
                                                            # 
                                                            #     target_op_load_constant(0);
if_300_end:
if_299_end:
if_298_end:
if_297_end:
if_296_end:
if_295_end:             movl              $0, %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_op_load_constant
                        addl              $4, %esp
                                                            #     target_op_branch(label, "_false");
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        lea               8632+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_op_branch
                        addl              $8, %esp
                                                            #     target_end_branch_block(label, "_true");
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        lea               8660+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_end_branch_block
                        addl              $8, %esp
                                                            #     target_op_load_constant(1);
                        movl              $1, %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_op_load_constant
                        addl              $4, %esp
                                                            #     target_end_branch_block(label, "_false");
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        lea               8684+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              target_end_branch_block
                        addl              $8, %esp
                                                            # }
                                                            # 
                                                            # // ===========================================================================
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_logical_and_expression_begin(char out_label_and[]) {
compiler_relational_or_equality_expression_sequence_end_end:
                        leave
                        ret
compiler_logical_and_expression_begin: enter $32, $0
                                                            # 
                                                            #     target_get_label("logical_and", out_label_and);
                        lea               8712+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_get_label
                        addl              $8, %esp
                                                            # 	target_begin_branch_block(out_label_and, "_true");
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        lea               8760+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_begin_branch_block
                        addl              $8, %esp
                                                            # 	target_begin_branch_block(out_label_and, "_false");
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        lea               8784+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_begin_branch_block
                        addl              $8, %esp
                                                            # 
                                                            #     target_op_test();
                        call              target_op_test
                                                            #     target_op_branch_if_false(out_label_and, "_false");
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        lea               8812+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_op_branch_if_false
                        addl              $8, %esp
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_logical_and_switch_sequence(char label_and[]) {
compiler_logical_and_expression_begin_end:
                        leave
                        ret
compiler_logical_and_switch_sequence: enter $32, $0
                                                            # 
                                                            #     target_op_test();
                        call              target_op_test
                                                            #     target_op_branch_if_false(label_and, "_false");
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        lea               8840+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_op_branch_if_false
                        addl              $8, %esp
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_logical_and_expression_end(char label_and[]) {
compiler_logical_and_switch_sequence_end:
                        leave
                        ret
compiler_logical_and_expression_end: enter $32, $0
                                                            # 
                                                            #     target_op_load_constant(1);
                        movl              $1, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_op_load_constant
                        addl              $4, %esp
                                                            #     target_op_branch(label_and, "_true");
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        lea               8868+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_op_branch
                        addl              $8, %esp
                                                            #     target_end_branch_block(label_and, "_false");
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        lea               8892+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_end_branch_block
                        addl              $8, %esp
                                                            #     target_op_load_constant(0);
                        movl              $0, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_op_load_constant
                        addl              $4, %esp
                                                            #     target_end_branch_block(label_and, "_true");
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        lea               8920+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_end_branch_block
                        addl              $8, %esp
                                                            # }
                                                            # 
                                                            # // ===========================================================================
                                                            # //
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_logical_or_expression_begin(char out_label_or[]) {
compiler_logical_and_expression_end_end:
                        leave
                        ret
compiler_logical_or_expression_begin: enter $32, $0
                                                            # 
                                                            #     target_get_label("logical_or", out_label_or);
                        lea               8944+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_get_label
                        addl              $8, %esp
                                                            # 	target_begin_branch_block(out_label_or, "_false");
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        lea               8988+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_begin_branch_block
                        addl              $8, %esp
                                                            # 	target_begin_branch_block(out_label_or, "_true");
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        lea               9016+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_begin_branch_block
                        addl              $8, %esp
                                                            # 
                                                            # 
                                                            #     target_op_test();
                        call              target_op_test
                                                            #     target_op_branch_if_true(out_label_or, "_true");
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        lea               9040+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_op_branch_if_true
                        addl              $8, %esp
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_logical_or_switch_sequence(char label_or[]) {
compiler_logical_or_expression_begin_end:
                        leave
                        ret
compiler_logical_or_switch_sequence: enter $32, $0
                                                            # 
                                                            #     target_op_test();
                        call              target_op_test
                                                            #     target_op_branch_if_true(label_or, "_true");
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        lea               9064+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_op_branch_if_true
                        addl              $8, %esp
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_logical_or_expression_end(char label_or[]) {
compiler_logical_or_switch_sequence_end:
                        leave
                        ret
compiler_logical_or_expression_end: enter $32, $0
                                                            # 
                                                            #     target_op_load_constant(0);
                        movl              $0, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_op_load_constant
                        addl              $4, %esp
                                                            #     target_op_branch(label_or, "_false");
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        lea               9088+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_op_branch
                        addl              $8, %esp
                                                            #     target_end_branch_block(label_or, "_true");
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        lea               9116+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_end_branch_block
                        addl              $8, %esp
                                                            #     target_op_load_constant(1);
                        movl              $1, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_op_load_constant
                        addl              $4, %esp
                                                            #     target_end_branch_block(label_or, "_false");
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        lea               9140+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_end_branch_block
                        addl              $8, %esp
                                                            # }
                                                            # 
                                                            # // ===========================================================================
                                                            # //
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_return_statement() {
compiler_logical_or_expression_end_end:
                        leave
                        ret
compiler_return_statement: enter          $32, $0
                                                            # 
                                                            #     target_op_branch(compiler_function_name, "_end");
                        lea               25237560+global, %eax
                        movl              %eax, -4(%ebp)
                        lea               9168+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_op_branch
                        addl              $8, %esp
                                                            # }
                                                            # 
                                                            # // ===========================================================================
                                                            # //
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_assignment_statement(char variable_name[]) {
compiler_return_statement_end:
                        leave
                        ret
compiler_assignment_statement: enter      $52, $0
                                                            #     int value;
                                                            #     int type[1];
                                                            #     int scope[1];
                                                            #     int temp_rvalue;
                                                            #     int temp_array_index;
                                                            # 
                                                            #     value = compiler_must_find_identifier(variable_name, type, scope);
                        movl              8(%ebp), %eax
                        movl              %eax, -24(%ebp)
                        lea               -8(%ebp), %eax
                        movl              %eax, -28(%ebp)
                        lea               -12(%ebp), %eax
                        movl              %eax, -32(%ebp)
                        movl              -32(%ebp), %eax
                        pushl             %eax
                        movl              -28(%ebp), %eax
                        pushl             %eax
                        movl              -24(%ebp), %eax
                        pushl             %eax
                        call              compiler_must_find_identifier
                        addl              $12, %esp
                        movl              %eax, -4(%ebp)
                                                            # 
                                                            #     if (type[0] == Compiler_t_integer && scope[0] == Compiler_t_global) {
                        movl              $0, %eax
                        movl              %eax, %ebx
                        movl              -8(%ebp,%ebx,4), %eax
                        movl              %eax, -24(%ebp)
                        movl              $1, %eax
                        subl              -24(%ebp), %eax
                        je                compare_301_true
                        movl              $0, %eax
                        jmp               compare_301_false
compare_301_true:       movl              $1, %eax
compare_301_false:      cmpl              $0, %eax
                        jz                logical_and_302_false
                        movl              $0, %eax
                        movl              %eax, %ebx
                        movl              -12(%ebp,%ebx,4), %eax
                        movl              %eax, -24(%ebp)
                        movl              $0, %eax
                        subl              -24(%ebp), %eax
                        je                compare_303_true
                        movl              $0, %eax
                        jmp               compare_303_false
compare_303_true:       movl              $1, %eax
compare_303_false:      cmpl              $0, %eax
                        jz                logical_and_302_false
                        movl              $1, %eax
                        jmp               logical_and_302_true
logical_and_302_false:  movl              $0, %eax
logical_and_302_true:   cmpl              $0, %eax
                        jz                if_304_next
                                                            #         target_op_store(value, Target_t_global);
                        movl              -4(%ebp), %eax
                        movl              %eax, -24(%ebp)
                        movl              $3, %eax
                        movl              %eax, -28(%ebp)
                        movl              -28(%ebp), %eax
                        pushl             %eax
                        movl              -24(%ebp), %eax
                        pushl             %eax
                        call              target_op_store
                        addl              $8, %esp
                                                            #         return;
                        jmp               compiler_assignment_statement_end
                                                            #     }
                                                            # 
                                                            #     if (type[0] == Compiler_t_integer && scope[0] == Compiler_t_local) {
if_304_next:
if_304_end:             movl              $0, %eax
                        movl              %eax, %ebx
                        movl              -8(%ebp,%ebx,4), %eax
                        movl              %eax, -24(%ebp)
                        movl              $1, %eax
                        subl              -24(%ebp), %eax
                        je                compare_305_true
                        movl              $0, %eax
                        jmp               compare_305_false
compare_305_true:       movl              $1, %eax
compare_305_false:      cmpl              $0, %eax
                        jz                logical_and_306_false
                        movl              $0, %eax
                        movl              %eax, %ebx
                        movl              -12(%ebp,%ebx,4), %eax
                        movl              %eax, -24(%ebp)
                        movl              $1, %eax
                        subl              -24(%ebp), %eax
                        je                compare_307_true
                        movl              $0, %eax
                        jmp               compare_307_false
compare_307_true:       movl              $1, %eax
compare_307_false:      cmpl              $0, %eax
                        jz                logical_and_306_false
                        movl              $1, %eax
                        jmp               logical_and_306_true
logical_and_306_false:  movl              $0, %eax
logical_and_306_true:   cmpl              $0, %eax
                        jz                if_308_next
                                                            #         target_op_store(value, Target_t_local);
                        movl              -4(%ebp), %eax
                        movl              %eax, -24(%ebp)
                        movl              $1, %eax
                        movl              %eax, -28(%ebp)
                        movl              -28(%ebp), %eax
                        pushl             %eax
                        movl              -24(%ebp), %eax
                        pushl             %eax
                        call              target_op_store
                        addl              $8, %esp
                                                            #         return;
                        jmp               compiler_assignment_statement_end
                                                            #     }
                                                            # 
                                                            #     if (type[0] == Compiler_t_integer_array && scope[0] == Compiler_t_global) {
if_308_next:
if_308_end:             movl              $0, %eax
                        movl              %eax, %ebx
                        movl              -8(%ebp,%ebx,4), %eax
                        movl              %eax, -24(%ebp)
                        movl              $2, %eax
                        subl              -24(%ebp), %eax
                        je                compare_309_true
                        movl              $0, %eax
                        jmp               compare_309_false
compare_309_true:       movl              $1, %eax
compare_309_false:      cmpl              $0, %eax
                        jz                logical_and_310_false
                        movl              $0, %eax
                        movl              %eax, %ebx
                        movl              -12(%ebp,%ebx,4), %eax
                        movl              %eax, -24(%ebp)
                        movl              $0, %eax
                        subl              -24(%ebp), %eax
                        je                compare_311_true
                        movl              $0, %eax
                        jmp               compare_311_false
compare_311_true:       movl              $1, %eax
compare_311_false:      cmpl              $0, %eax
                        jz                logical_and_310_false
                        movl              $1, %eax
                        jmp               logical_and_310_true
logical_and_310_false:  movl              $0, %eax
logical_and_310_true:   cmpl              $0, %eax
                        jz                if_312_next
                                                            #         target_op_store(value, Target_t_global_ix);
                        movl              -4(%ebp), %eax
                        movl              %eax, -24(%ebp)
                        movl              $4, %eax
                        movl              %eax, -28(%ebp)
                        movl              -28(%ebp), %eax
                        pushl             %eax
                        movl              -24(%ebp), %eax
                        pushl             %eax
                        call              target_op_store
                        addl              $8, %esp
                                                            #         return;
                        jmp               compiler_assignment_statement_end
                                                            #     }
                                                            # 
                                                            #     if (type[0] == Compiler_t_integer_array && scope[0] == Compiler_t_local) {
if_312_next:
if_312_end:             movl              $0, %eax
                        movl              %eax, %ebx
                        movl              -8(%ebp,%ebx,4), %eax
                        movl              %eax, -24(%ebp)
                        movl              $2, %eax
                        subl              -24(%ebp), %eax
                        je                compare_313_true
                        movl              $0, %eax
                        jmp               compare_313_false
compare_313_true:       movl              $1, %eax
compare_313_false:      cmpl              $0, %eax
                        jz                logical_and_314_false
                        movl              $0, %eax
                        movl              %eax, %ebx
                        movl              -12(%ebp,%ebx,4), %eax
                        movl              %eax, -24(%ebp)
                        movl              $1, %eax
                        subl              -24(%ebp), %eax
                        je                compare_315_true
                        movl              $0, %eax
                        jmp               compare_315_false
compare_315_true:       movl              $1, %eax
compare_315_false:      cmpl              $0, %eax
                        jz                logical_and_314_false
                        movl              $1, %eax
                        jmp               logical_and_314_true
logical_and_314_false:  movl              $0, %eax
logical_and_314_true:   cmpl              $0, %eax
                        jz                if_316_next
                                                            #         target_op_store(value, Target_t_local_ix);
                        movl              -4(%ebp), %eax
                        movl              %eax, -24(%ebp)
                        movl              $2, %eax
                        movl              %eax, -28(%ebp)
                        movl              -28(%ebp), %eax
                        pushl             %eax
                        movl              -24(%ebp), %eax
                        pushl             %eax
                        call              target_op_store
                        addl              $8, %esp
                                                            #         return;
                        jmp               compiler_assignment_statement_end
                                                            #     }
                                                            # 
                                                            #     if (type[0] == Compiler_t_integer_pointer && scope[0] == Compiler_t_local) {
if_316_next:
if_316_end:             movl              $0, %eax
                        movl              %eax, %ebx
                        movl              -8(%ebp,%ebx,4), %eax
                        movl              %eax, -24(%ebp)
                        movl              $0, %eax
                        subl              -24(%ebp), %eax
                        je                compare_317_true
                        movl              $0, %eax
                        jmp               compare_317_false
compare_317_true:       movl              $1, %eax
compare_317_false:      cmpl              $0, %eax
                        jz                logical_and_318_false
                        movl              $0, %eax
                        movl              %eax, %ebx
                        movl              -12(%ebp,%ebx,4), %eax
                        movl              %eax, -24(%ebp)
                        movl              $1, %eax
                        subl              -24(%ebp), %eax
                        je                compare_319_true
                        movl              $0, %eax
                        jmp               compare_319_false
compare_319_true:       movl              $1, %eax
compare_319_false:      cmpl              $0, %eax
                        jz                logical_and_318_false
                        movl              $1, %eax
                        jmp               logical_and_318_true
logical_and_318_false:  movl              $0, %eax
logical_and_318_true:   cmpl              $0, %eax
                        jz                if_320_next
                                                            #         temp_rvalue = compiler_allocate_temp_local();
                        call              compiler_allocate_temp_local
                        movl              %eax, -16(%ebp)
                                                            #         temp_array_index = compiler_allocate_temp_local();
                        call              compiler_allocate_temp_local
                        movl              %eax, -20(%ebp)
                                                            #         target_op_store(temp_rvalue, Target_t_local);       // temp_rvalue = A
                        movl              -16(%ebp), %eax
                        movl              %eax, -24(%ebp)
                        movl              $1, %eax
                        movl              %eax, -28(%ebp)
                        movl              -28(%ebp), %eax
                        pushl             %eax
                        movl              -24(%ebp), %eax
                        pushl             %eax
                        call              target_op_store
                        addl              $8, %esp
                                                            #         target_op_load_address(0, Target_t_ix);             // temp_array_index = X
                        movl              $0, %eax
                        movl              %eax, -24(%ebp)
                        movl              $0, %eax
                        movl              %eax, -28(%ebp)
                        movl              -28(%ebp), %eax
                        pushl             %eax
                        movl              -24(%ebp), %eax
                        pushl             %eax
                        call              target_op_load_address
                        addl              $8, %esp
                                                            #         target_op_store(temp_array_index, Target_t_local);
                        movl              -20(%ebp), %eax
                        movl              %eax, -24(%ebp)
                        movl              $1, %eax
                        movl              %eax, -28(%ebp)
                        movl              -28(%ebp), %eax
                        pushl             %eax
                        movl              -24(%ebp), %eax
                        pushl             %eax
                        call              target_op_store
                        addl              $8, %esp
                                                            #         target_op_load(value, Target_t_local);              // A = address held in local pointer variable
                        movl              -4(%ebp), %eax
                        movl              %eax, -24(%ebp)
                        movl              $1, %eax
                        movl              %eax, -28(%ebp)
                        movl              -28(%ebp), %eax
                        pushl             %eax
                        movl              -24(%ebp), %eax
                        pushl             %eax
                        call              target_op_load
                        addl              $8, %esp
                                                            #         target_op_add(temp_array_index, Target_t_local);    // X = A + temp_array_index
                        movl              -20(%ebp), %eax
                        movl              %eax, -24(%ebp)
                        movl              $1, %eax
                        movl              %eax, -28(%ebp)
                        movl              -28(%ebp), %eax
                        pushl             %eax
                        movl              -24(%ebp), %eax
                        pushl             %eax
                        call              target_op_add
                        addl              $8, %esp
                                                            #         target_op_loadx();                          
                        call              target_op_loadx
                                                            #         target_op_load(temp_rvalue, Target_t_local);        // (X) = temp_rvalue
                        movl              -16(%ebp), %eax
                        movl              %eax, -24(%ebp)
                        movl              $1, %eax
                        movl              %eax, -28(%ebp)
                        movl              -28(%ebp), %eax
                        pushl             %eax
                        movl              -24(%ebp), %eax
                        pushl             %eax
                        call              target_op_load
                        addl              $8, %esp
                                                            #         target_op_store(0, Target_t_indirect);
                        movl              $0, %eax
                        movl              %eax, -24(%ebp)
                        movl              $5, %eax
                        movl              %eax, -28(%ebp)
                        movl              -28(%ebp), %eax
                        pushl             %eax
                        movl              -24(%ebp), %eax
                        pushl             %eax
                        call              target_op_store
                        addl              $8, %esp
                                                            #         compiler_free_temp_local(temp_array_index);
                        movl              -20(%ebp), %eax
                        movl              %eax, -24(%ebp)
                        movl              -24(%ebp), %eax
                        pushl             %eax
                        call              compiler_free_temp_local
                        addl              $4, %esp
                                                            #         compiler_free_temp_local(temp_rvalue);
                        movl              -16(%ebp), %eax
                        movl              %eax, -24(%ebp)
                        movl              -24(%ebp), %eax
                        pushl             %eax
                        call              compiler_free_temp_local
                        addl              $4, %esp
                                                            #         return;
                        jmp               compiler_assignment_statement_end
                                                            #     }
                                                            # 
                                                            #     error_compiler("left hand side of assignment statement must be an integer identifier or array element");
if_320_next:
if_320_end:             lea               9188+string, %eax
                        movl              %eax, -24(%ebp)
                        movl              -24(%ebp), %eax
                        pushl             %eax
                        call              error_compiler
                        addl              $4, %esp
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_assignment_statement_array_begin(int out_temp_array_index_cookie[]) {
compiler_assignment_statement_end:
                        leave
                        ret
compiler_assignment_statement_array_begin: enter $32, $0
                                                            # 
                                                            #     out_temp_array_index_cookie[0] = compiler_allocate_temp_local();
                        movl              $0, %eax
                        movl              %eax, -4(%ebp)
                        call              compiler_allocate_temp_local
                        movl              %eax, -8(%ebp)
                        movl              -4(%ebp), %eax
                        movl              %eax, %ebx
                        movl              -8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        lea               (,%ebx,4), %eax
                        movl              %eax, -8(%ebp)
                        movl              8(%ebp), %eax
                        addl              -8(%ebp), %eax
                        movl              %eax, %ebx
                        movl              -4(%ebp), %eax
                        movl              %eax, (%ebx)
                                                            #     target_op_store(out_temp_array_index_cookie[0], Target_t_local);
                        movl              $0, %eax
                        movl              %eax, %ebx
                        lea               (,%ebx,4), %eax
                        movl              %eax, -4(%ebp)
                        movl              8(%ebp), %eax
                        addl              -4(%ebp), %eax
                        movl              %eax, %ebx
                        movl              (%ebx), %eax
                        movl              %eax, -4(%ebp)
                        movl              $1, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_op_store
                        addl              $8, %esp
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_assignment_statement_array_end(int temp_array_index_cookie[]) {
compiler_assignment_statement_array_begin_end:
                        leave
                        ret
compiler_assignment_statement_array_end: enter $36, $0
                                                            #     int temp_expression;
                                                            # 
                                                            #     temp_expression = compiler_allocate_temp_local();
                        call              compiler_allocate_temp_local
                        movl              %eax, -4(%ebp)
                                                            # 
                                                            #     target_op_store(temp_expression, Target_t_local);
                        movl              -4(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              $1, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              target_op_store
                        addl              $8, %esp
                                                            #     target_op_load(temp_array_index_cookie[0], Target_t_local);
                        movl              $0, %eax
                        movl              %eax, %ebx
                        lea               (,%ebx,4), %eax
                        movl              %eax, -8(%ebp)
                        movl              8(%ebp), %eax
                        addl              -8(%ebp), %eax
                        movl              %eax, %ebx
                        movl              (%ebx), %eax
                        movl              %eax, -8(%ebp)
                        movl              $1, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              target_op_load
                        addl              $8, %esp
                                                            #     target_op_loadx();
                        call              target_op_loadx
                                                            #     target_op_load(temp_expression, Target_t_local);
                        movl              -4(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              $1, %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              target_op_load
                        addl              $8, %esp
                                                            # 
                                                            #     compiler_free_temp_local(temp_expression);
                        movl              -4(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              compiler_free_temp_local
                        addl              $4, %esp
                                                            #     compiler_free_temp_local(temp_array_index_cookie[0]);
                        movl              $0, %eax
                        movl              %eax, %ebx
                        lea               (,%ebx,4), %eax
                        movl              %eax, -8(%ebp)
                        movl              8(%ebp), %eax
                        addl              -8(%ebp), %eax
                        movl              %eax, %ebx
                        movl              (%ebx), %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              compiler_free_temp_local
                        addl              $4, %esp
                                                            # }
                                                            # 
                                                            # // ===========================================================================
                                                            # //
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_while_statement_begin(char out_label_while[]) {
compiler_assignment_statement_array_end_end:
                        leave
                        ret
compiler_while_statement_begin: enter     $32, $0
                                                            # 
                                                            #     target_get_label("while", out_label_while);
                        lea               9532+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_get_label
                        addl              $8, %esp
                                                            # 	target_begin_branch_block(out_label_while, "_end");
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        lea               9556+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_begin_branch_block
                        addl              $8, %esp
                                                            #     target_begin_back_branch_block(out_label_while, "_test");
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        lea               9576+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_begin_back_branch_block
                        addl              $8, %esp
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_while_statement_end(char label_while[]) {
compiler_while_statement_begin_end:
                        leave
                        ret
compiler_while_statement_end: enter       $32, $0
                                                            # 
                                                            #     target_op_branch_back(label_while, "_test");
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        lea               9600+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_op_branch_back
                        addl              $8, %esp
                                                            # 	target_end_back_branch_block(label_while, "_test");
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        lea               9624+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_end_back_branch_block
                        addl              $8, %esp
                                                            #     target_end_branch_block(label_while, "_end");
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        lea               9648+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_end_branch_block
                        addl              $8, %esp
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_while_statement_test(char label_while[]) {
compiler_while_statement_end_end:
                        leave
                        ret
compiler_while_statement_test: enter      $32, $0
                                                            # 
                                                            #     target_op_test();
                        call              target_op_test
                                                            #     target_op_branch_if_false(label_while, "_end");
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        lea               9668+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_op_branch_if_false
                        addl              $8, %esp
                                                            # }
                                                            # 
                                                            # // ===========================================================================
                                                            # //
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_if_statement_test_fn(char out_label_if[]) {
compiler_while_statement_test_end:
                        leave
                        ret
compiler_if_statement_test_fn: enter      $32, $0
                                                            # 
                                                            #     target_get_label("if", out_label_if);
                        lea               9688+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_get_label
                        addl              $8, %esp
                                                            # 
                                                            #     target_op_test();
                        call              target_op_test
                                                            # 	target_begin_branch_block(out_label_if, "_end");
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        lea               9700+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_begin_branch_block
                        addl              $8, %esp
                                                            # 	target_begin_branch_block(out_label_if, "_next");
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        lea               9720+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_begin_branch_block
                        addl              $8, %esp
                                                            #     target_op_branch_if_false(out_label_if, "_next");
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        lea               9744+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_op_branch_if_false
                        addl              $8, %esp
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_if_statement_else_fn(char label_if[]) {
compiler_if_statement_test_fn_end:
                        leave
                        ret
compiler_if_statement_else_fn: enter      $32, $0
                                                            # 
                                                            #     target_op_branch(label_if, "_end");
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        lea               9768+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_op_branch
                        addl              $8, %esp
                                                            #     target_end_branch_block(label_if, "_next");
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        lea               9788+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_end_branch_block
                        addl              $8, %esp
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_if_statement_no_else_fn(char label_if[]) {
compiler_if_statement_else_fn_end:
                        leave
                        ret
compiler_if_statement_no_else_fn: enter   $32, $0
                                                            # 
                                                            #     target_end_branch_block(label_if, "_next");
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        lea               9812+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_end_branch_block
                        addl              $8, %esp
                                                            #     target_end_branch_block(label_if, "_end");
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        lea               9836+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_end_branch_block
                        addl              $8, %esp
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # compiler_if_statement_else_end_fn(char label_if[]) {
compiler_if_statement_no_else_fn_end:
                        leave
                        ret
compiler_if_statement_else_end_fn: enter  $32, $0
                                                            # 
                                                            #     target_end_branch_block(label_if, "_end");
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        lea               9856+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              target_end_branch_block
                        addl              $8, %esp
                                                            # }
                                                            # #ifndef _MSC_VER
                                                            # #line 2 "syntax.h"
                                                            # #endif
                                                            # 
                                                            # // C-Subset Syntax 
                                                            # //
                                                            # // program
                                                            # //            global-declaration-list
                                                            # //
                                                            # // global-declaration
                                                            # //            declaration
                                                            # //            function-definition
                                                            # //
                                                            # // global-declaration-list
                                                            # //            global-declaration global-declaration-list
                                                            # //            global-declaration
                                                            # //
                                                            # // function-definition
                                                            # //            identifier( function-argument-declaration-list ) function-compound-statement
                                                            # //            identifier( ) function-compound-statement
                                                            # //
                                                            # // function-compound-statement
                                                            # //            { local-declaration-list statement-list } 
                                                            # //            { statement-list } 
                                                            # //
                                                            # // declaration
                                                            # //            type-specifier identifier ;
                                                            # //            type-specifier identifier [ integer-constant ] ;
                                                            # //            type-specifier identifier [ identifier ] ;
                                                            # //            enum { enumerator-list } ;
                                                            # //
                                                            # // local-declaration-list
                                                            # //            declaration local-declaration-list
                                                            # //            declaration
                                                            # //
                                                            # // enumerator
                                                            # //            identifier = integer-constant
                                                            # //            identifier
                                                            # //
                                                            # // enumerator-list
                                                            # //            enumerator , enumerator-list
                                                            # //            enumerator
                                                            # //            
                                                            # // function-argument-declaration-list
                                                            # //            function-argument-declaration , function-argument-declaration-list
                                                            # //            function-argument-declaration
                                                            # //
                                                            # // function-argument-declaration
                                                            # //            type-specifier identifier
                                                            # //            type-specifier identifier []
                                                            # //
                                                            # // type-specifier
                                                            # //            int
                                                            # //            char
                                                            # //
                                                            # // statement
                                                            # //           if-statement
                                                            # //           while-statement
                                                            # //           compound-statement
                                                            # //           assignment-statement ;
                                                            # //           expression-statement ;
                                                            # //           return-statement ;
                                                            # //
                                                            # // statement-list
                                                            # //            statement statement-list
                                                            # //            statement
                                                            # //            
                                                            # // if-statement
                                                            # //            if ( expression ) statement else statement
                                                            # //            if ( expression ) statement
                                                            # //
                                                            # // while-statement
                                                            # //            while ( expression ) statement
                                                            # //
                                                            # // assignment-statement
                                                            # //            identifier = expression
                                                            # //            identifier [ expression ] = expression
                                                            # //            
                                                            # // expression-statement
                                                            # //           expression
                                                            # //
                                                            # // return-statement
                                                            # //            return expression
                                                            # //            return
                                                            # //
                                                            # // compound-statement
                                                            # //            { statement-list } 
                                                            # //
                                                            # // expression
                                                            # //            logical-or-expression
                                                            # //
                                                            # // logical-or-expression
                                                            # //            logical-and-expression logical-or-switch-sequence
                                                            # //            logical-and-expression
                                                            # //
                                                            # // logical-or-switch-sequence
                                                            # //            || logical-and-expression logical-or-switch-sequence
                                                            # //            || logical-and-expression
                                                            # //
                                                            # // logical-and-expression
                                                            # //            equality-expression logical-and-switch-sequence
                                                            # //            equality-expression
                                                            # //
                                                            # // logical-and-switch-sequence
                                                            # //            && equality-expression logical-and-switch-sequence
                                                            # //            && equality-expression
                                                            # //
                                                            # // equality-expression
                                                            # //            relational-expression equality-expression-sequence
                                                            # //            relational-expression
                                                            # //
                                                            # // equality-expression-sequence
                                                            # //            equality-operator-operator relational-expression equality-expression-sequence
                                                            # //            equality-operator-operator relational-expression
                                                            # //
                                                            # // equality-operator
                                                            # //            one-of == !=
                                                            # //
                                                            # // relational-expression
                                                            # //            additive-expression relational-expression-sequence
                                                            # //            additive-expression
                                                            # //
                                                            # // relational-expression-sequence
                                                            # //            relational-operator additive-expression relational-expression-sequence
                                                            # //            relational-operator additive-expression
                                                            # //
                                                            # // relational-operator
                                                            # //           one-of < <= > >=
                                                            # //
                                                            # // additive-expression
                                                            # //            multiplicative-expression additive-expression-sequence
                                                            # //            multiplicative-expression
                                                            # //
                                                            # // additive-expression-sequence
                                                            # //           additive-operator multiplicative-expression additive-expression-sequence
                                                            # //           additive-operator multiplicative-expression
                                                            # //
                                                            # // additive-operator
                                                            # //           one-of  + - 
                                                            # //            
                                                            # // multiplicative-expression
                                                            # //            unary-expression multiplicative-expression-sequence
                                                            # //            unary-expression
                                                            # //
                                                            # // multiplicative-expression-sequence
                                                            # //            multiplicative-operator unary-expression multiplicative-expression-sequence
                                                            # //            multiplicative-operator unary-expression
                                                            # //
                                                            # // multiplicative-operator
                                                            # //           one-of  * / 
                                                            # //
                                                            # // unary-expression
                                                            # //            unary-operator unary-expression
                                                            # //            primary-expression
                                                            # //            
                                                            # // unary-operator
                                                            # //            one of  ! + - 
                                                            # //
                                                            # // primary-expression
                                                            # //            built-in-function
                                                            # //            identifier ( function-call-argument-list )
                                                            # //            identifier [ expression ]
                                                            # //            identifier
                                                            # //            integer-constant
                                                            # //            character-constant
                                                            # //            ( expression )
                                                            # //
                                                            # // function-call-argument-list
                                                            # //            function-call-argument , function-call-argument-list
                                                            # //            function-call-argument
                                                            # //
                                                            # // function-call-argument
                                                            # //            string-literal
                                                            # //            pointer-identifier
                                                            # //            expression
                                                            # //
                                                            # // built-in-function
                                                            # //           fgetc ( stdin )
                                                            # //           fputc ( expression , stdout)
                                                            # //           fputc ( expression , stderr)
                                                            # //           exit  ( expression )
                                                            # //           debug ( expression )
                                                            # 
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # // built-in-function
                                                            # //           fgetc ( stdin )
                                                            # //           fputc ( expression , stdout)
                                                            # //           fputc ( expression , stderr)
                                                            # //           exit  ( expression )
                                                            # //           debug ( expression )
                                                            # //
                                                            # syntax_built_in_function() {
compiler_if_statement_else_end_fn_end:
                        leave
                        ret
syntax_built_in_function: enter           $32, $0
                                                            # 
                                                            #     // ----- fgetc  ( stdin )
                                                            #     //
                                                            #     if (token_advance_if("fgetc")) {
                        lea               9876+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jz                if_321_next
                                                            #         if (! (token_advance_if("(") && token_advance_if("stdin") && token_advance_if(")"))) {
                        lea               9900+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jz                logical_and_322_false
                        lea               9908+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jz                logical_and_322_false
                        lea               9932+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jz                logical_and_322_false
                        movl              $1, %eax
                        jmp               logical_and_322_true
logical_and_322_false:  movl              $0, %eax
logical_and_322_true:   cmpl              $0, %eax
                        jnz               logical_not_323_false
                        movl              $1, %eax
                        jmp               logical_not_323_true
logical_not_323_false:  movl              $0, %eax
logical_not_323_true:   cmpl              $0, %eax
                        jz                if_324_next
                                                            #             error_syntax("fgetc(stdin) expected");
                        lea               9940+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #         }
                                                            # 
                                                            #         compiler_built_in_function_fgetc();
if_324_next:
if_324_end:             call              compiler_built_in_function_fgetc
                                                            #         return True;
                        movl              $1, %eax
                        jmp               syntax_built_in_function_end
                                                            #     }
                                                            # 
                                                            #     // ----- fputc ( expression , stdout)
                                                            #     // ----- fputc ( expression , stderr)
                                                            #     //
                                                            #     if (token_advance_if("fputc")) {
if_321_next:
if_321_end:             lea               10028+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jz                if_325_next
                                                            # 
                                                            #         if (! token_advance_if("(")) {
                        lea               10052+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_326_false
                        movl              $1, %eax
                        jmp               logical_not_326_true
logical_not_326_false:  movl              $0, %eax
logical_not_326_true:   cmpl              $0, %eax
                        jz                if_327_next
                                                            #             error_syntax("opening parenthesis expected after fputc");
                        lea               10060+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #         }
                                                            # 
                                                            #         if (! syntax_expression()) {
if_327_next:
if_327_end:             call              syntax_expression
                        cmpl              $0, %eax
                        jnz               logical_not_328_false
                        movl              $1, %eax
                        jmp               logical_not_328_true
logical_not_328_false:  movl              $0, %eax
logical_not_328_true:   cmpl              $0, %eax
                        jz                if_329_next
                                                            #             error_syntax("expression expected after fputc opening parenthesis");
                        lea               10224+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #         }
                                                            # 
                                                            #         if (! token_advance_if(",")) {
if_329_next:
if_329_end:             lea               10432+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_330_false
                        movl              $1, %eax
                        jmp               logical_not_330_true
logical_not_330_false:  movl              $0, %eax
logical_not_330_true:   cmpl              $0, %eax
                        jz                if_331_next
                                                            #             error_syntax("fputc takes two arguments");
                        lea               10440+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #         }
                                                            # 
                                                            #         if (token_advance_if("stdout")) {
if_331_next:
if_331_end:             lea               10544+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jz                if_332_next
                                                            #             compiler_built_in_function_fputc_stdout();
                        call              compiler_built_in_function_fputc_stdout
                                                            #         }
                                                            #         else if (token_advance_if("stderr")) {
                        jmp               if_332_end
if_332_next:            lea               10572+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jz                if_333_next
                                                            #             compiler_built_in_function_fputc_stderr();
                        call              compiler_built_in_function_fputc_stderr
                                                            #         }
                                                            #         else {
                        jmp               if_333_end
                                                            #             error_syntax("second argument of fputc must be stdout or stderr");
if_333_next:            lea               10600+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #         }
                                                            # 
                                                            #         if (! token_advance_if(")")) {
if_333_end:
if_332_end:             lea               10800+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_334_false
                        movl              $1, %eax
                        jmp               logical_not_334_true
logical_not_334_false:  movl              $0, %eax
logical_not_334_true:   cmpl              $0, %eax
                        jz                if_335_next
                                                            #             error_syntax("closing parenthesis expected");
                        lea               10808+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #         }   
                                                            #             
                                                            #         return True;
if_335_next:
if_335_end:             movl              $1, %eax
                        jmp               syntax_built_in_function_end
                                                            #     }
                                                            # 
                                                            #     // ----- exit ( expression )
                                                            #     //
                                                            #     if (token_advance_if("exit")) {
if_325_next:
if_325_end:             lea               10924+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jz                if_336_next
                                                            # 
                                                            #         if (! token_advance_if("(")) {
                        lea               10944+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_337_false
                        movl              $1, %eax
                        jmp               logical_not_337_true
logical_not_337_false:  movl              $0, %eax
logical_not_337_true:   cmpl              $0, %eax
                        jz                if_338_next
                                                            #             error_syntax("opening parenthesis expected after exit");
                        lea               10952+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #         }
                                                            # 
                                                            #         if (! syntax_expression()) {
if_338_next:
if_338_end:             call              syntax_expression
                        cmpl              $0, %eax
                        jnz               logical_not_339_false
                        movl              $1, %eax
                        jmp               logical_not_339_true
logical_not_339_false:  movl              $0, %eax
logical_not_339_true:   cmpl              $0, %eax
                        jz                if_340_next
                                                            #             error_syntax("expression expected after exit opening parenthesis");
                        lea               11112+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #         }
                                                            # 
                                                            #         if (! token_advance_if(")")) {
if_340_next:
if_340_end:             lea               11316+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_341_false
                        movl              $1, %eax
                        jmp               logical_not_341_true
logical_not_341_false:  movl              $0, %eax
logical_not_341_true:   cmpl              $0, %eax
                        jz                if_342_next
                                                            #             error_syntax("closing parenthesis expected");
                        lea               11324+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #         }
                                                            # 
                                                            #         compiler_built_in_function_exit();
if_342_next:
if_342_end:             call              compiler_built_in_function_exit
                                                            #         return True;
                        movl              $1, %eax
                        jmp               syntax_built_in_function_end
                                                            #     }
                                                            # 
                                                            #     // ----- debug ( expression )
                                                            #     //
                                                            #     if (token_advance_if("debug")) {
if_336_next:
if_336_end:             lea               11440+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jz                if_343_next
                                                            # 
                                                            #         if (! token_advance_if("(")) {
                        lea               11464+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_344_false
                        movl              $1, %eax
                        jmp               logical_not_344_true
logical_not_344_false:  movl              $0, %eax
logical_not_344_true:   cmpl              $0, %eax
                        jz                if_345_next
                                                            #             error_syntax("opening parenthesis expected after debug");
                        lea               11472+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #         }
                                                            # 
                                                            #         if (! syntax_expression()) {
if_345_next:
if_345_end:             call              syntax_expression
                        cmpl              $0, %eax
                        jnz               logical_not_346_false
                        movl              $1, %eax
                        jmp               logical_not_346_true
logical_not_346_false:  movl              $0, %eax
logical_not_346_true:   cmpl              $0, %eax
                        jz                if_347_next
                                                            #             error_syntax("expression expected after debug opening parenthesis");
                        lea               11636+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #         }
                                                            # 
                                                            #         if (! token_advance_if(")")) {
if_347_next:
if_347_end:             lea               11844+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_348_false
                        movl              $1, %eax
                        jmp               logical_not_348_true
logical_not_348_false:  movl              $0, %eax
logical_not_348_true:   cmpl              $0, %eax
                        jz                if_349_next
                                                            #             error_syntax("closing parenthesis expected");
                        lea               11852+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #         }
                                                            # 
                                                            #         compiler_built_in_function_debug();
if_349_next:
if_349_end:             call              compiler_built_in_function_debug
                                                            #         return True;
                        movl              $1, %eax
                        jmp               syntax_built_in_function_end
                                                            #     }
                                                            # 
                                                            #     return False;
if_343_next:
if_343_end:             movl              $0, %eax
                        jmp               syntax_built_in_function_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # // function-call-argument
                                                            # //            string-literal
                                                            # //            pointer-identifier
                                                            # //            expression
                                                            # //
                                                            # syntax_function_call_argument() {
syntax_built_in_function_end:
                        leave
                        ret
syntax_function_call_argument: enter      $32, $0
                                                            # 
                                                            #     if (token_type_is(Token_t_string_literal)) {
                        movl              $3, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              token_type_is
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jz                if_350_next
                                                            #         compiler_function_call_string_literal_argument(token_text); // >>>>>>>>>>
                        lea               4197420+global, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              compiler_function_call_string_literal_argument
                        addl              $4, %esp
                                                            #         token_advance();
                        call              token_advance
                                                            #         return True;
                        movl              $1, %eax
                        jmp               syntax_function_call_argument_end
                                                            #     }
                                                            #     
                                                            #     // need to check symbol table to determine if identifier needs to be passed as a pointer
                                                            #     if (token_type_is(Token_t_identifier) && (! token_lookahead_text_is("["))) {
if_350_next:
if_350_end:             movl              $4, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              token_type_is
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jz                logical_and_351_false
                        lea               11968+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              token_lookahead_text_is
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_352_false
                        movl              $1, %eax
                        jmp               logical_not_352_true
logical_not_352_false:  movl              $0, %eax
logical_not_352_true:   cmpl              $0, %eax
                        jz                logical_and_351_false
                        movl              $1, %eax
                        jmp               logical_and_351_true
logical_and_351_false:  movl              $0, %eax
logical_and_351_true:   cmpl              $0, %eax
                        jz                if_353_next
                                                            #         if (compiler_function_call_pointer_argument(token_text)) { // >>>>>>>>>>
                        lea               4197420+global, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              compiler_function_call_pointer_argument
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jz                if_354_next
                                                            #             token_advance();
                        call              token_advance
                                                            #             return True;
                        movl              $1, %eax
                        jmp               syntax_function_call_argument_end
                                                            #         }
                                                            #     }
if_354_next:
                                                            # 
                                                            #     if (syntax_expression()) {
if_354_end:
if_353_next:
if_353_end:             call              syntax_expression
                        cmpl              $0, %eax
                        jz                if_355_next
                                                            #         return True;
                        movl              $1, %eax
                        jmp               syntax_function_call_argument_end
                                                            #     }
                                                            # 
                                                            #     return False;
if_355_next:
if_355_end:             movl              $0, %eax
                        jmp               syntax_function_call_argument_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # // function-call-argument-list
                                                            # //            function-call-argument , function-call-argument-list
                                                            # //            function-call-argument
                                                            # //
                                                            # syntax_function_call_argument_list(int argument_no, int function_argument_count[]) {
syntax_function_call_argument_end:
                        leave
                        ret
syntax_function_call_argument_list: enter $36, $0
                                                            #     int cookie[1];
                                                            # 
                                                            #     if (! syntax_function_call_argument()) {
                        call              syntax_function_call_argument
                        cmpl              $0, %eax
                        jnz               logical_not_356_false
                        movl              $1, %eax
                        jmp               logical_not_356_true
logical_not_356_false:  movl              $0, %eax
logical_not_356_true:   cmpl              $0, %eax
                        jz                if_357_next
                                                            #         return False;
                        movl              $0, %eax
                        jmp               syntax_function_call_argument_list_end
                                                            #     }
                                                            # 
                                                            #     function_argument_count[0] = function_argument_count[0] + 1;
if_357_next:
if_357_end:             movl              $0, %eax
                        movl              %eax, -8(%ebp)
                        movl              $0, %eax
                        movl              %eax, %ebx
                        lea               (,%ebx,4), %eax
                        movl              %eax, -12(%ebp)
                        movl              12(%ebp), %eax
                        addl              -12(%ebp), %eax
                        movl              %eax, %ebx
                        movl              (%ebx), %eax
                        movl              %eax, -12(%ebp)
                        movl              $1, %eax
                        addl              -12(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              -8(%ebp), %eax
                        movl              %eax, %ebx
                        movl              -12(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        lea               (,%ebx,4), %eax
                        movl              %eax, -12(%ebp)
                        movl              12(%ebp), %eax
                        addl              -12(%ebp), %eax
                        movl              %eax, %ebx
                        movl              -8(%ebp), %eax
                        movl              %eax, (%ebx)
                                                            # 
                                                            #     compiler_function_call_argument_prepare(cookie); // >>>>>>>>>>
                        lea               -4(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              compiler_function_call_argument_prepare
                        addl              $4, %esp
                                                            # 
                                                            #     if (token_advance_if(",")) {
                        lea               11976+string, %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jz                if_358_next
                                                            #         syntax_function_call_argument_list(argument_no + 1, function_argument_count);
                        movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              $1, %eax
                        addl              -8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              12(%ebp), %eax
                        movl              %eax, -12(%ebp)
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              syntax_function_call_argument_list
                        addl              $8, %esp
                                                            #     }
                                                            # 
                                                            #     compiler_function_call_argument_pass(argument_no + 1, function_argument_count[0], cookie); // >>>>>>>>>>
if_358_next:
if_358_end:             movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              $1, %eax
                        addl              -8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              $0, %eax
                        movl              %eax, %ebx
                        lea               (,%ebx,4), %eax
                        movl              %eax, -12(%ebp)
                        movl              12(%ebp), %eax
                        addl              -12(%ebp), %eax
                        movl              %eax, %ebx
                        movl              (%ebx), %eax
                        movl              %eax, -12(%ebp)
                        lea               -4(%ebp), %eax
                        movl              %eax, -16(%ebp)
                        movl              -16(%ebp), %eax
                        pushl             %eax
                        movl              -12(%ebp), %eax
                        pushl             %eax
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        call              compiler_function_call_argument_pass
                        addl              $12, %esp
                                                            # 
                                                            #     return True;
                        movl              $1, %eax
                        jmp               syntax_function_call_argument_list_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # // primary-expression
                                                            # //            built-in-function
                                                            # //            identifier ( function-call-argument-list )
                                                            # //            identifier [ expression ]
                                                            # //            identifier
                                                            # //            integer-constant
                                                            # //            character-constant
                                                            # //            ( expression )
                                                            # //
                                                            # syntax_primary_expression() {
syntax_function_call_argument_list_end:
                        leave
                        ret
syntax_primary_expression: enter          $2084, $0
                                                            #     char cookie[Str_size];
                                                            #     char name[Str_size];
                                                            #     int function_argument_count[1];
                                                            # 
                                                            #     // ------ built-in-function
                                                            # 
                                                            #     if (syntax_built_in_function()) {
                        call              syntax_built_in_function
                        cmpl              $0, %eax
                        jz                if_359_next
                                                            #         return True;
                        movl              $1, %eax
                        jmp               syntax_primary_expression_end
                                                            #     }
                                                            # 
                                                            #     // ------ identifier ( function-call-argument-list )
                                                            # 
                                                            #     if (token_type_is(Token_t_identifier) && token_lookahead_text_is("(")) {
if_359_next:
if_359_end:             movl              $4, %eax
                        movl              %eax, -2056(%ebp)
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        call              token_type_is
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jz                logical_and_360_false
                        lea               11984+string, %eax
                        movl              %eax, -2056(%ebp)
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        call              token_lookahead_text_is
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jz                logical_and_360_false
                        movl              $1, %eax
                        jmp               logical_and_360_true
logical_and_360_false:  movl              $0, %eax
logical_and_360_true:   cmpl              $0, %eax
                        jz                if_361_next
                                                            #         copy(name, token_text);
                        lea               -2048(%ebp), %eax
                        movl              %eax, -2056(%ebp)
                        lea               4197420+global, %eax
                        movl              %eax, -2060(%ebp)
                        movl              -2060(%ebp), %eax
                        pushl             %eax
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        call              copy
                        addl              $8, %esp
                                                            #         token_advance();
                        call              token_advance
                                                            #         token_advance();
                        call              token_advance
                                                            # 
                                                            #         compiler_function_call_prepare(name, cookie); // >>>>>>>>>>
                        lea               -2048(%ebp), %eax
                        movl              %eax, -2056(%ebp)
                        lea               -1024(%ebp), %eax
                        movl              %eax, -2060(%ebp)
                        movl              -2060(%ebp), %eax
                        pushl             %eax
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        call              compiler_function_call_prepare
                        addl              $8, %esp
                                                            # 
                                                            #         function_argument_count[0] = 0;
                        movl              $0, %eax
                        movl              %eax, -2056(%ebp)
                        movl              $0, %eax
                        movl              %eax, -2060(%ebp)
                        movl              -2056(%ebp), %eax
                        movl              %eax, %ebx
                        movl              -2060(%ebp), %eax
                        movl              %eax, -2052(%ebp,%ebx,4)
                                                            #         syntax_function_call_argument_list(0, function_argument_count);
                        movl              $0, %eax
                        movl              %eax, -2056(%ebp)
                        lea               -2052(%ebp), %eax
                        movl              %eax, -2060(%ebp)
                        movl              -2060(%ebp), %eax
                        pushl             %eax
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        call              syntax_function_call_argument_list
                        addl              $8, %esp
                                                            # 
                                                            #         compiler_function_call_execute(cookie, function_argument_count[0]); // >>>>>>>>>>
                        lea               -1024(%ebp), %eax
                        movl              %eax, -2056(%ebp)
                        movl              $0, %eax
                        movl              %eax, %ebx
                        movl              -2052(%ebp,%ebx,4), %eax
                        movl              %eax, -2060(%ebp)
                        movl              -2060(%ebp), %eax
                        pushl             %eax
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        call              compiler_function_call_execute
                        addl              $8, %esp
                                                            #                 
                                                            #         if (! token_advance_if(")")) {
                        lea               11992+string, %eax
                        movl              %eax, -2056(%ebp)
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_362_false
                        movl              $1, %eax
                        jmp               logical_not_362_true
logical_not_362_false:  movl              $0, %eax
logical_not_362_true:   cmpl              $0, %eax
                        jz                if_363_next
                                                            #             error_syntax("closing parenthesis expected after function call expression");
                        lea               12000+string, %eax
                        movl              %eax, -2056(%ebp)
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #         }
                                                            # 
                                                            #         return True;
if_363_next:
if_363_end:             movl              $1, %eax
                        jmp               syntax_primary_expression_end
                                                            #     }
                                                            # 
                                                            #     // ------ identifier [ expression ]
                                                            # 
                                                            #     if (token_type_is(Token_t_identifier) && token_lookahead_text_is("[")) {
if_361_next:
if_361_end:             movl              $4, %eax
                        movl              %eax, -2056(%ebp)
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        call              token_type_is
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jz                logical_and_364_false
                        lea               12240+string, %eax
                        movl              %eax, -2056(%ebp)
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        call              token_lookahead_text_is
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jz                logical_and_364_false
                        movl              $1, %eax
                        jmp               logical_and_364_true
logical_and_364_false:  movl              $0, %eax
logical_and_364_true:   cmpl              $0, %eax
                        jz                if_365_next
                                                            #         copy(name, token_text);
                        lea               -2048(%ebp), %eax
                        movl              %eax, -2056(%ebp)
                        lea               4197420+global, %eax
                        movl              %eax, -2060(%ebp)
                        movl              -2060(%ebp), %eax
                        pushl             %eax
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        call              copy
                        addl              $8, %esp
                                                            #         token_advance();
                        call              token_advance
                                                            #         token_advance();
                        call              token_advance
                                                            # 
                                                            #         if (! syntax_expression()) {
                        call              syntax_expression
                        cmpl              $0, %eax
                        jnz               logical_not_366_false
                        movl              $1, %eax
                        jmp               logical_not_366_true
logical_not_366_false:  movl              $0, %eax
logical_not_366_true:   cmpl              $0, %eax
                        jz                if_367_next
                                                            #             error_syntax("expression expected after opening bracket");
                        lea               12248+string, %eax
                        movl              %eax, -2056(%ebp)
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #         }
                                                            # 
                                                            #         if (! token_advance_if("]")) {
if_367_next:
if_367_end:             lea               12416+string, %eax
                        movl              %eax, -2056(%ebp)
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_368_false
                        movl              $1, %eax
                        jmp               logical_not_368_true
logical_not_368_false:  movl              $0, %eax
logical_not_368_true:   cmpl              $0, %eax
                        jz                if_369_next
                                                            #             error_syntax("closing bracket expected");
                        lea               12424+string, %eax
                        movl              %eax, -2056(%ebp)
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #         }
                                                            # 
                                                            #         compiler_primary_expression_array_index(); // >>>>>>>>>>
if_369_next:
if_369_end:             call              compiler_primary_expression_array_index
                                                            #         compiler_primary_expression_identifier(name); // >>>>>>>>>>
                        lea               -2048(%ebp), %eax
                        movl              %eax, -2056(%ebp)
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        call              compiler_primary_expression_identifier
                        addl              $4, %esp
                                                            #         return True;
                        movl              $1, %eax
                        jmp               syntax_primary_expression_end
                                                            #     }
                                                            # 
                                                            #     // ------ identifier
                                                            # 
                                                            #     if (token_type_is(Token_t_identifier)) {
if_365_next:
if_365_end:             movl              $4, %eax
                        movl              %eax, -2056(%ebp)
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        call              token_type_is
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jz                if_370_next
                                                            #         compiler_primary_expression_identifier(token_text); // >>>>>>>>>>
                        lea               4197420+global, %eax
                        movl              %eax, -2056(%ebp)
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        call              compiler_primary_expression_identifier
                        addl              $4, %esp
                                                            #         token_advance();
                        call              token_advance
                                                            #         return True;
                        movl              $1, %eax
                        jmp               syntax_primary_expression_end
                                                            #     }
                                                            # 
                                                            #     // ------ integer-constant
                                                            # 
                                                            #     if (token_type_is(Token_t_integer_constant)) {
if_370_next:
if_370_end:             movl              $2, %eax
                        movl              %eax, -2056(%ebp)
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        call              token_type_is
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jz                if_371_next
                                                            #         compiler_primary_expression_integer_constant(token_text); // >>>>>>>>>>       
                        lea               4197420+global, %eax
                        movl              %eax, -2056(%ebp)
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        call              compiler_primary_expression_integer_constant
                        addl              $4, %esp
                                                            #         token_advance();
                        call              token_advance
                                                            #         return True;
                        movl              $1, %eax
                        jmp               syntax_primary_expression_end
                                                            #     }
                                                            # 
                                                            #     // ----- character-constant
                                                            # 
                                                            #     if (token_type_is(Token_t_character_constant)) {
if_371_next:
if_371_end:             movl              $1, %eax
                        movl              %eax, -2056(%ebp)
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        call              token_type_is
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jz                if_372_next
                                                            #         compiler_primary_expression_character_constant(token_text[0]); // >>>>>>>>>>        
                        movl              $0, %eax
                        movl              %eax, %ebx
                        movl              4197420+global(,%ebx,4), %eax
                        movl              %eax, -2056(%ebp)
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        call              compiler_primary_expression_character_constant
                        addl              $4, %esp
                                                            #         token_advance();
                        call              token_advance
                                                            #         return True;
                        movl              $1, %eax
                        jmp               syntax_primary_expression_end
                                                            #     }
                                                            # 
                                                            #     // ------ ( expression )
                                                            # 
                                                            #     if (token_advance_if("(")) {
if_372_next:
if_372_end:             lea               12524+string, %eax
                        movl              %eax, -2056(%ebp)
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jz                if_373_next
                                                            #         if (! syntax_expression()) {
                        call              syntax_expression
                        cmpl              $0, %eax
                        jnz               logical_not_374_false
                        movl              $1, %eax
                        jmp               logical_not_374_true
logical_not_374_false:  movl              $0, %eax
logical_not_374_true:   cmpl              $0, %eax
                        jz                if_375_next
                                                            #             error_syntax("expression expected after opening parenthesis");
                        lea               12532+string, %eax
                        movl              %eax, -2056(%ebp)
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #         }
                                                            # 
                                                            #         if (! token_advance_if(")")) {
if_375_next:
if_375_end:             lea               12716+string, %eax
                        movl              %eax, -2056(%ebp)
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_376_false
                        movl              $1, %eax
                        jmp               logical_not_376_true
logical_not_376_false:  movl              $0, %eax
logical_not_376_true:   cmpl              $0, %eax
                        jz                if_377_next
                                                            #             error_syntax("closing parenthesis expected after expression");
                        lea               12724+string, %eax
                        movl              %eax, -2056(%ebp)
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #         }
                                                            # 
                                                            #         return True;
if_377_next:
if_377_end:             movl              $1, %eax
                        jmp               syntax_primary_expression_end
                                                            #     }
                                                            # 
                                                            #     return False;
if_373_next:
if_373_end:             movl              $0, %eax
                        jmp               syntax_primary_expression_end
                                                            # }
                                                            # 
                                                            # 
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # // unary-operator
                                                            # //            one of  ! + - 
                                                            # //
                                                            # syntax_unary_operator(char s[]) {
syntax_primary_expression_end:
                        leave
                        ret
syntax_unary_operator:  enter             $32, $0
                                                            #  
                                                            #     return contains(" ! + - ", s);
                        lea               12908+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              contains
                        addl              $8, %esp
                        jmp               syntax_unary_operator_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # // unary-expression
                                                            # //            unary-operator unary-expression
                                                            # //            primary-expression
                                                            # //            
                                                            # syntax_unary_expression() {
syntax_unary_operator_end:
                        leave
                        ret
syntax_unary_expression: enter            $1056, $0
                                                            #     char operator_text[Str_size];
                                                            # 
                                                            #     if (token_type_is(Token_t_symbol) && syntax_unary_operator(token_text)) {
                        movl              $5, %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              token_type_is
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jz                logical_and_378_false
                        lea               4197420+global, %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              syntax_unary_operator
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jz                logical_and_378_false
                        movl              $1, %eax
                        jmp               logical_and_378_true
logical_and_378_false:  movl              $0, %eax
logical_and_378_true:   cmpl              $0, %eax
                        jz                if_379_next
                                                            #         copy(operator_text, token_text);
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        lea               4197420+global, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              copy
                        addl              $8, %esp
                                                            #         token_advance();
                        call              token_advance
                                                            # 
                                                            #         if (! syntax_unary_expression()) {
                        call              syntax_unary_expression
                        cmpl              $0, %eax
                        jnz               logical_not_380_false
                        movl              $1, %eax
                        jmp               logical_not_380_true
logical_not_380_false:  movl              $0, %eax
logical_not_380_true:   cmpl              $0, %eax
                        jz                if_381_next
                                                            #             error_syntax("expression expected after unary operator");
                        lea               12940+string, %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #         }
                                                            #                   
                                                            #         compiler_unary_expression(operator_text); // >>>>>>>>>>
if_381_next:
if_381_end:             lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              compiler_unary_expression
                        addl              $4, %esp
                                                            #         return True;
                        movl              $1, %eax
                        jmp               syntax_unary_expression_end
                                                            #     }
                                                            # 
                                                            #     return syntax_primary_expression();
if_379_next:
if_379_end:             call              syntax_primary_expression
                        jmp               syntax_unary_expression_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # // multiplicative-operator
                                                            # //           one-of  * / 
                                                            # //
                                                            # syntax_multiplicative_operator(char s[]) {
syntax_unary_expression_end:
                        leave
                        ret
syntax_multiplicative_operator: enter     $32, $0
                                                            #  
                                                            #     return contains(" * / ", s);
                        lea               13104+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              contains
                        addl              $8, %esp
                        jmp               syntax_multiplicative_operator_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # // multiplicative-expression-sequence
                                                            # //            multiplicative-operator unary-expression multiplicative-expression-sequence
                                                            # //            multiplicative-operator unary-expression
                                                            # //
                                                            # syntax_multiplicative_expression_sequence() {
syntax_multiplicative_operator_end:
                        leave
                        ret
syntax_multiplicative_expression_sequence: enter $1060, $0
                                                            #     int cookie;
                                                            #     char operator_text[Str_size];
                                                            # 
                                                            #     if (! (token_type_is(Token_t_symbol) && syntax_multiplicative_operator(token_text))) {
                        movl              $5, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              token_type_is
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jz                logical_and_382_false
                        lea               4197420+global, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              syntax_multiplicative_operator
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jz                logical_and_382_false
                        movl              $1, %eax
                        jmp               logical_and_382_true
logical_and_382_false:  movl              $0, %eax
logical_and_382_true:   cmpl              $0, %eax
                        jnz               logical_not_383_false
                        movl              $1, %eax
                        jmp               logical_not_383_true
logical_not_383_false:  movl              $0, %eax
logical_not_383_true:   cmpl              $0, %eax
                        jz                if_384_next
                                                            #         return False;
                        movl              $0, %eax
                        jmp               syntax_multiplicative_expression_sequence_end
                                                            #     }
                                                            # 
                                                            #     copy(operator_text, token_text);
if_384_next:
if_384_end:             lea               -1028(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        lea               4197420+global, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              copy
                        addl              $8, %esp
                                                            #     token_advance();
                        call              token_advance
                                                            # 
                                                            #     cookie = compiler_multiplicative_expression_sequence_begin(); // >>>>>>>>>>
                        call              compiler_multiplicative_expression_sequence_begin
                        movl              %eax, -4(%ebp)
                                                            # 
                                                            #     if (! syntax_unary_expression()) {
                        call              syntax_unary_expression
                        cmpl              $0, %eax
                        jnz               logical_not_385_false
                        movl              $1, %eax
                        jmp               logical_not_385_true
logical_not_385_false:  movl              $0, %eax
logical_not_385_true:   cmpl              $0, %eax
                        jz                if_386_next
                                                            #         error_syntax("expression expected after unary operator");
                        lea               13128+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #     }
                                                            # 
                                                            #     compiler_multiplicative_expression_sequence_end(operator_text, cookie); // >>>>>>>>>>
if_386_next:
if_386_end:             lea               -1028(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              -4(%ebp), %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              compiler_multiplicative_expression_sequence_end
                        addl              $8, %esp
                                                            # 
                                                            #     syntax_multiplicative_expression_sequence();
                        call              syntax_multiplicative_expression_sequence
                                                            # 
                                                            #     return True;
                        movl              $1, %eax
                        jmp               syntax_multiplicative_expression_sequence_end
                                                            # }
                                                            # 
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # // multiplicative-expression
                                                            # //            unary-expression multiplicative-expression-sequence
                                                            # //            unary-expression
                                                            # //
                                                            # syntax_multiplicative_expression() {
syntax_multiplicative_expression_sequence_end:
                        leave
                        ret
syntax_multiplicative_expression: enter   $32, $0
                                                            # 
                                                            #     if (! syntax_unary_expression()) {
                        call              syntax_unary_expression
                        cmpl              $0, %eax
                        jnz               logical_not_387_false
                        movl              $1, %eax
                        jmp               logical_not_387_true
logical_not_387_false:  movl              $0, %eax
logical_not_387_true:   cmpl              $0, %eax
                        jz                if_388_next
                                                            #         return False;
                        movl              $0, %eax
                        jmp               syntax_multiplicative_expression_end
                                                            #     }
                                                            # 
                                                            #     syntax_multiplicative_expression_sequence();
if_388_next:
if_388_end:             call              syntax_multiplicative_expression_sequence
                                                            #     
                                                            #     return True;
                        movl              $1, %eax
                        jmp               syntax_multiplicative_expression_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # // additive-operator
                                                            # //           one-of  + - 
                                                            # //            
                                                            # syntax_additive_operator(char s[]) {
syntax_multiplicative_expression_end:
                        leave
                        ret
syntax_additive_operator: enter           $32, $0
                                                            # 
                                                            #     return contains(" + - ", s);
                        lea               13292+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              contains
                        addl              $8, %esp
                        jmp               syntax_additive_operator_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # // additive-expression-sequence
                                                            # //           additive-operator multiplicative-expression additive-expression-sequence
                                                            # //           additive-operator multiplicative-expression
                                                            # //
                                                            # syntax_additive_expression_sequence() {
syntax_additive_operator_end:
                        leave
                        ret
syntax_additive_expression_sequence: enter $1060, $0
                                                            #     int cookie;
                                                            #     char operator_text[Str_size];
                                                            # 
                                                            #     if (! (token_type_is(Token_t_symbol) && syntax_additive_operator(token_text)) ) {
                        movl              $5, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              token_type_is
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jz                logical_and_389_false
                        lea               4197420+global, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              syntax_additive_operator
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jz                logical_and_389_false
                        movl              $1, %eax
                        jmp               logical_and_389_true
logical_and_389_false:  movl              $0, %eax
logical_and_389_true:   cmpl              $0, %eax
                        jnz               logical_not_390_false
                        movl              $1, %eax
                        jmp               logical_not_390_true
logical_not_390_false:  movl              $0, %eax
logical_not_390_true:   cmpl              $0, %eax
                        jz                if_391_next
                                                            #         return False;
                        movl              $0, %eax
                        jmp               syntax_additive_expression_sequence_end
                                                            #     }
                                                            # 
                                                            #     copy(operator_text, token_text);
if_391_next:
if_391_end:             lea               -1028(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        lea               4197420+global, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              copy
                        addl              $8, %esp
                                                            #     token_advance();
                        call              token_advance
                                                            # 
                                                            #     cookie = compiler_additive_expression_sequence_begin(); // >>>>>>>>>>
                        call              compiler_additive_expression_sequence_begin
                        movl              %eax, -4(%ebp)
                                                            # 
                                                            #     if (! syntax_multiplicative_expression()) {
                        call              syntax_multiplicative_expression
                        cmpl              $0, %eax
                        jnz               logical_not_392_false
                        movl              $1, %eax
                        jmp               logical_not_392_true
logical_not_392_false:  movl              $0, %eax
logical_not_392_true:   cmpl              $0, %eax
                        jz                if_393_next
                                                            #         error_syntax("expression expected right of additive operator");
                        lea               13316+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #     }
                                                            # 
                                                            #     compiler_additive_expression_sequence_end(operator_text, cookie); // >>>>>>>>>>
if_393_next:
if_393_end:             lea               -1028(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              -4(%ebp), %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              compiler_additive_expression_sequence_end
                        addl              $8, %esp
                                                            # 
                                                            #     syntax_additive_expression_sequence();
                        call              syntax_additive_expression_sequence
                                                            # 
                                                            #     return True;
                        movl              $1, %eax
                        jmp               syntax_additive_expression_sequence_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # // additive-expression
                                                            # //            multiplicative-expression additive-expression-sequence
                                                            # //            multiplicative-expression
                                                            # //
                                                            # syntax_additive_expression() {
syntax_additive_expression_sequence_end:
                        leave
                        ret
syntax_additive_expression: enter         $32, $0
                                                            # 
                                                            #     if (! syntax_multiplicative_expression()) {
                        call              syntax_multiplicative_expression
                        cmpl              $0, %eax
                        jnz               logical_not_394_false
                        movl              $1, %eax
                        jmp               logical_not_394_true
logical_not_394_false:  movl              $0, %eax
logical_not_394_true:   cmpl              $0, %eax
                        jz                if_395_next
                                                            #         return False;
                        movl              $0, %eax
                        jmp               syntax_additive_expression_end
                                                            #     }
                                                            # 
                                                            #     syntax_additive_expression_sequence();
if_395_next:
if_395_end:             call              syntax_additive_expression_sequence
                                                            # 
                                                            #     return True;
                        movl              $1, %eax
                        jmp               syntax_additive_expression_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # // relational-operator
                                                            # //           one-of < <= > >=
                                                            # //
                                                            # syntax_relational_operator(char s[]) {
syntax_additive_expression_end:
                        leave
                        ret
syntax_relational_operator: enter         $32, $0
                                                            # 
                                                            #     return contains(" < <= > >= ", s);
                        lea               13504+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              contains
                        addl              $8, %esp
                        jmp               syntax_relational_operator_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # // relational-expression-sequence
                                                            # //            relational-operator additive-expression relational-expression-sequence
                                                            # //            relational-operator additive-expression
                                                            # //
                                                            # syntax_relational_expression_sequence() {
syntax_relational_operator_end:
                        leave
                        ret
syntax_relational_expression_sequence: enter $1060, $0
                                                            #     int cookie;
                                                            #     char operator_text[Str_size];
                                                            # 
                                                            #     if (! (token_type_is(Token_t_symbol) && syntax_relational_operator(token_text)) ) {
                        movl              $5, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              token_type_is
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jz                logical_and_396_false
                        lea               4197420+global, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              syntax_relational_operator
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jz                logical_and_396_false
                        movl              $1, %eax
                        jmp               logical_and_396_true
logical_and_396_false:  movl              $0, %eax
logical_and_396_true:   cmpl              $0, %eax
                        jnz               logical_not_397_false
                        movl              $1, %eax
                        jmp               logical_not_397_true
logical_not_397_false:  movl              $0, %eax
logical_not_397_true:   cmpl              $0, %eax
                        jz                if_398_next
                                                            #         return False;
                        movl              $0, %eax
                        jmp               syntax_relational_expression_sequence_end
                                                            #     }
                                                            # 
                                                            #     copy(operator_text, token_text);
if_398_next:
if_398_end:             lea               -1028(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        lea               4197420+global, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              copy
                        addl              $8, %esp
                                                            #     token_advance();
                        call              token_advance
                                                            # 
                                                            #     cookie = compiler_relational_or_equality_expression_sequence_begin(); // >>>>>>>>>>
                        call              compiler_relational_or_equality_expression_sequence_begin
                        movl              %eax, -4(%ebp)
                                                            # 
                                                            #     if (! syntax_additive_expression()) {
                        call              syntax_additive_expression
                        cmpl              $0, %eax
                        jnz               logical_not_399_false
                        movl              $1, %eax
                        jmp               logical_not_399_true
logical_not_399_false:  movl              $0, %eax
logical_not_399_true:   cmpl              $0, %eax
                        jz                if_400_next
                                                            #         error_syntax("expression expected right of relational operator");
                        lea               13552+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #     }
                                                            # 
                                                            #     compiler_relational_or_equality_expression_sequence_end(operator_text, cookie); // >>>>>>>>>>
if_400_next:
if_400_end:             lea               -1028(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              -4(%ebp), %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              compiler_relational_or_equality_expression_sequence_end
                        addl              $8, %esp
                                                            # 
                                                            #     syntax_relational_expression_sequence();
                        call              syntax_relational_expression_sequence
                                                            # 
                                                            #     return True;
                        movl              $1, %eax
                        jmp               syntax_relational_expression_sequence_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # // relational-expression
                                                            # //            additive-expression relational-expression-sequence
                                                            # //            additive-expression
                                                            # //
                                                            # syntax_relational_expression() {
syntax_relational_expression_sequence_end:
                        leave
                        ret
syntax_relational_expression: enter       $32, $0
                                                            #  
                                                            #     if (! syntax_additive_expression()) {
                        call              syntax_additive_expression
                        cmpl              $0, %eax
                        jnz               logical_not_401_false
                        movl              $1, %eax
                        jmp               logical_not_401_true
logical_not_401_false:  movl              $0, %eax
logical_not_401_true:   cmpl              $0, %eax
                        jz                if_402_next
                                                            #         return False;
                        movl              $0, %eax
                        jmp               syntax_relational_expression_end
                                                            #     }
                                                            # 
                                                            #     syntax_relational_expression_sequence();
if_402_next:
if_402_end:             call              syntax_relational_expression_sequence
                                                            # 
                                                            #     return True;
                        movl              $1, %eax
                        jmp               syntax_relational_expression_end
                                                            # }
                                                            # 
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # // equality-operator
                                                            # //            one-of == !=
                                                            # //
                                                            # syntax_equality_operator(char s[]) {
syntax_relational_expression_end:
                        leave
                        ret
syntax_equality_operator: enter           $32, $0
                                                            # 
                                                            #     return contains(" == != ", s);
                        lea               13748+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              8(%ebp), %eax
                        movl              %eax, -8(%ebp)
                        movl              -8(%ebp), %eax
                        pushl             %eax
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              contains
                        addl              $8, %esp
                        jmp               syntax_equality_operator_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # // equality-expression-sequence
                                                            # //            equality-operator-operator relational-expression equality-expression-sequence
                                                            # //            equality-operator-operator relational-expression
                                                            # //
                                                            # syntax_equality_expression_sequence() {
syntax_equality_operator_end:
                        leave
                        ret
syntax_equality_expression_sequence: enter $1060, $0
                                                            #     int cookie;
                                                            #     char operator_text[Str_size];
                                                            # 
                                                            #     if (! (token_type_is(Token_t_symbol) && syntax_equality_operator(token_text)) ) {
                        movl              $5, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              token_type_is
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jz                logical_and_403_false
                        lea               4197420+global, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              syntax_equality_operator
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jz                logical_and_403_false
                        movl              $1, %eax
                        jmp               logical_and_403_true
logical_and_403_false:  movl              $0, %eax
logical_and_403_true:   cmpl              $0, %eax
                        jnz               logical_not_404_false
                        movl              $1, %eax
                        jmp               logical_not_404_true
logical_not_404_false:  movl              $0, %eax
logical_not_404_true:   cmpl              $0, %eax
                        jz                if_405_next
                                                            #         return False;
                        movl              $0, %eax
                        jmp               syntax_equality_expression_sequence_end
                                                            #     }
                                                            # 
                                                            #     copy(operator_text, token_text);
if_405_next:
if_405_end:             lea               -1028(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        lea               4197420+global, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              copy
                        addl              $8, %esp
                                                            #     token_advance();
                        call              token_advance
                                                            # 
                                                            #     cookie = compiler_relational_or_equality_expression_sequence_begin(); // >>>>>>>>>>
                        call              compiler_relational_or_equality_expression_sequence_begin
                        movl              %eax, -4(%ebp)
                                                            # 
                                                            #     if (! syntax_relational_expression()) {
                        call              syntax_relational_expression
                        cmpl              $0, %eax
                        jnz               logical_not_406_false
                        movl              $1, %eax
                        jmp               logical_not_406_true
logical_not_406_false:  movl              $0, %eax
logical_not_406_true:   cmpl              $0, %eax
                        jz                if_407_next
                                                            #         error_syntax("expression expected right of equality operator");
                        lea               13780+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #     }
                                                            # 
                                                            #     compiler_relational_or_equality_expression_sequence_end(operator_text, cookie); // >>>>>>>>>>
if_407_next:
if_407_end:             lea               -1028(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              -4(%ebp), %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              compiler_relational_or_equality_expression_sequence_end
                        addl              $8, %esp
                                                            # 
                                                            #     syntax_equality_expression_sequence();
                        call              syntax_equality_expression_sequence
                                                            # 
                                                            #     return True;
                        movl              $1, %eax
                        jmp               syntax_equality_expression_sequence_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # // equality-expression
                                                            # //            relational-expression equality-expression-sequence
                                                            # //            relational-expression
                                                            # //
                                                            # syntax_equality_expression() {
syntax_equality_expression_sequence_end:
                        leave
                        ret
syntax_equality_expression: enter         $32, $0
                                                            # 
                                                            #     if (! syntax_relational_expression() ) {
                        call              syntax_relational_expression
                        cmpl              $0, %eax
                        jnz               logical_not_408_false
                        movl              $1, %eax
                        jmp               logical_not_408_true
logical_not_408_false:  movl              $0, %eax
logical_not_408_true:   cmpl              $0, %eax
                        jz                if_409_next
                                                            #         return False;
                        movl              $0, %eax
                        jmp               syntax_equality_expression_end
                                                            #     }
                                                            # 
                                                            #     syntax_equality_expression_sequence();
if_409_next:
if_409_end:             call              syntax_equality_expression_sequence
                                                            # 
                                                            #     return True;
                        movl              $1, %eax
                        jmp               syntax_equality_expression_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # // logical-and-switch-sequence
                                                            # //            && equality-expression logical-and-switch-sequence
                                                            # //            && equality-expression
                                                            # //
                                                            # //
                                                            # syntax_logical_and_switch_sequence(char cookie[]) {
syntax_equality_expression_end:
                        leave
                        ret
syntax_logical_and_switch_sequence: enter $32, $0
                                                            # 
                                                            #     if (! token_advance_if("&&")) {
                        lea               13968+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_410_false
                        movl              $1, %eax
                        jmp               logical_not_410_true
logical_not_410_false:  movl              $0, %eax
logical_not_410_true:   cmpl              $0, %eax
                        jz                if_411_next
                                                            #         return False;
                        movl              $0, %eax
                        jmp               syntax_logical_and_switch_sequence_end
                                                            #     }
                                                            # 
                                                            #     if (! syntax_equality_expression()) {
if_411_next:
if_411_end:             call              syntax_equality_expression
                        cmpl              $0, %eax
                        jnz               logical_not_412_false
                        movl              $1, %eax
                        jmp               logical_not_412_true
logical_not_412_false:  movl              $0, %eax
logical_not_412_true:   cmpl              $0, %eax
                        jz                if_413_next
                                                            #         error_syntax("expression expected right of logical and");
                        lea               13980+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #     }
                                                            # 
                                                            #     compiler_logical_and_switch_sequence(cookie); // >>>>>>>>>>
if_413_next:
if_413_end:             movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              compiler_logical_and_switch_sequence
                        addl              $4, %esp
                                                            # 
                                                            #     syntax_logical_and_switch_sequence(cookie);
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              syntax_logical_and_switch_sequence
                        addl              $4, %esp
                                                            # 
                                                            #     return True;
                        movl              $1, %eax
                        jmp               syntax_logical_and_switch_sequence_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # // logical-and-expression
                                                            # //            equality-expression logical-and-switch-sequence
                                                            # //            equality-expression
                                                            # //
                                                            # syntax_logical_and_expression() {
syntax_logical_and_switch_sequence_end:
                        leave
                        ret
syntax_logical_and_expression: enter      $1056, $0
                                                            #     char cookie[Str_size];
                                                            # 
                                                            #     if (! syntax_equality_expression() ) {
                        call              syntax_equality_expression
                        cmpl              $0, %eax
                        jnz               logical_not_414_false
                        movl              $1, %eax
                        jmp               logical_not_414_true
logical_not_414_false:  movl              $0, %eax
logical_not_414_true:   cmpl              $0, %eax
                        jz                if_415_next
                                                            #         return False;
                        movl              $0, %eax
                        jmp               syntax_logical_and_expression_end
                                                            #     }
                                                            #     
                                                            #     if (token_text_is("&&")) {
if_415_next:
if_415_end:             lea               14144+string, %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              token_text_is
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jz                if_416_next
                                                            #         compiler_logical_and_expression_begin(cookie); // >>>>>>>>>>
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              compiler_logical_and_expression_begin
                        addl              $4, %esp
                                                            # 
                                                            #         syntax_logical_and_switch_sequence(cookie);
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              syntax_logical_and_switch_sequence
                        addl              $4, %esp
                                                            # 
                                                            #         compiler_logical_and_expression_end(cookie); // >>>>>>>>>>
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              compiler_logical_and_expression_end
                        addl              $4, %esp
                                                            #     }
                                                            # 
                                                            #     return True;
if_416_next:
if_416_end:             movl              $1, %eax
                        jmp               syntax_logical_and_expression_end
                                                            # }
                                                            # 
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # // logical-or-switch-sequence
                                                            # //            || logical-and-expression logical-or-switch-sequence
                                                            # //            || logical-and-expression
                                                            # //
                                                            # syntax_logical_or_switch_sequence(char cookie[]) {
syntax_logical_and_expression_end:
                        leave
                        ret
syntax_logical_or_switch_sequence: enter  $32, $0
                                                            # 
                                                            #     if (! token_advance_if("||")) {
                        lea               14156+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_417_false
                        movl              $1, %eax
                        jmp               logical_not_417_true
logical_not_417_false:  movl              $0, %eax
logical_not_417_true:   cmpl              $0, %eax
                        jz                if_418_next
                                                            #         return False;
                        movl              $0, %eax
                        jmp               syntax_logical_or_switch_sequence_end
                                                            #     }
                                                            # 
                                                            #     if (! syntax_logical_and_expression()) {
if_418_next:
if_418_end:             call              syntax_logical_and_expression
                        cmpl              $0, %eax
                        jnz               logical_not_419_false
                        movl              $1, %eax
                        jmp               logical_not_419_true
logical_not_419_false:  movl              $0, %eax
logical_not_419_true:   cmpl              $0, %eax
                        jz                if_420_next
                                                            #         error_syntax("expression expected right of logical-or operator");
                        lea               14168+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #     }
                                                            # 
                                                            #     compiler_logical_or_switch_sequence(cookie); // >>>>>>>>>>
if_420_next:
if_420_end:             movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              compiler_logical_or_switch_sequence
                        addl              $4, %esp
                                                            # 
                                                            #     syntax_logical_or_switch_sequence(cookie);
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              syntax_logical_or_switch_sequence
                        addl              $4, %esp
                                                            # 
                                                            #     return True;
                        movl              $1, %eax
                        jmp               syntax_logical_or_switch_sequence_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # // logical-or-expression
                                                            # //            logical-and-expression logical-or-switch-sequence
                                                            # //            logical-and-expression
                                                            # //
                                                            # syntax_logical_or_expression() {
syntax_logical_or_switch_sequence_end:
                        leave
                        ret
syntax_logical_or_expression: enter       $1056, $0
                                                            #     char cookie[Str_size];
                                                            #  
                                                            #     if (! syntax_logical_and_expression()) {
                        call              syntax_logical_and_expression
                        cmpl              $0, %eax
                        jnz               logical_not_421_false
                        movl              $1, %eax
                        jmp               logical_not_421_true
logical_not_421_false:  movl              $0, %eax
logical_not_421_true:   cmpl              $0, %eax
                        jz                if_422_next
                                                            #         return False;
                        movl              $0, %eax
                        jmp               syntax_logical_or_expression_end
                                                            #     }
                                                            #     
                                                            #     if (token_text_is("||")) {
if_422_next:
if_422_end:             lea               14364+string, %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              token_text_is
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jz                if_423_next
                                                            #         compiler_logical_or_expression_begin(cookie); // >>>>>>>>>>
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              compiler_logical_or_expression_begin
                        addl              $4, %esp
                                                            # 
                                                            #         syntax_logical_or_switch_sequence(cookie);
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              syntax_logical_or_switch_sequence
                        addl              $4, %esp
                                                            # 
                                                            #         compiler_logical_or_expression_end(cookie); // >>>>>>>>>>
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              compiler_logical_or_expression_end
                        addl              $4, %esp
                                                            #     }
                                                            # 
                                                            #     return True;
if_423_next:
if_423_end:             movl              $1, %eax
                        jmp               syntax_logical_or_expression_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # // expression
                                                            # //            logical-or-expression
                                                            # //
                                                            # syntax_expression() {
syntax_logical_or_expression_end:
                        leave
                        ret
syntax_expression:      enter             $32, $0
                                                            # 
                                                            #     return syntax_logical_or_expression();
                        call              syntax_logical_or_expression
                        jmp               syntax_expression_end
                                                            # }
                                                            # 
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # // function-call-statement
                                                            # //            built-in-function
                                                            # //            identifier ( function-call-argument-list )
                                                            # //
                                                            # syntax_function_call_statement() {
syntax_expression_end:
                        leave
                        ret
syntax_function_call_statement: enter     $2084, $0
                                                            #     char cookie[Str_size];
                                                            #     char function_name[Str_size];
                                                            #     int function_argument_count[1];
                                                            # 
                                                            #     if (syntax_built_in_function()) {
                        call              syntax_built_in_function
                        cmpl              $0, %eax
                        jz                if_424_next
                                                            #         return True;
                        movl              $1, %eax
                        jmp               syntax_function_call_statement_end
                                                            #     }
                                                            # 
                                                            #     if (! (token_type_is(Token_t_identifier) && token_lookahead_text_is("(")) ) {
if_424_next:
if_424_end:             movl              $4, %eax
                        movl              %eax, -2056(%ebp)
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        call              token_type_is
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jz                logical_and_425_false
                        lea               14376+string, %eax
                        movl              %eax, -2056(%ebp)
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        call              token_lookahead_text_is
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jz                logical_and_425_false
                        movl              $1, %eax
                        jmp               logical_and_425_true
logical_and_425_false:  movl              $0, %eax
logical_and_425_true:   cmpl              $0, %eax
                        jnz               logical_not_426_false
                        movl              $1, %eax
                        jmp               logical_not_426_true
logical_not_426_false:  movl              $0, %eax
logical_not_426_true:   cmpl              $0, %eax
                        jz                if_427_next
                                                            #         return False;
                        movl              $0, %eax
                        jmp               syntax_function_call_statement_end
                                                            #     }
                                                            # 
                                                            #     copy(function_name, token_text);
if_427_next:
if_427_end:             lea               -2048(%ebp), %eax
                        movl              %eax, -2056(%ebp)
                        lea               4197420+global, %eax
                        movl              %eax, -2060(%ebp)
                        movl              -2060(%ebp), %eax
                        pushl             %eax
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        call              copy
                        addl              $8, %esp
                                                            # 
                                                            #     token_advance();
                        call              token_advance
                                                            #     token_advance();
                        call              token_advance
                                                            # 
                                                            #     compiler_function_call_prepare(function_name, cookie); // >>>>>>>>>>
                        lea               -2048(%ebp), %eax
                        movl              %eax, -2056(%ebp)
                        lea               -1024(%ebp), %eax
                        movl              %eax, -2060(%ebp)
                        movl              -2060(%ebp), %eax
                        pushl             %eax
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        call              compiler_function_call_prepare
                        addl              $8, %esp
                                                            # 
                                                            #     syntax_function_call_argument_list(0, function_argument_count);
                        movl              $0, %eax
                        movl              %eax, -2056(%ebp)
                        lea               -2052(%ebp), %eax
                        movl              %eax, -2060(%ebp)
                        movl              -2060(%ebp), %eax
                        pushl             %eax
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        call              syntax_function_call_argument_list
                        addl              $8, %esp
                                                            # 
                                                            #     compiler_function_call_execute(cookie, function_argument_count[0]); // >>>>>>>>>>
                        lea               -1024(%ebp), %eax
                        movl              %eax, -2056(%ebp)
                        movl              $0, %eax
                        movl              %eax, %ebx
                        movl              -2052(%ebp,%ebx,4), %eax
                        movl              %eax, -2060(%ebp)
                        movl              -2060(%ebp), %eax
                        pushl             %eax
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        call              compiler_function_call_execute
                        addl              $8, %esp
                                                            #                 
                                                            #     if (! token_advance_if(")") ) {
                        lea               14384+string, %eax
                        movl              %eax, -2056(%ebp)
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_428_false
                        movl              $1, %eax
                        jmp               logical_not_428_true
logical_not_428_false:  movl              $0, %eax
logical_not_428_true:   cmpl              $0, %eax
                        jz                if_429_next
                                                            #         error_syntax("closing parenthesis expected after function call");
                        lea               14392+string, %eax
                        movl              %eax, -2056(%ebp)
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #     }
                                                            # 
                                                            #     return True;
if_429_next:
if_429_end:             movl              $1, %eax
                        jmp               syntax_function_call_statement_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # // return-statement
                                                            # //            return expression
                                                            # //            return
                                                            # //
                                                            # syntax_return_statement() {
syntax_function_call_statement_end:
                        leave
                        ret
syntax_return_statement: enter            $32, $0
                                                            #  
                                                            #     if (! token_advance_if("return")) {
                        lea               14588+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_430_false
                        movl              $1, %eax
                        jmp               logical_not_430_true
logical_not_430_false:  movl              $0, %eax
logical_not_430_true:   cmpl              $0, %eax
                        jz                if_431_next
                                                            #         return False;
                        movl              $0, %eax
                        jmp               syntax_return_statement_end
                                                            #     }
                                                            # 
                                                            #     syntax_expression();
if_431_next:
if_431_end:             call              syntax_expression
                                                            # 
                                                            #     compiler_return_statement(); // >>>>>>>>>>
                        call              compiler_return_statement
                                                            # 
                                                            #     return True;
                        movl              $1, %eax
                        jmp               syntax_return_statement_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # // expression-statement
                                                            # //           expression
                                                            # //
                                                            # syntax_expression_statement() {
syntax_return_statement_end:
                        leave
                        ret
syntax_expression_statement: enter        $32, $0
                                                            # 
                                                            #     return syntax_expression();
                        call              syntax_expression
                        jmp               syntax_expression_statement_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # // assignment-statement
                                                            # //            identifier = expression
                                                            # //            identifier [ expression ] = expression
                                                            # //            
                                                            # syntax_assignment_statement() {
syntax_expression_statement_end:
                        leave
                        ret
syntax_assignment_statement: enter        $1060, $0
                                                            #     int cookie[1];
                                                            #     char variable_name[Str_size];
                                                            # 
                                                            #     if (token_type_is(Token_t_identifier) && token_lookahead_text_is("=")) {
                        movl              $4, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              token_type_is
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jz                logical_and_432_false
                        lea               14616+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              token_lookahead_text_is
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jz                logical_and_432_false
                        movl              $1, %eax
                        jmp               logical_and_432_true
logical_and_432_false:  movl              $0, %eax
logical_and_432_true:   cmpl              $0, %eax
                        jz                if_433_next
                                                            #         copy(variable_name, token_text);
                        lea               -1028(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        lea               4197420+global, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              copy
                        addl              $8, %esp
                                                            #         token_advance();
                        call              token_advance
                                                            #         token_advance();
                        call              token_advance
                                                            #    
                                                            #         if (! syntax_expression()) {
                        call              syntax_expression
                        cmpl              $0, %eax
                        jnz               logical_not_434_false
                        movl              $1, %eax
                        jmp               logical_not_434_true
logical_not_434_false:  movl              $0, %eax
logical_not_434_true:   cmpl              $0, %eax
                        jz                if_435_next
                                                            #             error_syntax("expression expected after equal sign");
                        lea               14624+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #         }
                                                            # 
                                                            #         compiler_assignment_statement(variable_name); // >>>>>>>>>>
if_435_next:
if_435_end:             lea               -1028(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              compiler_assignment_statement
                        addl              $4, %esp
                                                            # 
                                                            #         return True;
                        movl              $1, %eax
                        jmp               syntax_assignment_statement_end
                                                            #     }
                                                            # 
                                                            #     if (token_type_is(Token_t_identifier) && token_lookahead_text_is("[")) {
if_433_next:
if_433_end:             movl              $4, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              token_type_is
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jz                logical_and_436_false
                        lea               14772+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              token_lookahead_text_is
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jz                logical_and_436_false
                        movl              $1, %eax
                        jmp               logical_and_436_true
logical_and_436_false:  movl              $0, %eax
logical_and_436_true:   cmpl              $0, %eax
                        jz                if_437_next
                                                            #         copy(variable_name, token_text);
                        lea               -1028(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        lea               4197420+global, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              copy
                        addl              $8, %esp
                                                            #         token_advance();
                        call              token_advance
                                                            #         token_advance();
                        call              token_advance
                                                            # 
                                                            #         if (! syntax_expression()) {
                        call              syntax_expression
                        cmpl              $0, %eax
                        jnz               logical_not_438_false
                        movl              $1, %eax
                        jmp               logical_not_438_true
logical_not_438_false:  movl              $0, %eax
logical_not_438_true:   cmpl              $0, %eax
                        jz                if_439_next
                                                            #             error_syntax("expression expected within array index");
                        lea               14780+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #         }
                                                            # 
                                                            #         if (! token_advance_if("]")) {
if_439_next:
if_439_end:             lea               14936+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_440_false
                        movl              $1, %eax
                        jmp               logical_not_440_true
logical_not_440_false:  movl              $0, %eax
logical_not_440_true:   cmpl              $0, %eax
                        jz                if_441_next
                                                            #             error_syntax("closing bracket expected after array index");
                        lea               14944+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #         }
                                                            #             
                                                            #         if (! token_advance_if("=")) {
if_441_next:
if_441_end:             lea               15116+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_442_false
                        movl              $1, %eax
                        jmp               logical_not_442_true
logical_not_442_false:  movl              $0, %eax
logical_not_442_true:   cmpl              $0, %eax
                        jz                if_443_next
                                                            #             error_syntax("equal sign expected after array index");
                        lea               15124+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #         }
                                                            # 
                                                            #         compiler_assignment_statement_array_begin(cookie); // >>>>>>>>>>
if_443_next:
if_443_end:             lea               -4(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              compiler_assignment_statement_array_begin
                        addl              $4, %esp
                                                            #    
                                                            #         if (! syntax_expression()) {
                        call              syntax_expression
                        cmpl              $0, %eax
                        jnz               logical_not_444_false
                        movl              $1, %eax
                        jmp               logical_not_444_true
logical_not_444_false:  movl              $0, %eax
logical_not_444_true:   cmpl              $0, %eax
                        jz                if_445_next
                                                            #             error_syntax("expression expected after equal sign");
                        lea               15276+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #         }
                                                            # 
                                                            #         compiler_assignment_statement_array_end(cookie); // >>>>>>>>>>
if_445_next:
if_445_end:             lea               -4(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              compiler_assignment_statement_array_end
                        addl              $4, %esp
                                                            #         compiler_assignment_statement(variable_name); // >>>>>>>>>>
                        lea               -1028(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              compiler_assignment_statement
                        addl              $4, %esp
                                                            # 
                                                            #         return True;
                        movl              $1, %eax
                        jmp               syntax_assignment_statement_end
                                                            #     }
                                                            # 
                                                            #     return False;
if_437_next:
if_437_end:             movl              $0, %eax
                        jmp               syntax_assignment_statement_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # // while-statement
                                                            # //            while ( expression ) statement
                                                            # //
                                                            # syntax_while_statement() {
syntax_assignment_statement_end:
                        leave
                        ret
syntax_while_statement: enter             $1056, $0
                                                            #     char cookie[Str_size];
                                                            # 
                                                            #     if (! token_advance_if("while") ) {
                        lea               15424+string, %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_446_false
                        movl              $1, %eax
                        jmp               logical_not_446_true
logical_not_446_false:  movl              $0, %eax
logical_not_446_true:   cmpl              $0, %eax
                        jz                if_447_next
                                                            #         return False;
                        movl              $0, %eax
                        jmp               syntax_while_statement_end
                                                            #     }
                                                            # 
                                                            #     if (! token_advance_if("(") ) {
if_447_next:
if_447_end:             lea               15448+string, %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_448_false
                        movl              $1, %eax
                        jmp               logical_not_448_true
logical_not_448_false:  movl              $0, %eax
logical_not_448_true:   cmpl              $0, %eax
                        jz                if_449_next
                                                            #         error_syntax("opening parenthesis expected after while keyword");
                        lea               15456+string, %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #     }
                                                            # 
                                                            #     compiler_while_statement_begin(cookie); // >>>>>>>>>>
if_449_next:
if_449_end:             lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              compiler_while_statement_begin
                        addl              $4, %esp
                                                            # 
                                                            #     if (! syntax_expression()) {
                        call              syntax_expression
                        cmpl              $0, %eax
                        jnz               logical_not_450_false
                        movl              $1, %eax
                        jmp               logical_not_450_true
logical_not_450_false:  movl              $0, %eax
logical_not_450_true:   cmpl              $0, %eax
                        jz                if_451_next
                                                            #         error_syntax("expression expected in while statement");
                        lea               15652+string, %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #     }
                                                            # 
                                                            #     compiler_while_statement_test(cookie); // >>>>>>>>>>
if_451_next:
if_451_end:             lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              compiler_while_statement_test
                        addl              $4, %esp
                                                            # 
                                                            #     if (! token_advance_if(")") ) {
                        lea               15808+string, %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_452_false
                        movl              $1, %eax
                        jmp               logical_not_452_true
logical_not_452_false:  movl              $0, %eax
logical_not_452_true:   cmpl              $0, %eax
                        jz                if_453_next
                                                            #         error_syntax("closing parenthesis expected after while statement");
                        lea               15816+string, %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #     }
                                                            # 
                                                            #     if (! syntax_statement() ) {
if_453_next:
if_453_end:             call              syntax_statement
                        cmpl              $0, %eax
                        jnz               logical_not_454_false
                        movl              $1, %eax
                        jmp               logical_not_454_true
logical_not_454_false:  movl              $0, %eax
logical_not_454_true:   cmpl              $0, %eax
                        jz                if_455_next
                                                            #         error_syntax("statement expected after while");
                        lea               16020+string, %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #     }
                                                            # 
                                                            #     compiler_while_statement_end(cookie); // >>>>>>>>>>
if_455_next:
if_455_end:             lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              compiler_while_statement_end
                        addl              $4, %esp
                                                            # 
                                                            #     return True;
                        movl              $1, %eax
                        jmp               syntax_while_statement_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # // if-statement
                                                            # //            if ( expression ) statement else statement
                                                            # //            if ( expression ) statement
                                                            # //
                                                            # syntax_if_statement() {
syntax_while_statement_end:
                        leave
                        ret
syntax_if_statement:    enter             $1056, $0
                                                            #     char cookie[Str_size];
                                                            # 
                                                            #     if (! token_advance_if("if") ) {
                        lea               16144+string, %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_456_false
                        movl              $1, %eax
                        jmp               logical_not_456_true
logical_not_456_false:  movl              $0, %eax
logical_not_456_true:   cmpl              $0, %eax
                        jz                if_457_next
                                                            #         return False;
                        movl              $0, %eax
                        jmp               syntax_if_statement_end
                                                            #     }
                                                            # 
                                                            #     if (! token_advance_if("(") ) {
if_457_next:
if_457_end:             lea               16156+string, %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_458_false
                        movl              $1, %eax
                        jmp               logical_not_458_true
logical_not_458_false:  movl              $0, %eax
logical_not_458_true:   cmpl              $0, %eax
                        jz                if_459_next
                                                            #         error_syntax("opening parenthesis expected after if keyword");
                        lea               16164+string, %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #     }
                                                            # 
                                                            #     if (! syntax_expression()) {
if_459_next:
if_459_end:             call              syntax_expression
                        cmpl              $0, %eax
                        jnz               logical_not_460_false
                        movl              $1, %eax
                        jmp               logical_not_460_true
logical_not_460_false:  movl              $0, %eax
logical_not_460_true:   cmpl              $0, %eax
                        jz                if_461_next
                                                            #         error_syntax("expression expected in if statement");
                        lea               16348+string, %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #     }
                                                            # 
                                                            #     if (! token_advance_if(")") ) {
if_461_next:
if_461_end:             lea               16492+string, %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_462_false
                        movl              $1, %eax
                        jmp               logical_not_462_true
logical_not_462_false:  movl              $0, %eax
logical_not_462_true:   cmpl              $0, %eax
                        jz                if_463_next
                                                            #         error_syntax("closing parenthesis expected after if statement");
                        lea               16500+string, %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #     }
                                                            # 
                                                            #     compiler_if_statement_test_fn(cookie); // >>>>>>>>>>
if_463_next:
if_463_end:             lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              compiler_if_statement_test_fn
                        addl              $4, %esp
                                                            # 
                                                            #     if (! syntax_statement() ) {
                        call              syntax_statement
                        cmpl              $0, %eax
                        jnz               logical_not_464_false
                        movl              $1, %eax
                        jmp               logical_not_464_true
logical_not_464_false:  movl              $0, %eax
logical_not_464_true:   cmpl              $0, %eax
                        jz                if_465_next
                                                            #         error_syntax("statement expected after if");
                        lea               16692+string, %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #     }
                                                            # 
                                                            #     if (! token_advance_if("else") ) {
if_465_next:
if_465_end:             lea               16804+string, %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_466_false
                        movl              $1, %eax
                        jmp               logical_not_466_true
logical_not_466_false:  movl              $0, %eax
logical_not_466_true:   cmpl              $0, %eax
                        jz                if_467_next
                                                            #          compiler_if_statement_no_else_fn(cookie); // >>>>>>>>>>
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              compiler_if_statement_no_else_fn
                        addl              $4, %esp
                                                            #          return True;
                        movl              $1, %eax
                        jmp               syntax_if_statement_end
                                                            #     }
                                                            # 
                                                            #     compiler_if_statement_else_fn(cookie); // >>>>>>>>>>
if_467_next:
if_467_end:             lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              compiler_if_statement_else_fn
                        addl              $4, %esp
                                                            # 
                                                            #     if (! syntax_statement() ) {
                        call              syntax_statement
                        cmpl              $0, %eax
                        jnz               logical_not_468_false
                        movl              $1, %eax
                        jmp               logical_not_468_true
logical_not_468_false:  movl              $0, %eax
logical_not_468_true:   cmpl              $0, %eax
                        jz                if_469_next
                                                            #         error_syntax("statement expected after else");
                        lea               16824+string, %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #     }
                                                            # 
                                                            #     compiler_if_statement_else_end_fn(cookie); // >>>>>>>>>>
if_469_next:
if_469_end:             lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              compiler_if_statement_else_end_fn
                        addl              $4, %esp
                                                            # 
                                                            #     return True;
                        movl              $1, %eax
                        jmp               syntax_if_statement_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # // enumerator
                                                            # //            identifier = integer-constant
                                                            # //            identifier
                                                            # //
                                                            # syntax_enumerator() {
syntax_if_statement_end:
                        leave
                        ret
syntax_enumerator:      enter             $1056, $0
                                                            #     char constant_name[Str_size];
                                                            # 
                                                            #     if (! token_type_is(Token_t_identifier) ) {
                        movl              $4, %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              token_type_is
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_470_false
                        movl              $1, %eax
                        jmp               logical_not_470_true
logical_not_470_false:  movl              $0, %eax
logical_not_470_true:   cmpl              $0, %eax
                        jz                if_471_next
                                                            #         return False;
                        movl              $0, %eax
                        jmp               syntax_enumerator_end
                                                            #     }
                                                            #     
                                                            #     copy(constant_name, token_text);
if_471_next:
if_471_end:             lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        lea               4197420+global, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              copy
                        addl              $8, %esp
                                                            #     token_advance();
                        call              token_advance
                                                            # 
                                                            #     if (token_text_is("=")) {
                        lea               16944+string, %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              token_text_is
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jz                if_472_next
                                                            #         token_advance();
                        call              token_advance
                                                            # 
                                                            #         if (! token_type_is(Token_t_integer_constant) ) {
                        movl              $2, %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              token_type_is
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_473_false
                        movl              $1, %eax
                        jmp               logical_not_473_true
logical_not_473_false:  movl              $0, %eax
logical_not_473_true:   cmpl              $0, %eax
                        jz                if_474_next
                                                            #             error_syntax("integer constant expected after equal sign in enum declaration");
                        lea               16952+string, %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #         }
                                                            # 
                                                            #         compiler_enumerator_assigned_value(constant_name, token_text); // >>>>>>>>>>
if_474_next:
if_474_end:             lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        lea               4197420+global, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              compiler_enumerator_assigned_value
                        addl              $8, %esp
                                                            #         token_advance();
                        call              token_advance
                                                            #         return True;
                        movl              $1, %eax
                        jmp               syntax_enumerator_end
                                                            #     }
                                                            # 
                                                            #     compiler_enumerator(constant_name); // >>>>>>>>>>
if_472_next:
if_472_end:             lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              compiler_enumerator
                        addl              $4, %esp
                                                            #     return True;
                        movl              $1, %eax
                        jmp               syntax_enumerator_end
                                                            # }
                                                            # 
                                                            # 
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # // enumerator-list
                                                            # //            enumerator , enumerator-list
                                                            # //            enumerator
                                                            # //            
                                                            # syntax_enumerator_list() {
syntax_enumerator_end:
                        leave
                        ret
syntax_enumerator_list: enter             $32, $0
                                                            #     if (! syntax_enumerator() ) {
                        call              syntax_enumerator
                        cmpl              $0, %eax
                        jnz               logical_not_475_false
                        movl              $1, %eax
                        jmp               logical_not_475_true
logical_not_475_false:  movl              $0, %eax
logical_not_475_true:   cmpl              $0, %eax
                        jz                if_476_next
                                                            #         return False;
                        movl              $0, %eax
                        jmp               syntax_enumerator_list_end
                                                            #     }
                                                            # 
                                                            #     if (token_advance_if(",")) {
if_476_next:
if_476_end:             lea               17204+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jz                if_477_next
                                                            # 
                                                            #         if (! syntax_enumerator_list() ) {
                        call              syntax_enumerator_list
                        cmpl              $0, %eax
                        jnz               logical_not_478_false
                        movl              $1, %eax
                        jmp               logical_not_478_true
logical_not_478_false:  movl              $0, %eax
logical_not_478_true:   cmpl              $0, %eax
                        jz                if_479_next
                                                            #             error_syntax("identifier expected after comma in enum declaration");
                        lea               17212+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #         }
                                                            #     }
if_479_next:
                                                            # 
                                                            #     compiler_enumerator_list_end(); // >>>>>>>>>>
if_479_end:
if_477_next:
if_477_end:             call              compiler_enumerator_list_end
                                                            # 
                                                            #     return True;
                        movl              $1, %eax
                        jmp               syntax_enumerator_list_end
                                                            # }
                                                            # 
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # // type-specifier
                                                            # //            int
                                                            # //            char
                                                            # //
                                                            # syntax_type_specifier() {
syntax_enumerator_list_end:
                        leave
                        ret
syntax_type_specifier:  enter             $32, $0
                                                            # 
                                                            #     if (token_text_is("int") || token_text_is("char")) {
                        lea               17420+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              token_text_is
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jnz               logical_or_480_true
                        lea               17436+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              token_text_is
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jnz               logical_or_480_true
                        movl              $0, %eax
                        jmp               logical_or_480_false
logical_or_480_true:    movl              $1, %eax
logical_or_480_false:   cmpl              $0, %eax
                        jz                if_481_next
                                                            #         token_advance();
                        call              token_advance
                                                            #         return True;
                        movl              $1, %eax
                        jmp               syntax_type_specifier_end
                                                            #     }
                                                            # 
                                                            #     return False;
if_481_next:
if_481_end:             movl              $0, %eax
                        jmp               syntax_type_specifier_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # // declaration
                                                            # //            type-specifier identifier ;
                                                            # //            type-specifier identifier [ integer-constant ] ;
                                                            # //            type-specifier identifier [ identifier ] ;
                                                            # //            enum { enumerator-list } ;
                                                            # //
                                                            # syntax_declaration() {
syntax_type_specifier_end:
                        leave
                        ret
syntax_declaration:     enter             $2080, $0
                                                            #     char variable_name[Str_size];
                                                            #     char array_length[Str_size];
                                                            # 
                                                            #     if (syntax_type_specifier()) {
                        call              syntax_type_specifier
                        cmpl              $0, %eax
                        jz                if_482_next
                                                            #     
                                                            #         if (! token_type_is(Token_t_identifier)) {
                        movl              $4, %eax
                        movl              %eax, -2052(%ebp)
                        movl              -2052(%ebp), %eax
                        pushl             %eax
                        call              token_type_is
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_483_false
                        movl              $1, %eax
                        jmp               logical_not_483_true
logical_not_483_false:  movl              $0, %eax
logical_not_483_true:   cmpl              $0, %eax
                        jz                if_484_next
                                                            #             error_syntax("identifier expected after type specifier in declaration");
                        lea               17456+string, %eax
                        movl              %eax, -2052(%ebp)
                        movl              -2052(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #         }
                                                            # 
                                                            #         copy(variable_name, token_text);
if_484_next:
if_484_end:             lea               -1024(%ebp), %eax
                        movl              %eax, -2052(%ebp)
                        lea               4197420+global, %eax
                        movl              %eax, -2056(%ebp)
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        movl              -2052(%ebp), %eax
                        pushl             %eax
                        call              copy
                        addl              $8, %esp
                                                            #         token_advance();
                        call              token_advance
                                                            # 
                                                            #         // simple type declaration -------------------------------------------
                                                            #         if (! token_text_is("[")) {
                        lea               17680+string, %eax
                        movl              %eax, -2052(%ebp)
                        movl              -2052(%ebp), %eax
                        pushl             %eax
                        call              token_text_is
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_485_false
                        movl              $1, %eax
                        jmp               logical_not_485_true
logical_not_485_false:  movl              $0, %eax
logical_not_485_true:   cmpl              $0, %eax
                        jz                if_486_next
                                                            #             compiler_declaration_integer(variable_name); // >>>>>>>>>>
                        lea               -1024(%ebp), %eax
                        movl              %eax, -2052(%ebp)
                        movl              -2052(%ebp), %eax
                        pushl             %eax
                        call              compiler_declaration_integer
                        addl              $4, %esp
                                                            # 
                                                            #             if (! token_advance_if(";") ) {
                        lea               17688+string, %eax
                        movl              %eax, -2052(%ebp)
                        movl              -2052(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_487_false
                        movl              $1, %eax
                        jmp               logical_not_487_true
logical_not_487_false:  movl              $0, %eax
logical_not_487_true:   cmpl              $0, %eax
                        jz                if_488_next
                                                            #                 error_syntax("semicolon expected after declaration");
                        lea               17696+string, %eax
                        movl              %eax, -2052(%ebp)
                        movl              -2052(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #             }
                                                            # 
                                                            #             return True;
if_488_next:
if_488_end:             movl              $1, %eax
                        jmp               syntax_declaration_end
                                                            #         }
                                                            # 
                                                            #         // array type declaration -------------------------------------------
                                                            #         copy(array_length, token_lookahead_text);
if_486_next:
if_486_end:             lea               -2048(%ebp), %eax
                        movl              %eax, -2052(%ebp)
                        lea               4198444+global, %eax
                        movl              %eax, -2056(%ebp)
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        movl              -2052(%ebp), %eax
                        pushl             %eax
                        call              copy
                        addl              $8, %esp
                                                            # 
                                                            #         if (token_lookahead_type_is(Token_t_integer_constant)) {
                        movl              $2, %eax
                        movl              %eax, -2052(%ebp)
                        movl              -2052(%ebp), %eax
                        pushl             %eax
                        call              token_lookahead_type_is
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jz                if_489_next
                                                            #             compiler_declaration_integer_array_constant_length_specifier(variable_name, array_length); // >>>>>>>>>>
                        lea               -1024(%ebp), %eax
                        movl              %eax, -2052(%ebp)
                        lea               -2048(%ebp), %eax
                        movl              %eax, -2056(%ebp)
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        movl              -2052(%ebp), %eax
                        pushl             %eax
                        call              compiler_declaration_integer_array_constant_length_specifier
                        addl              $8, %esp
                                                            #         }
                                                            #         else if (token_lookahead_type_is(Token_t_identifier)) {
                        jmp               if_489_end
if_489_next:            movl              $4, %eax
                        movl              %eax, -2052(%ebp)
                        movl              -2052(%ebp), %eax
                        pushl             %eax
                        call              token_lookahead_type_is
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jz                if_490_next
                                                            #             compiler_declaration_integer_array_identifier_length_specifier(variable_name, array_length); // >>>>>>>>>>
                        lea               -1024(%ebp), %eax
                        movl              %eax, -2052(%ebp)
                        lea               -2048(%ebp), %eax
                        movl              %eax, -2056(%ebp)
                        movl              -2056(%ebp), %eax
                        pushl             %eax
                        movl              -2052(%ebp), %eax
                        pushl             %eax
                        call              compiler_declaration_integer_array_identifier_length_specifier
                        addl              $8, %esp
                                                            #         }
                                                            #         else {
                        jmp               if_490_end
                                                            #             error_syntax("identifier or integer constant expected after opening bracket in array declaration");
if_490_next:            lea               17844+string, %eax
                        movl              %eax, -2052(%ebp)
                        movl              -2052(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #         }
                                                            # 
                                                            #         token_advance();
if_490_end:
if_489_end:             call              token_advance
                                                            #         token_advance();
                        call              token_advance
                                                            # 
                                                            #         if (! token_advance_if("]") ) {
                        lea               18176+string, %eax
                        movl              %eax, -2052(%ebp)
                        movl              -2052(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_491_false
                        movl              $1, %eax
                        jmp               logical_not_491_true
logical_not_491_false:  movl              $0, %eax
logical_not_491_true:   cmpl              $0, %eax
                        jz                if_492_next
                                                            #             error_syntax("closing bracket expected in array declaration");
                        lea               18184+string, %eax
                        movl              %eax, -2052(%ebp)
                        movl              -2052(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #         }
                                                            # 
                                                            #         if (!token_advance_if(";")) {
if_492_next:
if_492_end:             lea               18368+string, %eax
                        movl              %eax, -2052(%ebp)
                        movl              -2052(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_493_false
                        movl              $1, %eax
                        jmp               logical_not_493_true
logical_not_493_false:  movl              $0, %eax
logical_not_493_true:   cmpl              $0, %eax
                        jz                if_494_next
                                                            #             error_syntax("semicolon expected after array declaration");
                        lea               18376+string, %eax
                        movl              %eax, -2052(%ebp)
                        movl              -2052(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #         }
                                                            # 
                                                            #         return True;
if_494_next:
if_494_end:             movl              $1, %eax
                        jmp               syntax_declaration_end
                                                            # 
                                                            #     }
                                                            # 
                                                            #     // enum declaration ------------------------------------------------------
                                                            #     if (token_advance_if("enum")) {
if_482_next:
if_482_end:             lea               18548+string, %eax
                        movl              %eax, -2052(%ebp)
                        movl              -2052(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jz                if_495_next
                                                            # 
                                                            #         if (! token_advance_if("{")) {
                        lea               18568+string, %eax
                        movl              %eax, -2052(%ebp)
                        movl              -2052(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_496_false
                        movl              $1, %eax
                        jmp               logical_not_496_true
logical_not_496_false:  movl              $0, %eax
logical_not_496_true:   cmpl              $0, %eax
                        jz                if_497_next
                                                            #             error_syntax("opening brace expected after enum keyword");
                        lea               18576+string, %eax
                        movl              %eax, -2052(%ebp)
                        movl              -2052(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #         }
                                                            # 
                                                            #         if (! syntax_enumerator_list() ) {
if_497_next:
if_497_end:             call              syntax_enumerator_list
                        cmpl              $0, %eax
                        jnz               logical_not_498_false
                        movl              $1, %eax
                        jmp               logical_not_498_true
logical_not_498_false:  movl              $0, %eax
logical_not_498_true:   cmpl              $0, %eax
                        jz                if_499_next
                                                            #             error_syntax("enumerator list expected");
                        lea               18744+string, %eax
                        movl              %eax, -2052(%ebp)
                        movl              -2052(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #         }
                                                            # 
                                                            #         if (! token_advance_if("}")) {
if_499_next:
if_499_end:             lea               18844+string, %eax
                        movl              %eax, -2052(%ebp)
                        movl              -2052(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_500_false
                        movl              $1, %eax
                        jmp               logical_not_500_true
logical_not_500_false:  movl              $0, %eax
logical_not_500_true:   cmpl              $0, %eax
                        jz                if_501_next
                                                            #             error_syntax("closing brace expected after enumerator list");
                        lea               18852+string, %eax
                        movl              %eax, -2052(%ebp)
                        movl              -2052(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #         }
                                                            # 
                                                            #         if (! token_advance_if(";")) {
if_501_next:
if_501_end:             lea               19032+string, %eax
                        movl              %eax, -2052(%ebp)
                        movl              -2052(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_502_false
                        movl              $1, %eax
                        jmp               logical_not_502_true
logical_not_502_false:  movl              $0, %eax
logical_not_502_true:   cmpl              $0, %eax
                        jz                if_503_next
                                                            #             error_syntax("semicolon expected after enumerator declaration"); // ????
                        lea               19040+string, %eax
                        movl              %eax, -2052(%ebp)
                        movl              -2052(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #         }
                                                            # 
                                                            #         return True;
if_503_next:
if_503_end:             movl              $1, %eax
                        jmp               syntax_declaration_end
                                                            #     }
                                                            # 
                                                            #     return False;
if_495_next:
if_495_end:             movl              $0, %eax
                        jmp               syntax_declaration_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # // local-declaration-list
                                                            # //            declaration local-declaration-list
                                                            # //            declaration
                                                            # //
                                                            # syntax_local_declaration_list() {
syntax_declaration_end:
                        leave
                        ret
syntax_local_declaration_list: enter      $32, $0
                                                            #     if (! syntax_declaration() ) {
                        call              syntax_declaration
                        cmpl              $0, %eax
                        jnz               logical_not_504_false
                        movl              $1, %eax
                        jmp               logical_not_504_true
logical_not_504_false:  movl              $0, %eax
logical_not_504_true:   cmpl              $0, %eax
                        jz                if_505_next
                                                            #         return False;
                        movl              $0, %eax
                        jmp               syntax_local_declaration_list_end
                                                            #     }
                                                            # 
                                                            #     syntax_local_declaration_list();
if_505_next:
if_505_end:             call              syntax_local_declaration_list
                                                            # 
                                                            #     return True;
                        movl              $1, %eax
                        jmp               syntax_local_declaration_list_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # // compound-statement
                                                            # //            { statement-list } 
                                                            # //
                                                            # syntax_compound_statement() {
syntax_local_declaration_list_end:
                        leave
                        ret
syntax_compound_statement: enter          $32, $0
                                                            # 
                                                            #     if (! token_advance_if("{") ) {
                        lea               19232+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_506_false
                        movl              $1, %eax
                        jmp               logical_not_506_true
logical_not_506_false:  movl              $0, %eax
logical_not_506_true:   cmpl              $0, %eax
                        jz                if_507_next
                                                            #         return False;
                        movl              $0, %eax
                        jmp               syntax_compound_statement_end
                                                            #     }
                                                            # 
                                                            #     syntax_statement_list();
if_507_next:
if_507_end:             call              syntax_statement_list
                                                            # 
                                                            #     if (! token_advance_if("}") ) {
                        lea               19240+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_508_false
                        movl              $1, %eax
                        jmp               logical_not_508_true
logical_not_508_false:  movl              $0, %eax
logical_not_508_true:   cmpl              $0, %eax
                        jz                if_509_next
                                                            #         error_syntax("closing brace expected at end of compound statement");
                        lea               19248+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #     }
                                                            # 
                                                            #     return True;
if_509_next:
if_509_end:             movl              $1, %eax
                        jmp               syntax_compound_statement_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # // statement
                                                            # //           if-statement
                                                            # //           while-statement
                                                            # //           compound-statement
                                                            # //           assignment-statement ;
                                                            # //           expression-statement ;
                                                            # //           return-statement ;
                                                            # //
                                                            # syntax_statement() {
syntax_compound_statement_end:
                        leave
                        ret
syntax_statement:       enter             $32, $0
                                                            # 
                                                            #     compiler_output_source_as_comment(); // >>>>>>>>>>
                        call              compiler_output_source_as_comment
                                                            # 
                                                            #     if (syntax_if_statement() || 
                        call              syntax_if_statement
                        cmpl              $0, %eax
                        jnz               logical_or_510_true
                        call              syntax_while_statement
                        cmpl              $0, %eax
                        jnz               logical_or_510_true
                        call              syntax_compound_statement
                        cmpl              $0, %eax
                        jnz               logical_or_510_true
                        movl              $0, %eax
                        jmp               logical_or_510_false
logical_or_510_true:    movl              $1, %eax
logical_or_510_false:   cmpl              $0, %eax
                        jz                if_511_next
                                                            #         syntax_while_statement() ||
                                                            #         syntax_compound_statement() ) {
                                                            # 
                                                            #         return True;
                        movl              $1, %eax
                        jmp               syntax_statement_end
                                                            #     }
                                                            # 
                                                            #     if (syntax_assignment_statement() ||
if_511_next:
if_511_end:             call              syntax_assignment_statement
                        cmpl              $0, %eax
                        jnz               logical_or_512_true
                        call              syntax_expression_statement
                        cmpl              $0, %eax
                        jnz               logical_or_512_true
                        call              syntax_return_statement
                        cmpl              $0, %eax
                        jnz               logical_or_512_true
                        movl              $0, %eax
                        jmp               logical_or_512_false
logical_or_512_true:    movl              $1, %eax
logical_or_512_false:   cmpl              $0, %eax
                        jz                if_513_next
                                                            #         syntax_expression_statement() ||
                                                            #         syntax_return_statement() ) {
                                                            # 
                                                            #         if (! token_advance_if(";") ) {
                        lea               19456+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_514_false
                        movl              $1, %eax
                        jmp               logical_not_514_true
logical_not_514_false:  movl              $0, %eax
logical_not_514_true:   cmpl              $0, %eax
                        jz                if_515_next
                                                            #             error_syntax("semicolon expected after statement");
                        lea               19464+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #         }
                                                            # 
                                                            #         return True;
if_515_next:
if_515_end:             movl              $1, %eax
                        jmp               syntax_statement_end
                                                            #     }
                                                            # 
                                                            #     return False;
if_513_next:
if_513_end:             movl              $0, %eax
                        jmp               syntax_statement_end
                                                            # }
                                                            # 
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # // statement-list
                                                            # //            statement statement-list
                                                            # //            statement
                                                            # //            
                                                            # syntax_statement_list() {
syntax_statement_end:
                        leave
                        ret
syntax_statement_list:  enter             $32, $0
                                                            # 
                                                            #     if (! syntax_statement() ) {
                        call              syntax_statement
                        cmpl              $0, %eax
                        jnz               logical_not_516_false
                        movl              $1, %eax
                        jmp               logical_not_516_true
logical_not_516_false:  movl              $0, %eax
logical_not_516_true:   cmpl              $0, %eax
                        jz                if_517_next
                                                            #         return False;
                        movl              $0, %eax
                        jmp               syntax_statement_list_end
                                                            #     }
                                                            # 
                                                            #     syntax_statement_list();
if_517_next:
if_517_end:             call              syntax_statement_list
                                                            #     return True;
                        movl              $1, %eax
                        jmp               syntax_statement_list_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # // function-argument-declaration
                                                            # //            type-specifier identifier
                                                            # //            type-specifier identifier []
                                                            # //
                                                            # syntax_function_argument_declaration(int argument_no) {
syntax_statement_list_end:
                        leave
                        ret
syntax_function_argument_declaration: enter $1060, $0
                                                            #     int argument_type;
                                                            #     char argument_name[Str_size];
                                                            # 
                                                            #     if (! syntax_type_specifier() ) {
                        call              syntax_type_specifier
                        cmpl              $0, %eax
                        jnz               logical_not_518_false
                        movl              $1, %eax
                        jmp               logical_not_518_true
logical_not_518_false:  movl              $0, %eax
logical_not_518_true:   cmpl              $0, %eax
                        jz                if_519_next
                                                            #         return False;
                        movl              $0, %eax
                        jmp               syntax_function_argument_declaration_end
                                                            #     }
                                                            # 
                                                            #     if (! token_type_is(Token_t_identifier) ) {
if_519_next:
if_519_end:             movl              $4, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              token_type_is
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_520_false
                        movl              $1, %eax
                        jmp               logical_not_520_true
logical_not_520_false:  movl              $0, %eax
logical_not_520_true:   cmpl              $0, %eax
                        jz                if_521_next
                                                            #         error_syntax("identifier expected after type specifier in function definition");
                        lea               19604+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #     }
                                                            # 
                                                            #     copy(argument_name, token_text);
if_521_next:
if_521_end:             lea               -1028(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        lea               4197420+global, %eax
                        movl              %eax, -1036(%ebp)
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              copy
                        addl              $8, %esp
                                                            #     token_advance();
                        call              token_advance
                                                            # 
                                                            #     if (token_advance_if("[")) {
                        lea               19860+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jz                if_522_next
                                                            #         argument_type = Compiler_t_integer_pointer;
                        movl              $0, %eax
                        movl              %eax, -4(%ebp)
                                                            # 
                                                            #         if (! token_advance_if("]") ) {
                        lea               19868+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_523_false
                        movl              $1, %eax
                        jmp               logical_not_523_true
logical_not_523_false:  movl              $0, %eax
logical_not_523_true:   cmpl              $0, %eax
                        jz                if_524_next
                                                            #             error_syntax("closing bracket expected after array argument declaration");
                        lea               19876+string, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #         }
                                                            #     } else {
if_524_next:
if_524_end:             jmp               if_522_end
                                                            #         argument_type = Compiler_t_integer;
if_522_next:            movl              $1, %eax
                        movl              %eax, -4(%ebp)
                                                            #     }
                                                            # 
                                                            #     compiler_function_argument_declaration_item(argument_name, argument_type, argument_no + 1); // >>>>>>>>>>
if_522_end:             lea               -1028(%ebp), %eax
                        movl              %eax, -1032(%ebp)
                        movl              -4(%ebp), %eax
                        movl              %eax, -1036(%ebp)
                        movl              8(%ebp), %eax
                        movl              %eax, -1040(%ebp)
                        movl              $1, %eax
                        addl              -1040(%ebp), %eax
                        movl              %eax, -1040(%ebp)
                        movl              -1040(%ebp), %eax
                        pushl             %eax
                        movl              -1036(%ebp), %eax
                        pushl             %eax
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        call              compiler_function_argument_declaration_item
                        addl              $12, %esp
                                                            #     return True;
                        movl              $1, %eax
                        jmp               syntax_function_argument_declaration_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # // function-argument-declaration-list
                                                            # //            function-argument-declaration , function-argument-declaration-list
                                                            # //            function-argument-declaration
                                                            # //
                                                            # syntax_function_argument_declaration_list(int argument_no) {
syntax_function_argument_declaration_end:
                        leave
                        ret
syntax_function_argument_declaration_list: enter $32, $0
                                                            # 
                                                            #     if (! syntax_function_argument_declaration(argument_no) ) {
                        movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              syntax_function_argument_declaration
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_525_false
                        movl              $1, %eax
                        jmp               logical_not_525_true
logical_not_525_false:  movl              $0, %eax
logical_not_525_true:   cmpl              $0, %eax
                        jz                if_526_next
                                                            #         return False;
                        movl              $0, %eax
                        jmp               syntax_function_argument_declaration_list_end
                                                            #     }
                                                            # 
                                                            #     if (! token_advance_if(",") ) {
if_526_next:
if_526_end:             lea               20108+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_527_false
                        movl              $1, %eax
                        jmp               logical_not_527_true
logical_not_527_false:  movl              $0, %eax
logical_not_527_true:   cmpl              $0, %eax
                        jz                if_528_next
                                                            #         return True;
                        movl              $1, %eax
                        jmp               syntax_function_argument_declaration_list_end
                                                            #     }
                                                            # 
                                                            #     if (! syntax_function_argument_declaration_list(argument_no + 1) ) {
if_528_next:
if_528_end:             movl              8(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        movl              $1, %eax
                        addl              -4(%ebp), %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              syntax_function_argument_declaration_list
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_529_false
                        movl              $1, %eax
                        jmp               logical_not_529_true
logical_not_529_false:  movl              $0, %eax
logical_not_529_true:   cmpl              $0, %eax
                        jz                if_530_next
                                                            #         error_syntax("function argument expected");
                        lea               20116+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #     }
                                                            # 
                                                            #     return True;
if_530_next:
if_530_end:             movl              $1, %eax
                        jmp               syntax_function_argument_declaration_list_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # // function-compound-statement
                                                            # //            { local-declaration-list statement-list } 
                                                            # //            { statement-list } 
                                                            # //
                                                            # syntax_function_compound_statement() {
syntax_function_argument_declaration_list_end:
                        leave
                        ret
syntax_function_compound_statement: enter $32, $0
                                                            #     
                                                            #     if (! token_advance_if("{") ) {
                        lea               20224+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_531_false
                        movl              $1, %eax
                        jmp               logical_not_531_true
logical_not_531_false:  movl              $0, %eax
logical_not_531_true:   cmpl              $0, %eax
                        jz                if_532_next
                                                            #         return False;
                        movl              $0, %eax
                        jmp               syntax_function_compound_statement_end
                                                            #     }
                                                            # 
                                                            #     syntax_local_declaration_list();
if_532_next:
if_532_end:             call              syntax_local_declaration_list
                                                            # 
                                                            #     compiler_function_compound_statement_locals_declared(); // >>>>>>>>>>
                        call              compiler_function_compound_statement_locals_declared
                                                            # 
                                                            #     syntax_statement_list();
                        call              syntax_statement_list
                                                            # 
                                                            #     if (! token_advance_if("}") ) {
                        lea               20232+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_533_false
                        movl              $1, %eax
                        jmp               logical_not_533_true
logical_not_533_false:  movl              $0, %eax
logical_not_533_true:   cmpl              $0, %eax
                        jz                if_534_next
                                                            #         error_syntax("closing brace expected at end of function");
                        lea               20240+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #     }
                                                            # 
                                                            #     return True;
if_534_next:
if_534_end:             movl              $1, %eax
                        jmp               syntax_function_compound_statement_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # // function-definition
                                                            # //            identifier( function-argument-declaration-list ) function-compound-statement
                                                            # //            identifier( ) function-compound-statement
                                                            # //
                                                            # syntax_function_definition() {
syntax_function_compound_statement_end:
                        leave
                        ret
syntax_function_definition: enter         $1056, $0
                                                            #     char function_name[Str_size];
                                                            # 
                                                            #     if (! (token_type_is(Token_t_identifier) && token_lookahead_text_is("(")) ) {
                        movl              $4, %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              token_type_is
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jz                logical_and_535_false
                        lea               20408+string, %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              token_lookahead_text_is
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jz                logical_and_535_false
                        movl              $1, %eax
                        jmp               logical_and_535_true
logical_and_535_false:  movl              $0, %eax
logical_and_535_true:   cmpl              $0, %eax
                        jnz               logical_not_536_false
                        movl              $1, %eax
                        jmp               logical_not_536_true
logical_not_536_false:  movl              $0, %eax
logical_not_536_true:   cmpl              $0, %eax
                        jz                if_537_next
                                                            #         return False;
                        movl              $0, %eax
                        jmp               syntax_function_definition_end
                                                            #     }
                                                            # 
                                                            #     copy(function_name, token_text);
if_537_next:
if_537_end:             lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        lea               4197420+global, %eax
                        movl              %eax, -1032(%ebp)
                        movl              -1032(%ebp), %eax
                        pushl             %eax
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              copy
                        addl              $8, %esp
                                                            #     token_advance();
                        call              token_advance
                                                            #     token_advance();
                        call              token_advance
                                                            # 
                                                            #     compiler_output_source_as_comment(); // >>>>>>>>>>
                        call              compiler_output_source_as_comment
                                                            # 
                                                            #     compiler_function_definition_begin(function_name); // >>>>>>>>>>
                        lea               -1024(%ebp), %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              compiler_function_definition_begin
                        addl              $4, %esp
                                                            # 
                                                            #     syntax_function_argument_declaration_list(0);
                        movl              $0, %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              syntax_function_argument_declaration_list
                        addl              $4, %esp
                                                            # 
                                                            #     if (! token_advance_if(")") ) {
                        lea               20416+string, %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              token_advance_if
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_538_false
                        movl              $1, %eax
                        jmp               logical_not_538_true
logical_not_538_false:  movl              $0, %eax
logical_not_538_true:   cmpl              $0, %eax
                        jz                if_539_next
                                                            #         error_syntax("closing parenthesis expected after function definintion");
                        lea               20424+string, %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #     }
                                                            # 
                                                            #     if (! syntax_function_compound_statement() ) {
if_539_next:
if_539_end:             call              syntax_function_compound_statement
                        cmpl              $0, %eax
                        jnz               logical_not_540_false
                        movl              $1, %eax
                        jmp               logical_not_540_true
logical_not_540_false:  movl              $0, %eax
logical_not_540_true:   cmpl              $0, %eax
                        jz                if_541_next
                                                            #         error_syntax("function body expected after function definintion");
                        lea               20648+string, %eax
                        movl              %eax, -1028(%ebp)
                        movl              -1028(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #     }
                                                            # 
                                                            #     compiler_function_definition_end(); // >>>>>>>>>>
if_541_next:
if_541_end:             call              compiler_function_definition_end
                                                            # 
                                                            #     return True;
                        movl              $1, %eax
                        jmp               syntax_function_definition_end
                                                            # }
                                                            # 
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # // global-declaration
                                                            # //            declaration
                                                            # //            function-definition
                                                            # //
                                                            # syntax_global_declaration() {
syntax_function_definition_end:
                        leave
                        ret
syntax_global_declaration: enter          $32, $0
                                                            # 
                                                            #     if (syntax_declaration()) {
                        call              syntax_declaration
                        cmpl              $0, %eax
                        jz                if_542_next
                                                            #         return True;
                        movl              $1, %eax
                        jmp               syntax_global_declaration_end
                                                            #     }
                                                            # 
                                                            #     if (syntax_function_definition()) {
if_542_next:
if_542_end:             call              syntax_function_definition
                        cmpl              $0, %eax
                        jz                if_543_next
                                                            #         return True;
                        movl              $1, %eax
                        jmp               syntax_global_declaration_end
                                                            #     }
                                                            # 
                                                            #     return False;
if_543_next:
if_543_end:             movl              $0, %eax
                        jmp               syntax_global_declaration_end
                                                            # }
                                                            # // ---------------------------------------------------------------------------
                                                            # // global-declaration-list
                                                            # //            global-declaration global-declaration-list
                                                            # //            global-declaration
                                                            # //
                                                            # syntax_global_declaration_list() {
syntax_global_declaration_end:
                        leave
                        ret
syntax_global_declaration_list: enter     $32, $0
                                                            # 
                                                            #     if (! syntax_global_declaration()) {
                        call              syntax_global_declaration
                        cmpl              $0, %eax
                        jnz               logical_not_544_false
                        movl              $1, %eax
                        jmp               logical_not_544_true
logical_not_544_false:  movl              $0, %eax
logical_not_544_true:   cmpl              $0, %eax
                        jz                if_545_next
                                                            #         return False;
                        movl              $0, %eax
                        jmp               syntax_global_declaration_list_end
                                                            #     }
                                                            # 
                                                            #     syntax_global_declaration_list();
if_545_next:
if_545_end:             call              syntax_global_declaration_list
                                                            #     return True;
                        movl              $1, %eax
                        jmp               syntax_global_declaration_list_end
                                                            # }
                                                            # 
                                                            # // ---------------------------------------------------------------------------
                                                            # // program
                                                            # //            global-declaration-list
                                                            # //
                                                            # syntax_program() {
syntax_global_declaration_list_end:
                        leave
                        ret
syntax_program:         enter             $32, $0
                                                            #     token_advance();
                        call              token_advance
                                                            # 
                                                            #     compiler_program_begin(); // >>>>>>>>>>
                        call              compiler_program_begin
                                                            # 
                                                            #     if (! syntax_global_declaration_list()) {
                        call              syntax_global_declaration_list
                        cmpl              $0, %eax
                        jnz               logical_not_546_false
                        movl              $1, %eax
                        jmp               logical_not_546_true
logical_not_546_false:  movl              $0, %eax
logical_not_546_true:   cmpl              $0, %eax
                        jz                if_547_next
                                                            #         error_syntax("function or variable declaration expected");
                        lea               20848+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #     }
                                                            # 
                                                            #     if (! token_type_is(Token_t_eof)) {
if_547_next:
if_547_end:             movl              $7, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              token_type_is
                        addl              $4, %esp
                        cmpl              $0, %eax
                        jnz               logical_not_548_false
                        movl              $1, %eax
                        jmp               logical_not_548_true
logical_not_548_false:  movl              $0, %eax
logical_not_548_true:   cmpl              $0, %eax
                        jz                if_549_next
                                                            #         error_syntax("end of file expected");
                        lea               21016+string, %eax
                        movl              %eax, -4(%ebp)
                        movl              -4(%ebp), %eax
                        pushl             %eax
                        call              error_syntax
                        addl              $4, %esp
                                                            #     }
                                                            # 
                                                            #     compiler_output_source_as_comment();
if_549_next:
if_549_end:             call              compiler_output_source_as_comment
                                                            #     compiler_program_end(); // >>>>>>>>>>
                        call              compiler_program_end
                                                            # 
                                                            #     return True;
                        movl              $1, %eax
                        jmp               syntax_program_end
                                                            # }
                                                            # 
                                                            # #ifndef _MSC_VER
                                                            # #line 2 "bminus.c"
                                                            # #endif
                                                            # 
                                                            # #ifdef _MSC_VER
                                                            # #include "builtinfuncs_ansic.h"
                                                            # #include "globals.h"
                                                            # #include "stringlib.h" 
                                                            # #include "errormessages.h"
                                                            # #include "preprocessor.h" 
                                                            # #include "token.h" 
                                                            # // #include "target_cvirtualmachine.h" 
                                                            # #include "target_javascript.h" 
                                                            # // #include "target_linuxassemblerx86.h" 
                                                            # #include "compiler.h" 
                                                            # #include "syntax.h" 
                                                            # #endif
                                                            # 
                                                            # 
                                                            # main() {
syntax_program_end:
                        leave
                        ret
main:                   enter             $32, $0
                                                            #     preprocessor_init();
                        call              preprocessor_init
                                                            #     token_init();
                        call              token_init
                                                            #     compiler_init();
                        call              compiler_init
                                                            #     target_init();
                        call              target_init
                                                            # 
                                                            #     syntax_program();
                        call              syntax_program
                                                            # 
                                                            #     exit(0);
                        movl              $0, %eax
                        movl              %eax, %ebx
                        movl              $1, %eax
                        int               $0x80
                                                            # 
                                                            # }
                                                            # 
main_end:
                        leave
                        ret
.bss
global:
.lcomm global_storage_space, 29432912

.data
string:
.int 0
.int 70 # 'F'
.int 105 # 'i'
.int 108 # 'l'
.int 101 # 'e'
.int 58 # ':'
.int 32 # ' '
.int 0
.int 76 # 'L'
.int 105 # 'i'
.int 110 # 'n'
.int 101 # 'e'
.int 32 # ' '
.int 110 # 'n'
.int 111 # 'o'
.int 58 # ':'
.int 32 # ' '
.int 0
.int 76 # 'L'
.int 105 # 'i'
.int 110 # 'n'
.int 101 # 'e'
.int 32 # ' '
.int 112 # 'p'
.int 111 # 'o'
.int 115 # 's'
.int 58 # ':'
.int 32 # ' '
.int 0
.int 67 # 'C'
.int 111 # 'o'
.int 109 # 'm'
.int 112 # 'p'
.int 105 # 'i'
.int 108 # 'l'
.int 101 # 'e'
.int 32 # ' '
.int 101 # 'e'
.int 114 # 'r'
.int 114 # 'r'
.int 111 # 'o'
.int 114 # 'r'
.int 58 # ':'
.int 32 # ' '
.int 0
.int 83 # 'S'
.int 121 # 'y'
.int 110 # 'n'
.int 116 # 't'
.int 97 # 'a'
.int 120 # 'x'
.int 32 # ' '
.int 101 # 'e'
.int 114 # 'r'
.int 114 # 'r'
.int 111 # 'o'
.int 114 # 'r'
.int 58 # ':'
.int 32 # ' '
.int 0
.int 80 # 'P'
.int 97 # 'a'
.int 114 # 'r'
.int 115 # 's'
.int 101 # 'e'
.int 32 # ' '
.int 101 # 'e'
.int 114 # 'r'
.int 114 # 'r'
.int 111 # 'o'
.int 114 # 'r'
.int 58 # ':'
.int 32 # ' '
.int 0
.int 69 # 'E'
.int 114 # 'r'
.int 114 # 'r'
.int 111 # 'o'
.int 114 # 'r'
.int 32 # ' '
.int 119 # 'w'
.int 104 # 'h'
.int 105 # 'i'
.int 108 # 'l'
.int 101 # 'e'
.int 32 # ' '
.int 114 # 'r'
.int 101 # 'e'
.int 97 # 'a'
.int 100 # 'd'
.int 105 # 'i'
.int 110 # 'n'
.int 103 # 'g'
.int 32 # ' '
.int 115 # 's'
.int 111 # 'o'
.int 117 # 'u'
.int 114 # 'r'
.int 99 # 'c'
.int 101 # 'e'
.int 58 # ':'
.int 32 # ' '
.int 0
.int 67 # 'C'
.int 111 # 'o'
.int 100 # 'd'
.int 101 # 'e'
.int 32 # ' '
.int 103 # 'g'
.int 101 # 'e'
.int 110 # 'n'
.int 101 # 'e'
.int 114 # 'r'
.int 97 # 'a'
.int 116 # 't'
.int 105 # 'i'
.int 111 # 'o'
.int 110 # 'n'
.int 32 # ' '
.int 101 # 'e'
.int 114 # 'r'
.int 114 # 'r'
.int 111 # 'o'
.int 114 # 'r'
.int 58 # ':'
.int 32 # ' '
.int 0
.int 73 # 'I'
.int 110 # 'n'
.int 116 # 't'
.int 101 # 'e'
.int 114 # 'r'
.int 110 # 'n'
.int 97 # 'a'
.int 108 # 'l'
.int 32 # ' '
.int 101 # 'e'
.int 114 # 'r'
.int 114 # 'r'
.int 111 # 'o'
.int 114 # 'r'
.int 0
.int 0
.int 0
.int 78 # 'N'
.int 47 # '/'
.int 65 # 'A'
.int 0
.int 0
.int 108 # 'l'
.int 105 # 'i'
.int 110 # 'n'
.int 101 # 'e'
.int 32 # ' '
.int 116 # 't'
.int 111 # 'o'
.int 111 # 'o'
.int 32 # ' '
.int 108 # 'l'
.int 111 # 'o'
.int 110 # 'n'
.int 103 # 'g'
.int 0
.int 0
.int 35 # '#'
.int 108 # 'l'
.int 105 # 'i'
.int 110 # 'n'
.int 101 # 'e'
.int 32 # ' '
.int 50 # '2'
.int 32 # ' '
.int 0
.int 0
.int 35 # '#'
.int 108 # 'l'
.int 105 # 'i'
.int 110 # 'n'
.int 101 # 'e'
.int 32 # ' '
.int 50 # '2'
.int 32 # ' '
.int 0
.int 35 # '#'
.int 0
.int 105 # 'i'
.int 110 # 'n'
.int 118 # 'v'
.int 97 # 'a'
.int 108 # 'l'
.int 105 # 'i'
.int 100 # 'd'
.int 32 # ' '
.int 99 # 'c'
.int 104 # 'h'
.int 97 # 'a'
.int 114 # 'r'
.int 97 # 'a'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 101 # 'e'
.int 115 # 's'
.int 99 # 'c'
.int 97 # 'a'
.int 112 # 'p'
.int 101 # 'e'
.int 32 # ' '
.int 115 # 's'
.int 101 # 'e'
.int 113 # 'q'
.int 117 # 'u'
.int 101 # 'e'
.int 110 # 'n'
.int 99 # 'c'
.int 101 # 'e'
.int 0
.int 115 # 's'
.int 116 # 't'
.int 114 # 'r'
.int 105 # 'i'
.int 110 # 'n'
.int 103 # 'g'
.int 32 # ' '
.int 108 # 'l'
.int 105 # 'i'
.int 116 # 't'
.int 101 # 'e'
.int 114 # 'r'
.int 97 # 'a'
.int 108 # 'l'
.int 32 # ' '
.int 110 # 'n'
.int 111 # 'o'
.int 116 # 't'
.int 32 # ' '
.int 116 # 't'
.int 101 # 'e'
.int 114 # 'r'
.int 109 # 'm'
.int 105 # 'i'
.int 110 # 'n'
.int 97 # 'a'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 0
.int 95 # '_'
.int 97 # 'a'
.int 98 # 'b'
.int 99 # 'c'
.int 100 # 'd'
.int 101 # 'e'
.int 102 # 'f'
.int 103 # 'g'
.int 104 # 'h'
.int 105 # 'i'
.int 106 # 'j'
.int 107 # 'k'
.int 108 # 'l'
.int 109 # 'm'
.int 110 # 'n'
.int 111 # 'o'
.int 112 # 'p'
.int 113 # 'q'
.int 114 # 'r'
.int 115 # 's'
.int 116 # 't'
.int 117 # 'u'
.int 118 # 'v'
.int 119 # 'w'
.int 120 # 'x'
.int 121 # 'y'
.int 122 # 'z'
.int 65 # 'A'
.int 66 # 'B'
.int 67 # 'C'
.int 68 # 'D'
.int 69 # 'E'
.int 70 # 'F'
.int 71 # 'G'
.int 72 # 'H'
.int 73 # 'I'
.int 74 # 'J'
.int 75 # 'K'
.int 76 # 'L'
.int 77 # 'M'
.int 78 # 'N'
.int 79 # 'O'
.int 80 # 'P'
.int 81 # 'Q'
.int 82 # 'R'
.int 83 # 'S'
.int 84 # 'T'
.int 85 # 'U'
.int 86 # 'V'
.int 87 # 'W'
.int 88 # 'X'
.int 89 # 'Y'
.int 90 # 'Z'
.int 48 # '0'
.int 49 # '1'
.int 50 # '2'
.int 51 # '3'
.int 52 # '4'
.int 53 # '5'
.int 54 # '6'
.int 55 # '7'
.int 56 # '8'
.int 57 # '9'
.int 0
.int 95 # '_'
.int 97 # 'a'
.int 98 # 'b'
.int 99 # 'c'
.int 100 # 'd'
.int 101 # 'e'
.int 102 # 'f'
.int 103 # 'g'
.int 104 # 'h'
.int 105 # 'i'
.int 106 # 'j'
.int 107 # 'k'
.int 108 # 'l'
.int 109 # 'm'
.int 110 # 'n'
.int 111 # 'o'
.int 112 # 'p'
.int 113 # 'q'
.int 114 # 'r'
.int 115 # 's'
.int 116 # 't'
.int 117 # 'u'
.int 118 # 'v'
.int 119 # 'w'
.int 120 # 'x'
.int 121 # 'y'
.int 122 # 'z'
.int 65 # 'A'
.int 66 # 'B'
.int 67 # 'C'
.int 68 # 'D'
.int 69 # 'E'
.int 70 # 'F'
.int 71 # 'G'
.int 72 # 'H'
.int 73 # 'I'
.int 74 # 'J'
.int 75 # 'K'
.int 76 # 'L'
.int 77 # 'M'
.int 78 # 'N'
.int 79 # 'O'
.int 80 # 'P'
.int 81 # 'Q'
.int 82 # 'R'
.int 83 # 'S'
.int 84 # 'T'
.int 85 # 'U'
.int 86 # 'V'
.int 87 # 'W'
.int 88 # 'X'
.int 89 # 'Y'
.int 90 # 'Z'
.int 0
.int 32 # ' '
.int 0
.int 32 # ' '
.int 0
.int 32 # ' '
.int 105 # 'i'
.int 110 # 'n'
.int 116 # 't'
.int 32 # ' '
.int 99 # 'c'
.int 104 # 'h'
.int 97 # 'a'
.int 114 # 'r'
.int 32 # ' '
.int 105 # 'i'
.int 102 # 'f'
.int 32 # ' '
.int 101 # 'e'
.int 108 # 'l'
.int 115 # 's'
.int 101 # 'e'
.int 32 # ' '
.int 119 # 'w'
.int 104 # 'h'
.int 105 # 'i'
.int 108 # 'l'
.int 101 # 'e'
.int 32 # ' '
.int 101 # 'e'
.int 110 # 'n'
.int 117 # 'u'
.int 109 # 'm'
.int 32 # ' '
.int 114 # 'r'
.int 101 # 'e'
.int 116 # 't'
.int 117 # 'u'
.int 114 # 'r'
.int 110 # 'n'
.int 32 # ' '
.int 0
.int 99 # 'c'
.int 104 # 'h'
.int 97 # 'a'
.int 114 # 'r'
.int 97 # 'a'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 99 # 'c'
.int 111 # 'o'
.int 110 # 'n'
.int 115 # 's'
.int 116 # 't'
.int 97 # 'a'
.int 110 # 'n'
.int 116 # 't'
.int 32 # ' '
.int 110 # 'n'
.int 111 # 'o'
.int 116 # 't'
.int 32 # ' '
.int 116 # 't'
.int 101 # 'e'
.int 114 # 'r'
.int 109 # 'm'
.int 105 # 'i'
.int 110 # 'n'
.int 97 # 'a'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 0
.int 48 # '0'
.int 49 # '1'
.int 50 # '2'
.int 51 # '3'
.int 52 # '4'
.int 53 # '5'
.int 54 # '6'
.int 55 # '7'
.int 56 # '8'
.int 57 # '9'
.int 0
.int 0
.int 60 # '<'
.int 62 # '>'
.int 61 # '='
.int 43 # '+'
.int 45 # '-'
.int 47 # '/'
.int 42 # '*'
.int 40 # '('
.int 41 # ')'
.int 91 # '['
.int 93 # ']'
.int 123 # '{'
.int 125 # '}'
.int 33 # '!'
.int 59 # ';'
.int 44 # ','
.int 0
.int 0
.int 0
.int 0
.int 0
.int 0
.int 35 # '#'
.int 32 # ' '
.int 0
.int 0
.int 0
.int 0
.int 58 # ':'
.int 0
.int 0
.int 32 # ' '
.int 0
.int 0
.int 32 # ' '
.int 0
.int 0
.int 44 # ','
.int 32 # ' '
.int 0
.int 0
.int 0
.int 0
.int 43 # '+'
.int 103 # 'g'
.int 108 # 'l'
.int 111 # 'o'
.int 98 # 'b'
.int 97 # 'a'
.int 108 # 'l'
.int 0
.int 43 # '+'
.int 115 # 's'
.int 116 # 't'
.int 114 # 'r'
.int 105 # 'i'
.int 110 # 'n'
.int 103 # 'g'
.int 0
.int 40 # '('
.int 44 # ','
.int 37 # '%'
.int 101 # 'e'
.int 98 # 'b'
.int 120 # 'x'
.int 44 # ','
.int 52 # '4'
.int 41 # ')'
.int 0
.int 40 # '('
.int 37 # '%'
.int 101 # 'e'
.int 98 # 'b'
.int 112 # 'p'
.int 41 # ')'
.int 0
.int 40 # '('
.int 37 # '%'
.int 101 # 'e'
.int 98 # 'b'
.int 112 # 'p'
.int 44 # ','
.int 37 # '%'
.int 101 # 'e'
.int 98 # 'b'
.int 120 # 'x'
.int 44 # ','
.int 52 # '4'
.int 41 # ')'
.int 0
.int 40 # '('
.int 44 # ','
.int 37 # '%'
.int 101 # 'e'
.int 98 # 'b'
.int 120 # 'x'
.int 44 # ','
.int 52 # '4'
.int 41 # ')'
.int 0
.int 40 # '('
.int 37 # '%'
.int 101 # 'e'
.int 98 # 'b'
.int 120 # 'x'
.int 41 # ')'
.int 0
.int 106 # 'j'
.int 109 # 'm'
.int 112 # 'p'
.int 0
.int 106 # 'j'
.int 109 # 'm'
.int 112 # 'p'
.int 0
.int 106 # 'j'
.int 103 # 'g'
.int 0
.int 106 # 'j'
.int 108 # 'l'
.int 0
.int 106 # 'j'
.int 101 # 'e'
.int 0
.int 106 # 'j'
.int 110 # 'n'
.int 101 # 'e'
.int 0
.int 106 # 'j'
.int 110 # 'n'
.int 122 # 'z'
.int 0
.int 106 # 'j'
.int 122 # 'z'
.int 0
.int 109 # 'm'
.int 111 # 'o'
.int 118 # 'v'
.int 108 # 'l'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 97 # 'a'
.int 120 # 'x'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 98 # 'b'
.int 120 # 'x'
.int 0
.int 36 # '$'
.int 0
.int 109 # 'm'
.int 111 # 'o'
.int 118 # 'v'
.int 108 # 'l'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 97 # 'a'
.int 120 # 'x'
.int 0
.int 108 # 'l'
.int 101 # 'e'
.int 97 # 'a'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 97 # 'a'
.int 120 # 'x'
.int 0
.int 109 # 'm'
.int 111 # 'o'
.int 118 # 'v'
.int 108 # 'l'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 97 # 'a'
.int 120 # 'x'
.int 0
.int 109 # 'm'
.int 111 # 'o'
.int 118 # 'v'
.int 108 # 'l'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 97 # 'a'
.int 120 # 'x'
.int 0
.int 97 # 'a'
.int 100 # 'd'
.int 100 # 'd'
.int 108 # 'l'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 97 # 'a'
.int 120 # 'x'
.int 0
.int 115 # 's'
.int 117 # 'u'
.int 98 # 'b'
.int 108 # 'l'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 97 # 'a'
.int 120 # 'x'
.int 0
.int 105 # 'i'
.int 109 # 'm'
.int 117 # 'u'
.int 108 # 'l'
.int 108 # 'l'
.int 0
.int 99 # 'c'
.int 100 # 'd'
.int 113 # 'q'
.int 0
.int 105 # 'i'
.int 100 # 'd'
.int 105 # 'i'
.int 118 # 'v'
.int 108 # 'l'
.int 0
.int 99 # 'c'
.int 109 # 'm'
.int 112 # 'p'
.int 108 # 'l'
.int 0
.int 36 # '$'
.int 48 # '0'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 97 # 'a'
.int 120 # 'x'
.int 0
.int 0
.int 36 # '$'
.int 0
.int 101 # 'e'
.int 110 # 'n'
.int 116 # 't'
.int 101 # 'e'
.int 114 # 'r'
.int 0
.int 36 # '$'
.int 48 # '0'
.int 0
.int 0
.int 0
.int 108 # 'l'
.int 101 # 'e'
.int 97 # 'a'
.int 118 # 'v'
.int 101 # 'e'
.int 0
.int 114 # 'r'
.int 101 # 'e'
.int 116 # 't'
.int 0
.int 99 # 'c'
.int 97 # 'a'
.int 108 # 'l'
.int 108 # 'l'
.int 0
.int 36 # '$'
.int 0
.int 97 # 'a'
.int 100 # 'd'
.int 100 # 'd'
.int 108 # 'l'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 115 # 's'
.int 112 # 'p'
.int 0
.int 112 # 'p'
.int 117 # 'u'
.int 115 # 's'
.int 104 # 'h'
.int 108 # 'l'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 97 # 'a'
.int 120 # 'x'
.int 0
.int 0
.int 58 # ':'
.int 0
.int 109 # 'm'
.int 111 # 'o'
.int 118 # 'v'
.int 108 # 'l'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 97 # 'a'
.int 120 # 'x'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 99 # 'c'
.int 120 # 'x'
.int 0
.int 100 # 'd'
.int 101 # 'e'
.int 98 # 'b'
.int 117 # 'u'
.int 103 # 'g'
.int 95 # '_'
.int 110 # 'n'
.int 101 # 'e'
.int 103 # 'g'
.int 95 # '_'
.int 105 # 'i'
.int 102 # 'f'
.int 0
.int 99 # 'c'
.int 109 # 'm'
.int 112 # 'p'
.int 108 # 'l'
.int 0
.int 36 # '$'
.int 48 # '0'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 97 # 'a'
.int 120 # 'x'
.int 0
.int 106 # 'j'
.int 103 # 'g'
.int 101 # 'e'
.int 0
.int 95 # '_'
.int 101 # 'e'
.int 110 # 'n'
.int 100 # 'd'
.int 0
.int 110 # 'n'
.int 101 # 'e'
.int 103 # 'g'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 97 # 'a'
.int 120 # 'x'
.int 0
.int 95 # '_'
.int 101 # 'e'
.int 110 # 'n'
.int 100 # 'd'
.int 0
.int 112 # 'p'
.int 117 # 'u'
.int 115 # 's'
.int 104 # 'h'
.int 108 # 'l'
.int 0
.int 36 # '$'
.int 39 # '''
.int 92 # '\'
.int 110 # 'n'
.int 0
.int 100 # 'd'
.int 101 # 'e'
.int 98 # 'b'
.int 117 # 'u'
.int 103 # 'g'
.int 95 # '_'
.int 116 # 't'
.int 111 # 'o'
.int 95 # '_'
.int 115 # 's'
.int 116 # 't'
.int 114 # 'r'
.int 0
.int 109 # 'm'
.int 111 # 'o'
.int 118 # 'v'
.int 108 # 'l'
.int 0
.int 36 # '$'
.int 49 # '1'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 115 # 's'
.int 105 # 'i'
.int 0
.int 95 # '_'
.int 98 # 'b'
.int 101 # 'e'
.int 103 # 'g'
.int 105 # 'i'
.int 110 # 'n'
.int 0
.int 109 # 'm'
.int 111 # 'o'
.int 118 # 'v'
.int 108 # 'l'
.int 0
.int 36 # '$'
.int 48 # '0'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 100 # 'd'
.int 120 # 'x'
.int 0
.int 109 # 'm'
.int 111 # 'o'
.int 118 # 'v'
.int 108 # 'l'
.int 0
.int 36 # '$'
.int 49 # '1'
.int 48 # '0'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 98 # 'b'
.int 120 # 'x'
.int 0
.int 100 # 'd'
.int 105 # 'i'
.int 118 # 'v'
.int 108 # 'l'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 98 # 'b'
.int 120 # 'x'
.int 0
.int 97 # 'a'
.int 100 # 'd'
.int 100 # 'd'
.int 108 # 'l'
.int 0
.int 36 # '$'
.int 52 # '4'
.int 56 # '8'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 100 # 'd'
.int 120 # 'x'
.int 0
.int 112 # 'p'
.int 117 # 'u'
.int 115 # 's'
.int 104 # 'h'
.int 108 # 'l'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 100 # 'd'
.int 120 # 'x'
.int 0
.int 105 # 'i'
.int 110 # 'n'
.int 99 # 'c'
.int 108 # 'l'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 115 # 's'
.int 105 # 'i'
.int 0
.int 99 # 'c'
.int 109 # 'm'
.int 112 # 'p'
.int 108 # 'l'
.int 0
.int 36 # '$'
.int 48 # '0'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 97 # 'a'
.int 120 # 'x'
.int 0
.int 106 # 'j'
.int 122 # 'z'
.int 0
.int 95 # '_'
.int 101 # 'e'
.int 110 # 'n'
.int 100 # 'd'
.int 0
.int 106 # 'j'
.int 109 # 'm'
.int 112 # 'p'
.int 0
.int 95 # '_'
.int 98 # 'b'
.int 101 # 'e'
.int 103 # 'g'
.int 105 # 'i'
.int 110 # 'n'
.int 0
.int 95 # '_'
.int 101 # 'e'
.int 110 # 'n'
.int 100 # 'd'
.int 0
.int 100 # 'd'
.int 101 # 'e'
.int 98 # 'b'
.int 117 # 'u'
.int 103 # 'g'
.int 95 # '_'
.int 115 # 's'
.int 105 # 'i'
.int 103 # 'g'
.int 110 # 'n'
.int 95 # '_'
.int 105 # 'i'
.int 102 # 'f'
.int 0
.int 99 # 'c'
.int 109 # 'm'
.int 112 # 'p'
.int 108 # 'l'
.int 0
.int 36 # '$'
.int 48 # '0'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 99 # 'c'
.int 120 # 'x'
.int 0
.int 106 # 'j'
.int 103 # 'g'
.int 101 # 'e'
.int 0
.int 95 # '_'
.int 101 # 'e'
.int 110 # 'n'
.int 100 # 'd'
.int 0
.int 112 # 'p'
.int 117 # 'u'
.int 115 # 's'
.int 104 # 'h'
.int 108 # 'l'
.int 0
.int 36 # '$'
.int 39 # '''
.int 45 # '-'
.int 0
.int 105 # 'i'
.int 110 # 'n'
.int 99 # 'c'
.int 108 # 'l'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 115 # 's'
.int 105 # 'i'
.int 0
.int 95 # '_'
.int 101 # 'e'
.int 110 # 'n'
.int 100 # 'd'
.int 0
.int 100 # 'd'
.int 101 # 'e'
.int 98 # 'b'
.int 117 # 'u'
.int 103 # 'g'
.int 95 # '_'
.int 112 # 'p'
.int 114 # 'r'
.int 105 # 'i'
.int 110 # 'n'
.int 116 # 't'
.int 0
.int 95 # '_'
.int 98 # 'b'
.int 101 # 'e'
.int 103 # 'g'
.int 105 # 'i'
.int 110 # 'n'
.int 0
.int 99 # 'c'
.int 109 # 'm'
.int 112 # 'p'
.int 108 # 'l'
.int 0
.int 36 # '$'
.int 48 # '0'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 115 # 's'
.int 105 # 'i'
.int 0
.int 106 # 'j'
.int 122 # 'z'
.int 0
.int 95 # '_'
.int 101 # 'e'
.int 110 # 'n'
.int 100 # 'd'
.int 0
.int 100 # 'd'
.int 101 # 'e'
.int 99 # 'c'
.int 108 # 'l'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 115 # 's'
.int 105 # 'i'
.int 0
.int 109 # 'm'
.int 111 # 'o'
.int 118 # 'v'
.int 108 # 'l'
.int 0
.int 36 # '$'
.int 52 # '4'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 97 # 'a'
.int 120 # 'x'
.int 0
.int 109 # 'm'
.int 111 # 'o'
.int 118 # 'v'
.int 108 # 'l'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 115 # 's'
.int 112 # 'p'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 99 # 'c'
.int 120 # 'x'
.int 0
.int 109 # 'm'
.int 111 # 'o'
.int 118 # 'v'
.int 108 # 'l'
.int 0
.int 36 # '$'
.int 49 # '1'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 98 # 'b'
.int 120 # 'x'
.int 0
.int 109 # 'm'
.int 111 # 'o'
.int 118 # 'v'
.int 108 # 'l'
.int 0
.int 36 # '$'
.int 49 # '1'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 100 # 'd'
.int 120 # 'x'
.int 0
.int 105 # 'i'
.int 110 # 'n'
.int 116 # 't'
.int 0
.int 36 # '$'
.int 48 # '0'
.int 120 # 'x'
.int 56 # '8'
.int 48 # '0'
.int 0
.int 97 # 'a'
.int 100 # 'd'
.int 100 # 'd'
.int 108 # 'l'
.int 0
.int 36 # '$'
.int 52 # '4'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 115 # 's'
.int 112 # 'p'
.int 0
.int 106 # 'j'
.int 109 # 'm'
.int 112 # 'p'
.int 0
.int 95 # '_'
.int 98 # 'b'
.int 101 # 'e'
.int 103 # 'g'
.int 105 # 'i'
.int 110 # 'n'
.int 0
.int 95 # '_'
.int 101 # 'e'
.int 110 # 'n'
.int 100 # 'd'
.int 0
.int 109 # 'm'
.int 111 # 'o'
.int 118 # 'v'
.int 108 # 'l'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 97 # 'a'
.int 120 # 'x'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 98 # 'b'
.int 120 # 'x'
.int 0
.int 109 # 'm'
.int 111 # 'o'
.int 118 # 'v'
.int 108 # 'l'
.int 0
.int 36 # '$'
.int 49 # '1'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 97 # 'a'
.int 120 # 'x'
.int 0
.int 105 # 'i'
.int 110 # 'n'
.int 116 # 't'
.int 0
.int 36 # '$'
.int 48 # '0'
.int 120 # 'x'
.int 56 # '8'
.int 48 # '0'
.int 0
.int 102 # 'f'
.int 103 # 'g'
.int 101 # 'e'
.int 116 # 't'
.int 99 # 'c'
.int 95 # '_'
.int 105 # 'i'
.int 102 # 'f'
.int 0
.int 115 # 's'
.int 117 # 'u'
.int 98 # 'b'
.int 108 # 'l'
.int 0
.int 36 # '$'
.int 52 # '4'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 115 # 's'
.int 112 # 'p'
.int 0
.int 109 # 'm'
.int 111 # 'o'
.int 118 # 'v'
.int 108 # 'l'
.int 0
.int 36 # '$'
.int 51 # '3'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 97 # 'a'
.int 120 # 'x'
.int 0
.int 109 # 'm'
.int 111 # 'o'
.int 118 # 'v'
.int 108 # 'l'
.int 0
.int 36 # '$'
.int 48 # '0'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 98 # 'b'
.int 120 # 'x'
.int 0
.int 109 # 'm'
.int 111 # 'o'
.int 118 # 'v'
.int 108 # 'l'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 115 # 's'
.int 112 # 'p'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 99 # 'c'
.int 120 # 'x'
.int 0
.int 109 # 'm'
.int 111 # 'o'
.int 118 # 'v'
.int 108 # 'l'
.int 0
.int 36 # '$'
.int 49 # '1'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 100 # 'd'
.int 120 # 'x'
.int 0
.int 105 # 'i'
.int 110 # 'n'
.int 116 # 't'
.int 0
.int 36 # '$'
.int 48 # '0'
.int 120 # 'x'
.int 56 # '8'
.int 48 # '0'
.int 0
.int 99 # 'c'
.int 109 # 'm'
.int 112 # 'p'
.int 108 # 'l'
.int 0
.int 36 # '$'
.int 49 # '1'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 97 # 'a'
.int 120 # 'x'
.int 0
.int 106 # 'j'
.int 110 # 'n'
.int 101 # 'e'
.int 0
.int 95 # '_'
.int 101 # 'e'
.int 108 # 'l'
.int 115 # 's'
.int 101 # 'e'
.int 0
.int 112 # 'p'
.int 111 # 'o'
.int 112 # 'p'
.int 108 # 'l'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 97 # 'a'
.int 120 # 'x'
.int 0
.int 97 # 'a'
.int 110 # 'n'
.int 100 # 'd'
.int 108 # 'l'
.int 0
.int 36 # '$'
.int 48 # '0'
.int 120 # 'x'
.int 102 # 'f'
.int 102 # 'f'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 97 # 'a'
.int 120 # 'x'
.int 0
.int 106 # 'j'
.int 109 # 'm'
.int 112 # 'p'
.int 0
.int 95 # '_'
.int 101 # 'e'
.int 110 # 'n'
.int 100 # 'd'
.int 0
.int 95 # '_'
.int 101 # 'e'
.int 108 # 'l'
.int 115 # 's'
.int 101 # 'e'
.int 0
.int 97 # 'a'
.int 100 # 'd'
.int 100 # 'd'
.int 108 # 'l'
.int 0
.int 36 # '$'
.int 52 # '4'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 115 # 's'
.int 112 # 'p'
.int 0
.int 109 # 'm'
.int 111 # 'o'
.int 118 # 'v'
.int 108 # 'l'
.int 0
.int 36 # '$'
.int 45 # '-'
.int 49 # '1'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 97 # 'a'
.int 120 # 'x'
.int 0
.int 95 # '_'
.int 101 # 'e'
.int 110 # 'n'
.int 100 # 'd'
.int 0
.int 112 # 'p'
.int 117 # 'u'
.int 115 # 's'
.int 104 # 'h'
.int 108 # 'l'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 97 # 'a'
.int 120 # 'x'
.int 0
.int 109 # 'm'
.int 111 # 'o'
.int 118 # 'v'
.int 108 # 'l'
.int 0
.int 36 # '$'
.int 52 # '4'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 97 # 'a'
.int 120 # 'x'
.int 0
.int 109 # 'm'
.int 111 # 'o'
.int 118 # 'v'
.int 108 # 'l'
.int 0
.int 36 # '$'
.int 49 # '1'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 98 # 'b'
.int 120 # 'x'
.int 0
.int 109 # 'm'
.int 111 # 'o'
.int 118 # 'v'
.int 108 # 'l'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 115 # 's'
.int 112 # 'p'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 99 # 'c'
.int 120 # 'x'
.int 0
.int 109 # 'm'
.int 111 # 'o'
.int 118 # 'v'
.int 108 # 'l'
.int 0
.int 36 # '$'
.int 49 # '1'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 100 # 'd'
.int 120 # 'x'
.int 0
.int 105 # 'i'
.int 110 # 'n'
.int 116 # 't'
.int 0
.int 36 # '$'
.int 48 # '0'
.int 120 # 'x'
.int 56 # '8'
.int 48 # '0'
.int 0
.int 97 # 'a'
.int 100 # 'd'
.int 100 # 'd'
.int 108 # 'l'
.int 0
.int 36 # '$'
.int 52 # '4'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 115 # 's'
.int 112 # 'p'
.int 0
.int 112 # 'p'
.int 117 # 'u'
.int 115 # 's'
.int 104 # 'h'
.int 108 # 'l'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 97 # 'a'
.int 120 # 'x'
.int 0
.int 109 # 'm'
.int 111 # 'o'
.int 118 # 'v'
.int 108 # 'l'
.int 0
.int 36 # '$'
.int 52 # '4'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 97 # 'a'
.int 120 # 'x'
.int 0
.int 109 # 'm'
.int 111 # 'o'
.int 118 # 'v'
.int 108 # 'l'
.int 0
.int 36 # '$'
.int 50 # '2'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 98 # 'b'
.int 120 # 'x'
.int 0
.int 109 # 'm'
.int 111 # 'o'
.int 118 # 'v'
.int 108 # 'l'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 115 # 's'
.int 112 # 'p'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 99 # 'c'
.int 120 # 'x'
.int 0
.int 109 # 'm'
.int 111 # 'o'
.int 118 # 'v'
.int 108 # 'l'
.int 0
.int 36 # '$'
.int 49 # '1'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 100 # 'd'
.int 120 # 'x'
.int 0
.int 105 # 'i'
.int 110 # 'n'
.int 116 # 't'
.int 0
.int 36 # '$'
.int 48 # '0'
.int 120 # 'x'
.int 56 # '8'
.int 48 # '0'
.int 0
.int 97 # 'a'
.int 100 # 'd'
.int 100 # 'd'
.int 108 # 'l'
.int 0
.int 36 # '$'
.int 52 # '4'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 115 # 's'
.int 112 # 'p'
.int 0
.int 111 # 'o'
.int 117 # 'u'
.int 116 # 't'
.int 32 # ' '
.int 111 # 'o'
.int 102 # 'f'
.int 32 # ' '
.int 105 # 'i'
.int 110 # 'n'
.int 105 # 'i'
.int 116 # 't'
.int 105 # 'i'
.int 97 # 'a'
.int 108 # 'l'
.int 105 # 'i'
.int 115 # 's'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 40 # '('
.int 115 # 's'
.int 116 # 't'
.int 114 # 'r'
.int 105 # 'i'
.int 110 # 'n'
.int 103 # 'g'
.int 41 # ')'
.int 32 # ' '
.int 115 # 's'
.int 116 # 't'
.int 111 # 'o'
.int 114 # 'r'
.int 97 # 'a'
.int 103 # 'g'
.int 101 # 'e'
.int 32 # ' '
.int 115 # 's'
.int 112 # 'p'
.int 97 # 'a'
.int 99 # 'c'
.int 101 # 'e'
.int 0
.int 0
.int 46 # '.'
.int 116 # 't'
.int 101 # 'e'
.int 120 # 'x'
.int 116 # 't'
.int 0
.int 46 # '.'
.int 103 # 'g'
.int 108 # 'l'
.int 111 # 'o'
.int 98 # 'b'
.int 108 # 'l'
.int 32 # ' '
.int 95 # '_'
.int 115 # 's'
.int 116 # 't'
.int 97 # 'a'
.int 114 # 'r'
.int 116 # 't'
.int 0
.int 95 # '_'
.int 115 # 's'
.int 116 # 't'
.int 97 # 'a'
.int 114 # 'r'
.int 116 # 't'
.int 58 # ':'
.int 0
.int 99 # 'c'
.int 97 # 'a'
.int 108 # 'l'
.int 108 # 'l'
.int 0
.int 109 # 'm'
.int 97 # 'a'
.int 105 # 'i'
.int 110 # 'n'
.int 0
.int 109 # 'm'
.int 111 # 'o'
.int 118 # 'v'
.int 108 # 'l'
.int 0
.int 36 # '$'
.int 49 # '1'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 97 # 'a'
.int 120 # 'x'
.int 0
.int 109 # 'm'
.int 111 # 'o'
.int 118 # 'v'
.int 108 # 'l'
.int 0
.int 36 # '$'
.int 48 # '0'
.int 0
.int 37 # '%'
.int 101 # 'e'
.int 98 # 'b'
.int 120 # 'x'
.int 0
.int 105 # 'i'
.int 110 # 'n'
.int 116 # 't'
.int 0
.int 36 # '$'
.int 48 # '0'
.int 120 # 'x'
.int 56 # '8'
.int 48 # '0'
.int 0
.int 0
.int 46 # '.'
.int 98 # 'b'
.int 115 # 's'
.int 115 # 's'
.int 0
.int 103 # 'g'
.int 108 # 'l'
.int 111 # 'o'
.int 98 # 'b'
.int 97 # 'a'
.int 108 # 'l'
.int 58 # ':'
.int 0
.int 46 # '.'
.int 108 # 'l'
.int 99 # 'c'
.int 111 # 'o'
.int 109 # 'm'
.int 109 # 'm'
.int 32 # ' '
.int 103 # 'g'
.int 108 # 'l'
.int 111 # 'o'
.int 98 # 'b'
.int 97 # 'a'
.int 108 # 'l'
.int 95 # '_'
.int 115 # 's'
.int 116 # 't'
.int 111 # 'o'
.int 114 # 'r'
.int 97 # 'a'
.int 103 # 'g'
.int 101 # 'e'
.int 95 # '_'
.int 115 # 's'
.int 112 # 'p'
.int 97 # 'a'
.int 99 # 'c'
.int 101 # 'e'
.int 44 # ','
.int 32 # ' '
.int 0
.int 0
.int 46 # '.'
.int 100 # 'd'
.int 97 # 'a'
.int 116 # 't'
.int 97 # 'a'
.int 0
.int 115 # 's'
.int 116 # 't'
.int 114 # 'r'
.int 105 # 'i'
.int 110 # 'n'
.int 103 # 'g'
.int 58 # ':'
.int 0
.int 46 # '.'
.int 105 # 'i'
.int 110 # 'n'
.int 116 # 't'
.int 32 # ' '
.int 48 # '0'
.int 0
.int 46 # '.'
.int 105 # 'i'
.int 110 # 'n'
.int 116 # 't'
.int 32 # ' '
.int 0
.int 32 # ' '
.int 35 # '#'
.int 32 # ' '
.int 39 # '''
.int 32 # ' '
.int 39 # '''
.int 0
.int 0
.int 46 # '.'
.int 101 # 'e'
.int 110 # 'n'
.int 100 # 'd'
.int 0
.int 95 # '_'
.int 0
.int 0
.int 0
.int 0
.int 110 # 'n'
.int 97 # 'a'
.int 109 # 'm'
.int 101 # 'e'
.int 32 # ' '
.int 97 # 'a'
.int 108 # 'l'
.int 114 # 'r'
.int 101 # 'e'
.int 97 # 'a'
.int 100 # 'd'
.int 121 # 'y'
.int 32 # ' '
.int 100 # 'd'
.int 101 # 'e'
.int 102 # 'f'
.int 105 # 'i'
.int 110 # 'n'
.int 101 # 'e'
.int 100 # 'd'
.int 0
.int 111 # 'o'
.int 117 # 'u'
.int 116 # 't'
.int 32 # ' '
.int 111 # 'o'
.int 102 # 'f'
.int 32 # ' '
.int 115 # 's'
.int 121 # 'y'
.int 109 # 'm'
.int 98 # 'b'
.int 111 # 'o'
.int 108 # 'l'
.int 32 # ' '
.int 116 # 't'
.int 97 # 'a'
.int 98 # 'b'
.int 108 # 'l'
.int 101 # 'e'
.int 32 # ' '
.int 115 # 's'
.int 112 # 'p'
.int 97 # 'a'
.int 99 # 'c'
.int 101 # 'e'
.int 0
.int 110 # 'n'
.int 97 # 'a'
.int 109 # 'm'
.int 101 # 'e'
.int 32 # ' '
.int 110 # 'n'
.int 111 # 'o'
.int 116 # 't'
.int 32 # ' '
.int 100 # 'd'
.int 101 # 'e'
.int 102 # 'f'
.int 105 # 'i'
.int 110 # 'n'
.int 101 # 'e'
.int 100 # 'd'
.int 0
.int 116 # 't'
.int 111 # 'o'
.int 111 # 'o'
.int 32 # ' '
.int 109 # 'm'
.int 97 # 'a'
.int 110 # 'n'
.int 121 # 'y'
.int 32 # ' '
.int 108 # 'l'
.int 111 # 'o'
.int 99 # 'c'
.int 97 # 'a'
.int 108 # 'l'
.int 32 # ' '
.int 116 # 't'
.int 101 # 'e'
.int 109 # 'm'
.int 112 # 'p'
.int 111 # 'o'
.int 114 # 'r'
.int 97 # 'a'
.int 114 # 'r'
.int 121 # 'y'
.int 32 # ' '
.int 118 # 'v'
.int 97 # 'a'
.int 114 # 'r'
.int 105 # 'i'
.int 97 # 'a'
.int 98 # 'b'
.int 108 # 'l'
.int 101 # 'e'
.int 115 # 's'
.int 0
.int 95 # '_'
.int 0
.int 97 # 'a'
.int 114 # 'r'
.int 114 # 'r'
.int 97 # 'a'
.int 121 # 'y'
.int 32 # ' '
.int 108 # 'l'
.int 101 # 'e'
.int 110 # 'n'
.int 103 # 'g'
.int 116 # 't'
.int 104 # 'h'
.int 32 # ' '
.int 109 # 'm'
.int 117 # 'u'
.int 115 # 's'
.int 116 # 't'
.int 32 # ' '
.int 98 # 'b'
.int 101 # 'e'
.int 32 # ' '
.int 103 # 'g'
.int 114 # 'r'
.int 101 # 'e'
.int 97 # 'a'
.int 116 # 't'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 116 # 't'
.int 104 # 'h'
.int 97 # 'a'
.int 110 # 'n'
.int 32 # ' '
.int 122 # 'z'
.int 101 # 'e'
.int 114 # 'r'
.int 111 # 'o'
.int 0
.int 99 # 'c'
.int 111 # 'o'
.int 110 # 'n'
.int 115 # 's'
.int 116 # 't'
.int 97 # 'a'
.int 110 # 'n'
.int 116 # 't'
.int 32 # ' '
.int 97 # 'a'
.int 114 # 'r'
.int 114 # 'r'
.int 97 # 'a'
.int 121 # 'y'
.int 32 # ' '
.int 108 # 'l'
.int 101 # 'e'
.int 110 # 'n'
.int 103 # 'g'
.int 116 # 't'
.int 104 # 'h'
.int 32 # ' '
.int 115 # 's'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 105 # 'i'
.int 102 # 'f'
.int 105 # 'i'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 0
.int 95 # '_'
.int 101 # 'e'
.int 110 # 'n'
.int 100 # 'd'
.int 0
.int 95 # '_'
.int 101 # 'e'
.int 110 # 'n'
.int 100 # 'd'
.int 0
.int 0
.int 105 # 'i'
.int 100 # 'd'
.int 101 # 'e'
.int 110 # 'n'
.int 116 # 't'
.int 105 # 'i'
.int 102 # 'f'
.int 105 # 'i'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 99 # 'c'
.int 97 # 'a'
.int 110 # 'n'
.int 110 # 'n'
.int 111 # 'o'
.int 116 # 't'
.int 32 # ' '
.int 98 # 'b'
.int 101 # 'e'
.int 32 # ' '
.int 117 # 'u'
.int 115 # 's'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 105 # 'i'
.int 110 # 'n'
.int 32 # ' '
.int 97 # 'a'
.int 110 # 'n'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 114 # 'r'
.int 101 # 'e'
.int 115 # 's'
.int 115 # 's'
.int 105 # 'i'
.int 111 # 'o'
.int 110 # 'n'
.int 0
.int 43 # '+'
.int 0
.int 45 # '-'
.int 0
.int 33 # '!'
.int 0
.int 108 # 'l'
.int 111 # 'o'
.int 103 # 'g'
.int 105 # 'i'
.int 99 # 'c'
.int 97 # 'a'
.int 108 # 'l'
.int 95 # '_'
.int 110 # 'n'
.int 111 # 'o'
.int 116 # 't'
.int 0
.int 95 # '_'
.int 116 # 't'
.int 114 # 'r'
.int 117 # 'u'
.int 101 # 'e'
.int 0
.int 95 # '_'
.int 102 # 'f'
.int 97 # 'a'
.int 108 # 'l'
.int 115 # 's'
.int 101 # 'e'
.int 0
.int 95 # '_'
.int 102 # 'f'
.int 97 # 'a'
.int 108 # 'l'
.int 115 # 's'
.int 101 # 'e'
.int 0
.int 95 # '_'
.int 116 # 't'
.int 114 # 'r'
.int 117 # 'u'
.int 101 # 'e'
.int 0
.int 95 # '_'
.int 102 # 'f'
.int 97 # 'a'
.int 108 # 'l'
.int 115 # 's'
.int 101 # 'e'
.int 0
.int 95 # '_'
.int 116 # 't'
.int 114 # 'r'
.int 117 # 'u'
.int 101 # 'e'
.int 0
.int 42 # '*'
.int 0
.int 47 # '/'
.int 0
.int 43 # '+'
.int 0
.int 45 # '-'
.int 0
.int 99 # 'c'
.int 111 # 'o'
.int 109 # 'm'
.int 112 # 'p'
.int 97 # 'a'
.int 114 # 'r'
.int 101 # 'e'
.int 0
.int 95 # '_'
.int 102 # 'f'
.int 97 # 'a'
.int 108 # 'l'
.int 115 # 's'
.int 101 # 'e'
.int 0
.int 95 # '_'
.int 116 # 't'
.int 114 # 'r'
.int 117 # 'u'
.int 101 # 'e'
.int 0
.int 61 # '='
.int 61 # '='
.int 0
.int 95 # '_'
.int 116 # 't'
.int 114 # 'r'
.int 117 # 'u'
.int 101 # 'e'
.int 0
.int 33 # '!'
.int 61 # '='
.int 0
.int 95 # '_'
.int 116 # 't'
.int 114 # 'r'
.int 117 # 'u'
.int 101 # 'e'
.int 0
.int 60 # '<'
.int 0
.int 95 # '_'
.int 116 # 't'
.int 114 # 'r'
.int 117 # 'u'
.int 101 # 'e'
.int 0
.int 60 # '<'
.int 61 # '='
.int 0
.int 95 # '_'
.int 116 # 't'
.int 114 # 'r'
.int 117 # 'u'
.int 101 # 'e'
.int 0
.int 95 # '_'
.int 116 # 't'
.int 114 # 'r'
.int 117 # 'u'
.int 101 # 'e'
.int 0
.int 62 # '>'
.int 0
.int 95 # '_'
.int 116 # 't'
.int 114 # 'r'
.int 117 # 'u'
.int 101 # 'e'
.int 0
.int 62 # '>'
.int 61 # '='
.int 0
.int 95 # '_'
.int 116 # 't'
.int 114 # 'r'
.int 117 # 'u'
.int 101 # 'e'
.int 0
.int 95 # '_'
.int 116 # 't'
.int 114 # 'r'
.int 117 # 'u'
.int 101 # 'e'
.int 0
.int 95 # '_'
.int 102 # 'f'
.int 97 # 'a'
.int 108 # 'l'
.int 115 # 's'
.int 101 # 'e'
.int 0
.int 95 # '_'
.int 116 # 't'
.int 114 # 'r'
.int 117 # 'u'
.int 101 # 'e'
.int 0
.int 95 # '_'
.int 102 # 'f'
.int 97 # 'a'
.int 108 # 'l'
.int 115 # 's'
.int 101 # 'e'
.int 0
.int 108 # 'l'
.int 111 # 'o'
.int 103 # 'g'
.int 105 # 'i'
.int 99 # 'c'
.int 97 # 'a'
.int 108 # 'l'
.int 95 # '_'
.int 97 # 'a'
.int 110 # 'n'
.int 100 # 'd'
.int 0
.int 95 # '_'
.int 116 # 't'
.int 114 # 'r'
.int 117 # 'u'
.int 101 # 'e'
.int 0
.int 95 # '_'
.int 102 # 'f'
.int 97 # 'a'
.int 108 # 'l'
.int 115 # 's'
.int 101 # 'e'
.int 0
.int 95 # '_'
.int 102 # 'f'
.int 97 # 'a'
.int 108 # 'l'
.int 115 # 's'
.int 101 # 'e'
.int 0
.int 95 # '_'
.int 102 # 'f'
.int 97 # 'a'
.int 108 # 'l'
.int 115 # 's'
.int 101 # 'e'
.int 0
.int 95 # '_'
.int 116 # 't'
.int 114 # 'r'
.int 117 # 'u'
.int 101 # 'e'
.int 0
.int 95 # '_'
.int 102 # 'f'
.int 97 # 'a'
.int 108 # 'l'
.int 115 # 's'
.int 101 # 'e'
.int 0
.int 95 # '_'
.int 116 # 't'
.int 114 # 'r'
.int 117 # 'u'
.int 101 # 'e'
.int 0
.int 108 # 'l'
.int 111 # 'o'
.int 103 # 'g'
.int 105 # 'i'
.int 99 # 'c'
.int 97 # 'a'
.int 108 # 'l'
.int 95 # '_'
.int 111 # 'o'
.int 114 # 'r'
.int 0
.int 95 # '_'
.int 102 # 'f'
.int 97 # 'a'
.int 108 # 'l'
.int 115 # 's'
.int 101 # 'e'
.int 0
.int 95 # '_'
.int 116 # 't'
.int 114 # 'r'
.int 117 # 'u'
.int 101 # 'e'
.int 0
.int 95 # '_'
.int 116 # 't'
.int 114 # 'r'
.int 117 # 'u'
.int 101 # 'e'
.int 0
.int 95 # '_'
.int 116 # 't'
.int 114 # 'r'
.int 117 # 'u'
.int 101 # 'e'
.int 0
.int 95 # '_'
.int 102 # 'f'
.int 97 # 'a'
.int 108 # 'l'
.int 115 # 's'
.int 101 # 'e'
.int 0
.int 95 # '_'
.int 116 # 't'
.int 114 # 'r'
.int 117 # 'u'
.int 101 # 'e'
.int 0
.int 95 # '_'
.int 102 # 'f'
.int 97 # 'a'
.int 108 # 'l'
.int 115 # 's'
.int 101 # 'e'
.int 0
.int 95 # '_'
.int 101 # 'e'
.int 110 # 'n'
.int 100 # 'd'
.int 0
.int 108 # 'l'
.int 101 # 'e'
.int 102 # 'f'
.int 116 # 't'
.int 32 # ' '
.int 104 # 'h'
.int 97 # 'a'
.int 110 # 'n'
.int 100 # 'd'
.int 32 # ' '
.int 115 # 's'
.int 105 # 'i'
.int 100 # 'd'
.int 101 # 'e'
.int 32 # ' '
.int 111 # 'o'
.int 102 # 'f'
.int 32 # ' '
.int 97 # 'a'
.int 115 # 's'
.int 115 # 's'
.int 105 # 'i'
.int 103 # 'g'
.int 110 # 'n'
.int 109 # 'm'
.int 101 # 'e'
.int 110 # 'n'
.int 116 # 't'
.int 32 # ' '
.int 115 # 's'
.int 116 # 't'
.int 97 # 'a'
.int 116 # 't'
.int 101 # 'e'
.int 109 # 'm'
.int 101 # 'e'
.int 110 # 'n'
.int 116 # 't'
.int 32 # ' '
.int 109 # 'm'
.int 117 # 'u'
.int 115 # 's'
.int 116 # 't'
.int 32 # ' '
.int 98 # 'b'
.int 101 # 'e'
.int 32 # ' '
.int 97 # 'a'
.int 110 # 'n'
.int 32 # ' '
.int 105 # 'i'
.int 110 # 'n'
.int 116 # 't'
.int 101 # 'e'
.int 103 # 'g'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 105 # 'i'
.int 100 # 'd'
.int 101 # 'e'
.int 110 # 'n'
.int 116 # 't'
.int 105 # 'i'
.int 102 # 'f'
.int 105 # 'i'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 111 # 'o'
.int 114 # 'r'
.int 32 # ' '
.int 97 # 'a'
.int 114 # 'r'
.int 114 # 'r'
.int 97 # 'a'
.int 121 # 'y'
.int 32 # ' '
.int 101 # 'e'
.int 108 # 'l'
.int 101 # 'e'
.int 109 # 'm'
.int 101 # 'e'
.int 110 # 'n'
.int 116 # 't'
.int 0
.int 119 # 'w'
.int 104 # 'h'
.int 105 # 'i'
.int 108 # 'l'
.int 101 # 'e'
.int 0
.int 95 # '_'
.int 101 # 'e'
.int 110 # 'n'
.int 100 # 'd'
.int 0
.int 95 # '_'
.int 116 # 't'
.int 101 # 'e'
.int 115 # 's'
.int 116 # 't'
.int 0
.int 95 # '_'
.int 116 # 't'
.int 101 # 'e'
.int 115 # 's'
.int 116 # 't'
.int 0
.int 95 # '_'
.int 116 # 't'
.int 101 # 'e'
.int 115 # 's'
.int 116 # 't'
.int 0
.int 95 # '_'
.int 101 # 'e'
.int 110 # 'n'
.int 100 # 'd'
.int 0
.int 95 # '_'
.int 101 # 'e'
.int 110 # 'n'
.int 100 # 'd'
.int 0
.int 105 # 'i'
.int 102 # 'f'
.int 0
.int 95 # '_'
.int 101 # 'e'
.int 110 # 'n'
.int 100 # 'd'
.int 0
.int 95 # '_'
.int 110 # 'n'
.int 101 # 'e'
.int 120 # 'x'
.int 116 # 't'
.int 0
.int 95 # '_'
.int 110 # 'n'
.int 101 # 'e'
.int 120 # 'x'
.int 116 # 't'
.int 0
.int 95 # '_'
.int 101 # 'e'
.int 110 # 'n'
.int 100 # 'd'
.int 0
.int 95 # '_'
.int 110 # 'n'
.int 101 # 'e'
.int 120 # 'x'
.int 116 # 't'
.int 0
.int 95 # '_'
.int 110 # 'n'
.int 101 # 'e'
.int 120 # 'x'
.int 116 # 't'
.int 0
.int 95 # '_'
.int 101 # 'e'
.int 110 # 'n'
.int 100 # 'd'
.int 0
.int 95 # '_'
.int 101 # 'e'
.int 110 # 'n'
.int 100 # 'd'
.int 0
.int 102 # 'f'
.int 103 # 'g'
.int 101 # 'e'
.int 116 # 't'
.int 99 # 'c'
.int 0
.int 40 # '('
.int 0
.int 115 # 's'
.int 116 # 't'
.int 100 # 'd'
.int 105 # 'i'
.int 110 # 'n'
.int 0
.int 41 # ')'
.int 0
.int 102 # 'f'
.int 103 # 'g'
.int 101 # 'e'
.int 116 # 't'
.int 99 # 'c'
.int 40 # '('
.int 115 # 's'
.int 116 # 't'
.int 100 # 'd'
.int 105 # 'i'
.int 110 # 'n'
.int 41 # ')'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 0
.int 102 # 'f'
.int 112 # 'p'
.int 117 # 'u'
.int 116 # 't'
.int 99 # 'c'
.int 0
.int 40 # '('
.int 0
.int 111 # 'o'
.int 112 # 'p'
.int 101 # 'e'
.int 110 # 'n'
.int 105 # 'i'
.int 110 # 'n'
.int 103 # 'g'
.int 32 # ' '
.int 112 # 'p'
.int 97 # 'a'
.int 114 # 'r'
.int 101 # 'e'
.int 110 # 'n'
.int 116 # 't'
.int 104 # 'h'
.int 101 # 'e'
.int 115 # 's'
.int 105 # 'i'
.int 115 # 's'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 97 # 'a'
.int 102 # 'f'
.int 116 # 't'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 102 # 'f'
.int 112 # 'p'
.int 117 # 'u'
.int 116 # 't'
.int 99 # 'c'
.int 0
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 114 # 'r'
.int 101 # 'e'
.int 115 # 's'
.int 115 # 's'
.int 105 # 'i'
.int 111 # 'o'
.int 110 # 'n'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 97 # 'a'
.int 102 # 'f'
.int 116 # 't'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 102 # 'f'
.int 112 # 'p'
.int 117 # 'u'
.int 116 # 't'
.int 99 # 'c'
.int 32 # ' '
.int 111 # 'o'
.int 112 # 'p'
.int 101 # 'e'
.int 110 # 'n'
.int 105 # 'i'
.int 110 # 'n'
.int 103 # 'g'
.int 32 # ' '
.int 112 # 'p'
.int 97 # 'a'
.int 114 # 'r'
.int 101 # 'e'
.int 110 # 'n'
.int 116 # 't'
.int 104 # 'h'
.int 101 # 'e'
.int 115 # 's'
.int 105 # 'i'
.int 115 # 's'
.int 0
.int 44 # ','
.int 0
.int 102 # 'f'
.int 112 # 'p'
.int 117 # 'u'
.int 116 # 't'
.int 99 # 'c'
.int 32 # ' '
.int 116 # 't'
.int 97 # 'a'
.int 107 # 'k'
.int 101 # 'e'
.int 115 # 's'
.int 32 # ' '
.int 116 # 't'
.int 119 # 'w'
.int 111 # 'o'
.int 32 # ' '
.int 97 # 'a'
.int 114 # 'r'
.int 103 # 'g'
.int 117 # 'u'
.int 109 # 'm'
.int 101 # 'e'
.int 110 # 'n'
.int 116 # 't'
.int 115 # 's'
.int 0
.int 115 # 's'
.int 116 # 't'
.int 100 # 'd'
.int 111 # 'o'
.int 117 # 'u'
.int 116 # 't'
.int 0
.int 115 # 's'
.int 116 # 't'
.int 100 # 'd'
.int 101 # 'e'
.int 114 # 'r'
.int 114 # 'r'
.int 0
.int 115 # 's'
.int 101 # 'e'
.int 99 # 'c'
.int 111 # 'o'
.int 110 # 'n'
.int 100 # 'd'
.int 32 # ' '
.int 97 # 'a'
.int 114 # 'r'
.int 103 # 'g'
.int 117 # 'u'
.int 109 # 'm'
.int 101 # 'e'
.int 110 # 'n'
.int 116 # 't'
.int 32 # ' '
.int 111 # 'o'
.int 102 # 'f'
.int 32 # ' '
.int 102 # 'f'
.int 112 # 'p'
.int 117 # 'u'
.int 116 # 't'
.int 99 # 'c'
.int 32 # ' '
.int 109 # 'm'
.int 117 # 'u'
.int 115 # 's'
.int 116 # 't'
.int 32 # ' '
.int 98 # 'b'
.int 101 # 'e'
.int 32 # ' '
.int 115 # 's'
.int 116 # 't'
.int 100 # 'd'
.int 111 # 'o'
.int 117 # 'u'
.int 116 # 't'
.int 32 # ' '
.int 111 # 'o'
.int 114 # 'r'
.int 32 # ' '
.int 115 # 's'
.int 116 # 't'
.int 100 # 'd'
.int 101 # 'e'
.int 114 # 'r'
.int 114 # 'r'
.int 0
.int 41 # ')'
.int 0
.int 99 # 'c'
.int 108 # 'l'
.int 111 # 'o'
.int 115 # 's'
.int 105 # 'i'
.int 110 # 'n'
.int 103 # 'g'
.int 32 # ' '
.int 112 # 'p'
.int 97 # 'a'
.int 114 # 'r'
.int 101 # 'e'
.int 110 # 'n'
.int 116 # 't'
.int 104 # 'h'
.int 101 # 'e'
.int 115 # 's'
.int 105 # 'i'
.int 115 # 's'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 0
.int 101 # 'e'
.int 120 # 'x'
.int 105 # 'i'
.int 116 # 't'
.int 0
.int 40 # '('
.int 0
.int 111 # 'o'
.int 112 # 'p'
.int 101 # 'e'
.int 110 # 'n'
.int 105 # 'i'
.int 110 # 'n'
.int 103 # 'g'
.int 32 # ' '
.int 112 # 'p'
.int 97 # 'a'
.int 114 # 'r'
.int 101 # 'e'
.int 110 # 'n'
.int 116 # 't'
.int 104 # 'h'
.int 101 # 'e'
.int 115 # 's'
.int 105 # 'i'
.int 115 # 's'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 97 # 'a'
.int 102 # 'f'
.int 116 # 't'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 105 # 'i'
.int 116 # 't'
.int 0
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 114 # 'r'
.int 101 # 'e'
.int 115 # 's'
.int 115 # 's'
.int 105 # 'i'
.int 111 # 'o'
.int 110 # 'n'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 97 # 'a'
.int 102 # 'f'
.int 116 # 't'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 105 # 'i'
.int 116 # 't'
.int 32 # ' '
.int 111 # 'o'
.int 112 # 'p'
.int 101 # 'e'
.int 110 # 'n'
.int 105 # 'i'
.int 110 # 'n'
.int 103 # 'g'
.int 32 # ' '
.int 112 # 'p'
.int 97 # 'a'
.int 114 # 'r'
.int 101 # 'e'
.int 110 # 'n'
.int 116 # 't'
.int 104 # 'h'
.int 101 # 'e'
.int 115 # 's'
.int 105 # 'i'
.int 115 # 's'
.int 0
.int 41 # ')'
.int 0
.int 99 # 'c'
.int 108 # 'l'
.int 111 # 'o'
.int 115 # 's'
.int 105 # 'i'
.int 110 # 'n'
.int 103 # 'g'
.int 32 # ' '
.int 112 # 'p'
.int 97 # 'a'
.int 114 # 'r'
.int 101 # 'e'
.int 110 # 'n'
.int 116 # 't'
.int 104 # 'h'
.int 101 # 'e'
.int 115 # 's'
.int 105 # 'i'
.int 115 # 's'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 0
.int 100 # 'd'
.int 101 # 'e'
.int 98 # 'b'
.int 117 # 'u'
.int 103 # 'g'
.int 0
.int 40 # '('
.int 0
.int 111 # 'o'
.int 112 # 'p'
.int 101 # 'e'
.int 110 # 'n'
.int 105 # 'i'
.int 110 # 'n'
.int 103 # 'g'
.int 32 # ' '
.int 112 # 'p'
.int 97 # 'a'
.int 114 # 'r'
.int 101 # 'e'
.int 110 # 'n'
.int 116 # 't'
.int 104 # 'h'
.int 101 # 'e'
.int 115 # 's'
.int 105 # 'i'
.int 115 # 's'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 97 # 'a'
.int 102 # 'f'
.int 116 # 't'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 100 # 'd'
.int 101 # 'e'
.int 98 # 'b'
.int 117 # 'u'
.int 103 # 'g'
.int 0
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 114 # 'r'
.int 101 # 'e'
.int 115 # 's'
.int 115 # 's'
.int 105 # 'i'
.int 111 # 'o'
.int 110 # 'n'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 97 # 'a'
.int 102 # 'f'
.int 116 # 't'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 100 # 'd'
.int 101 # 'e'
.int 98 # 'b'
.int 117 # 'u'
.int 103 # 'g'
.int 32 # ' '
.int 111 # 'o'
.int 112 # 'p'
.int 101 # 'e'
.int 110 # 'n'
.int 105 # 'i'
.int 110 # 'n'
.int 103 # 'g'
.int 32 # ' '
.int 112 # 'p'
.int 97 # 'a'
.int 114 # 'r'
.int 101 # 'e'
.int 110 # 'n'
.int 116 # 't'
.int 104 # 'h'
.int 101 # 'e'
.int 115 # 's'
.int 105 # 'i'
.int 115 # 's'
.int 0
.int 41 # ')'
.int 0
.int 99 # 'c'
.int 108 # 'l'
.int 111 # 'o'
.int 115 # 's'
.int 105 # 'i'
.int 110 # 'n'
.int 103 # 'g'
.int 32 # ' '
.int 112 # 'p'
.int 97 # 'a'
.int 114 # 'r'
.int 101 # 'e'
.int 110 # 'n'
.int 116 # 't'
.int 104 # 'h'
.int 101 # 'e'
.int 115 # 's'
.int 105 # 'i'
.int 115 # 's'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 0
.int 91 # '['
.int 0
.int 44 # ','
.int 0
.int 40 # '('
.int 0
.int 41 # ')'
.int 0
.int 99 # 'c'
.int 108 # 'l'
.int 111 # 'o'
.int 115 # 's'
.int 105 # 'i'
.int 110 # 'n'
.int 103 # 'g'
.int 32 # ' '
.int 112 # 'p'
.int 97 # 'a'
.int 114 # 'r'
.int 101 # 'e'
.int 110 # 'n'
.int 116 # 't'
.int 104 # 'h'
.int 101 # 'e'
.int 115 # 's'
.int 105 # 'i'
.int 115 # 's'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 97 # 'a'
.int 102 # 'f'
.int 116 # 't'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 102 # 'f'
.int 117 # 'u'
.int 110 # 'n'
.int 99 # 'c'
.int 116 # 't'
.int 105 # 'i'
.int 111 # 'o'
.int 110 # 'n'
.int 32 # ' '
.int 99 # 'c'
.int 97 # 'a'
.int 108 # 'l'
.int 108 # 'l'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 114 # 'r'
.int 101 # 'e'
.int 115 # 's'
.int 115 # 's'
.int 105 # 'i'
.int 111 # 'o'
.int 110 # 'n'
.int 0
.int 91 # '['
.int 0
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 114 # 'r'
.int 101 # 'e'
.int 115 # 's'
.int 115 # 's'
.int 105 # 'i'
.int 111 # 'o'
.int 110 # 'n'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 97 # 'a'
.int 102 # 'f'
.int 116 # 't'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 111 # 'o'
.int 112 # 'p'
.int 101 # 'e'
.int 110 # 'n'
.int 105 # 'i'
.int 110 # 'n'
.int 103 # 'g'
.int 32 # ' '
.int 98 # 'b'
.int 114 # 'r'
.int 97 # 'a'
.int 99 # 'c'
.int 107 # 'k'
.int 101 # 'e'
.int 116 # 't'
.int 0
.int 93 # ']'
.int 0
.int 99 # 'c'
.int 108 # 'l'
.int 111 # 'o'
.int 115 # 's'
.int 105 # 'i'
.int 110 # 'n'
.int 103 # 'g'
.int 32 # ' '
.int 98 # 'b'
.int 114 # 'r'
.int 97 # 'a'
.int 99 # 'c'
.int 107 # 'k'
.int 101 # 'e'
.int 116 # 't'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 0
.int 40 # '('
.int 0
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 114 # 'r'
.int 101 # 'e'
.int 115 # 's'
.int 115 # 's'
.int 105 # 'i'
.int 111 # 'o'
.int 110 # 'n'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 97 # 'a'
.int 102 # 'f'
.int 116 # 't'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 111 # 'o'
.int 112 # 'p'
.int 101 # 'e'
.int 110 # 'n'
.int 105 # 'i'
.int 110 # 'n'
.int 103 # 'g'
.int 32 # ' '
.int 112 # 'p'
.int 97 # 'a'
.int 114 # 'r'
.int 101 # 'e'
.int 110 # 'n'
.int 116 # 't'
.int 104 # 'h'
.int 101 # 'e'
.int 115 # 's'
.int 105 # 'i'
.int 115 # 's'
.int 0
.int 41 # ')'
.int 0
.int 99 # 'c'
.int 108 # 'l'
.int 111 # 'o'
.int 115 # 's'
.int 105 # 'i'
.int 110 # 'n'
.int 103 # 'g'
.int 32 # ' '
.int 112 # 'p'
.int 97 # 'a'
.int 114 # 'r'
.int 101 # 'e'
.int 110 # 'n'
.int 116 # 't'
.int 104 # 'h'
.int 101 # 'e'
.int 115 # 's'
.int 105 # 'i'
.int 115 # 's'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 97 # 'a'
.int 102 # 'f'
.int 116 # 't'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 114 # 'r'
.int 101 # 'e'
.int 115 # 's'
.int 115 # 's'
.int 105 # 'i'
.int 111 # 'o'
.int 110 # 'n'
.int 0
.int 32 # ' '
.int 33 # '!'
.int 32 # ' '
.int 43 # '+'
.int 32 # ' '
.int 45 # '-'
.int 32 # ' '
.int 0
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 114 # 'r'
.int 101 # 'e'
.int 115 # 's'
.int 115 # 's'
.int 105 # 'i'
.int 111 # 'o'
.int 110 # 'n'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 97 # 'a'
.int 102 # 'f'
.int 116 # 't'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 117 # 'u'
.int 110 # 'n'
.int 97 # 'a'
.int 114 # 'r'
.int 121 # 'y'
.int 32 # ' '
.int 111 # 'o'
.int 112 # 'p'
.int 101 # 'e'
.int 114 # 'r'
.int 97 # 'a'
.int 116 # 't'
.int 111 # 'o'
.int 114 # 'r'
.int 0
.int 32 # ' '
.int 42 # '*'
.int 32 # ' '
.int 47 # '/'
.int 32 # ' '
.int 0
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 114 # 'r'
.int 101 # 'e'
.int 115 # 's'
.int 115 # 's'
.int 105 # 'i'
.int 111 # 'o'
.int 110 # 'n'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 97 # 'a'
.int 102 # 'f'
.int 116 # 't'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 117 # 'u'
.int 110 # 'n'
.int 97 # 'a'
.int 114 # 'r'
.int 121 # 'y'
.int 32 # ' '
.int 111 # 'o'
.int 112 # 'p'
.int 101 # 'e'
.int 114 # 'r'
.int 97 # 'a'
.int 116 # 't'
.int 111 # 'o'
.int 114 # 'r'
.int 0
.int 32 # ' '
.int 43 # '+'
.int 32 # ' '
.int 45 # '-'
.int 32 # ' '
.int 0
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 114 # 'r'
.int 101 # 'e'
.int 115 # 's'
.int 115 # 's'
.int 105 # 'i'
.int 111 # 'o'
.int 110 # 'n'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 114 # 'r'
.int 105 # 'i'
.int 103 # 'g'
.int 104 # 'h'
.int 116 # 't'
.int 32 # ' '
.int 111 # 'o'
.int 102 # 'f'
.int 32 # ' '
.int 97 # 'a'
.int 100 # 'd'
.int 100 # 'd'
.int 105 # 'i'
.int 116 # 't'
.int 105 # 'i'
.int 118 # 'v'
.int 101 # 'e'
.int 32 # ' '
.int 111 # 'o'
.int 112 # 'p'
.int 101 # 'e'
.int 114 # 'r'
.int 97 # 'a'
.int 116 # 't'
.int 111 # 'o'
.int 114 # 'r'
.int 0
.int 32 # ' '
.int 60 # '<'
.int 32 # ' '
.int 60 # '<'
.int 61 # '='
.int 32 # ' '
.int 62 # '>'
.int 32 # ' '
.int 62 # '>'
.int 61 # '='
.int 32 # ' '
.int 0
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 114 # 'r'
.int 101 # 'e'
.int 115 # 's'
.int 115 # 's'
.int 105 # 'i'
.int 111 # 'o'
.int 110 # 'n'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 114 # 'r'
.int 105 # 'i'
.int 103 # 'g'
.int 104 # 'h'
.int 116 # 't'
.int 32 # ' '
.int 111 # 'o'
.int 102 # 'f'
.int 32 # ' '
.int 114 # 'r'
.int 101 # 'e'
.int 108 # 'l'
.int 97 # 'a'
.int 116 # 't'
.int 105 # 'i'
.int 111 # 'o'
.int 110 # 'n'
.int 97 # 'a'
.int 108 # 'l'
.int 32 # ' '
.int 111 # 'o'
.int 112 # 'p'
.int 101 # 'e'
.int 114 # 'r'
.int 97 # 'a'
.int 116 # 't'
.int 111 # 'o'
.int 114 # 'r'
.int 0
.int 32 # ' '
.int 61 # '='
.int 61 # '='
.int 32 # ' '
.int 33 # '!'
.int 61 # '='
.int 32 # ' '
.int 0
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 114 # 'r'
.int 101 # 'e'
.int 115 # 's'
.int 115 # 's'
.int 105 # 'i'
.int 111 # 'o'
.int 110 # 'n'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 114 # 'r'
.int 105 # 'i'
.int 103 # 'g'
.int 104 # 'h'
.int 116 # 't'
.int 32 # ' '
.int 111 # 'o'
.int 102 # 'f'
.int 32 # ' '
.int 101 # 'e'
.int 113 # 'q'
.int 117 # 'u'
.int 97 # 'a'
.int 108 # 'l'
.int 105 # 'i'
.int 116 # 't'
.int 121 # 'y'
.int 32 # ' '
.int 111 # 'o'
.int 112 # 'p'
.int 101 # 'e'
.int 114 # 'r'
.int 97 # 'a'
.int 116 # 't'
.int 111 # 'o'
.int 114 # 'r'
.int 0
.int 38 # '&'
.int 38 # '&'
.int 0
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 114 # 'r'
.int 101 # 'e'
.int 115 # 's'
.int 115 # 's'
.int 105 # 'i'
.int 111 # 'o'
.int 110 # 'n'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 114 # 'r'
.int 105 # 'i'
.int 103 # 'g'
.int 104 # 'h'
.int 116 # 't'
.int 32 # ' '
.int 111 # 'o'
.int 102 # 'f'
.int 32 # ' '
.int 108 # 'l'
.int 111 # 'o'
.int 103 # 'g'
.int 105 # 'i'
.int 99 # 'c'
.int 97 # 'a'
.int 108 # 'l'
.int 32 # ' '
.int 97 # 'a'
.int 110 # 'n'
.int 100 # 'd'
.int 0
.int 38 # '&'
.int 38 # '&'
.int 0
.int 124 # '|'
.int 124 # '|'
.int 0
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 114 # 'r'
.int 101 # 'e'
.int 115 # 's'
.int 115 # 's'
.int 105 # 'i'
.int 111 # 'o'
.int 110 # 'n'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 114 # 'r'
.int 105 # 'i'
.int 103 # 'g'
.int 104 # 'h'
.int 116 # 't'
.int 32 # ' '
.int 111 # 'o'
.int 102 # 'f'
.int 32 # ' '
.int 108 # 'l'
.int 111 # 'o'
.int 103 # 'g'
.int 105 # 'i'
.int 99 # 'c'
.int 97 # 'a'
.int 108 # 'l'
.int 45 # '-'
.int 111 # 'o'
.int 114 # 'r'
.int 32 # ' '
.int 111 # 'o'
.int 112 # 'p'
.int 101 # 'e'
.int 114 # 'r'
.int 97 # 'a'
.int 116 # 't'
.int 111 # 'o'
.int 114 # 'r'
.int 0
.int 124 # '|'
.int 124 # '|'
.int 0
.int 40 # '('
.int 0
.int 41 # ')'
.int 0
.int 99 # 'c'
.int 108 # 'l'
.int 111 # 'o'
.int 115 # 's'
.int 105 # 'i'
.int 110 # 'n'
.int 103 # 'g'
.int 32 # ' '
.int 112 # 'p'
.int 97 # 'a'
.int 114 # 'r'
.int 101 # 'e'
.int 110 # 'n'
.int 116 # 't'
.int 104 # 'h'
.int 101 # 'e'
.int 115 # 's'
.int 105 # 'i'
.int 115 # 's'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 97 # 'a'
.int 102 # 'f'
.int 116 # 't'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 102 # 'f'
.int 117 # 'u'
.int 110 # 'n'
.int 99 # 'c'
.int 116 # 't'
.int 105 # 'i'
.int 111 # 'o'
.int 110 # 'n'
.int 32 # ' '
.int 99 # 'c'
.int 97 # 'a'
.int 108 # 'l'
.int 108 # 'l'
.int 0
.int 114 # 'r'
.int 101 # 'e'
.int 116 # 't'
.int 117 # 'u'
.int 114 # 'r'
.int 110 # 'n'
.int 0
.int 61 # '='
.int 0
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 114 # 'r'
.int 101 # 'e'
.int 115 # 's'
.int 115 # 's'
.int 105 # 'i'
.int 111 # 'o'
.int 110 # 'n'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 97 # 'a'
.int 102 # 'f'
.int 116 # 't'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 101 # 'e'
.int 113 # 'q'
.int 117 # 'u'
.int 97 # 'a'
.int 108 # 'l'
.int 32 # ' '
.int 115 # 's'
.int 105 # 'i'
.int 103 # 'g'
.int 110 # 'n'
.int 0
.int 91 # '['
.int 0
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 114 # 'r'
.int 101 # 'e'
.int 115 # 's'
.int 115 # 's'
.int 105 # 'i'
.int 111 # 'o'
.int 110 # 'n'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 119 # 'w'
.int 105 # 'i'
.int 116 # 't'
.int 104 # 'h'
.int 105 # 'i'
.int 110 # 'n'
.int 32 # ' '
.int 97 # 'a'
.int 114 # 'r'
.int 114 # 'r'
.int 97 # 'a'
.int 121 # 'y'
.int 32 # ' '
.int 105 # 'i'
.int 110 # 'n'
.int 100 # 'd'
.int 101 # 'e'
.int 120 # 'x'
.int 0
.int 93 # ']'
.int 0
.int 99 # 'c'
.int 108 # 'l'
.int 111 # 'o'
.int 115 # 's'
.int 105 # 'i'
.int 110 # 'n'
.int 103 # 'g'
.int 32 # ' '
.int 98 # 'b'
.int 114 # 'r'
.int 97 # 'a'
.int 99 # 'c'
.int 107 # 'k'
.int 101 # 'e'
.int 116 # 't'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 97 # 'a'
.int 102 # 'f'
.int 116 # 't'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 97 # 'a'
.int 114 # 'r'
.int 114 # 'r'
.int 97 # 'a'
.int 121 # 'y'
.int 32 # ' '
.int 105 # 'i'
.int 110 # 'n'
.int 100 # 'd'
.int 101 # 'e'
.int 120 # 'x'
.int 0
.int 61 # '='
.int 0
.int 101 # 'e'
.int 113 # 'q'
.int 117 # 'u'
.int 97 # 'a'
.int 108 # 'l'
.int 32 # ' '
.int 115 # 's'
.int 105 # 'i'
.int 103 # 'g'
.int 110 # 'n'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 97 # 'a'
.int 102 # 'f'
.int 116 # 't'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 97 # 'a'
.int 114 # 'r'
.int 114 # 'r'
.int 97 # 'a'
.int 121 # 'y'
.int 32 # ' '
.int 105 # 'i'
.int 110 # 'n'
.int 100 # 'd'
.int 101 # 'e'
.int 120 # 'x'
.int 0
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 114 # 'r'
.int 101 # 'e'
.int 115 # 's'
.int 115 # 's'
.int 105 # 'i'
.int 111 # 'o'
.int 110 # 'n'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 97 # 'a'
.int 102 # 'f'
.int 116 # 't'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 101 # 'e'
.int 113 # 'q'
.int 117 # 'u'
.int 97 # 'a'
.int 108 # 'l'
.int 32 # ' '
.int 115 # 's'
.int 105 # 'i'
.int 103 # 'g'
.int 110 # 'n'
.int 0
.int 119 # 'w'
.int 104 # 'h'
.int 105 # 'i'
.int 108 # 'l'
.int 101 # 'e'
.int 0
.int 40 # '('
.int 0
.int 111 # 'o'
.int 112 # 'p'
.int 101 # 'e'
.int 110 # 'n'
.int 105 # 'i'
.int 110 # 'n'
.int 103 # 'g'
.int 32 # ' '
.int 112 # 'p'
.int 97 # 'a'
.int 114 # 'r'
.int 101 # 'e'
.int 110 # 'n'
.int 116 # 't'
.int 104 # 'h'
.int 101 # 'e'
.int 115 # 's'
.int 105 # 'i'
.int 115 # 's'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 97 # 'a'
.int 102 # 'f'
.int 116 # 't'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 119 # 'w'
.int 104 # 'h'
.int 105 # 'i'
.int 108 # 'l'
.int 101 # 'e'
.int 32 # ' '
.int 107 # 'k'
.int 101 # 'e'
.int 121 # 'y'
.int 119 # 'w'
.int 111 # 'o'
.int 114 # 'r'
.int 100 # 'd'
.int 0
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 114 # 'r'
.int 101 # 'e'
.int 115 # 's'
.int 115 # 's'
.int 105 # 'i'
.int 111 # 'o'
.int 110 # 'n'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 105 # 'i'
.int 110 # 'n'
.int 32 # ' '
.int 119 # 'w'
.int 104 # 'h'
.int 105 # 'i'
.int 108 # 'l'
.int 101 # 'e'
.int 32 # ' '
.int 115 # 's'
.int 116 # 't'
.int 97 # 'a'
.int 116 # 't'
.int 101 # 'e'
.int 109 # 'm'
.int 101 # 'e'
.int 110 # 'n'
.int 116 # 't'
.int 0
.int 41 # ')'
.int 0
.int 99 # 'c'
.int 108 # 'l'
.int 111 # 'o'
.int 115 # 's'
.int 105 # 'i'
.int 110 # 'n'
.int 103 # 'g'
.int 32 # ' '
.int 112 # 'p'
.int 97 # 'a'
.int 114 # 'r'
.int 101 # 'e'
.int 110 # 'n'
.int 116 # 't'
.int 104 # 'h'
.int 101 # 'e'
.int 115 # 's'
.int 105 # 'i'
.int 115 # 's'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 97 # 'a'
.int 102 # 'f'
.int 116 # 't'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 119 # 'w'
.int 104 # 'h'
.int 105 # 'i'
.int 108 # 'l'
.int 101 # 'e'
.int 32 # ' '
.int 115 # 's'
.int 116 # 't'
.int 97 # 'a'
.int 116 # 't'
.int 101 # 'e'
.int 109 # 'm'
.int 101 # 'e'
.int 110 # 'n'
.int 116 # 't'
.int 0
.int 115 # 's'
.int 116 # 't'
.int 97 # 'a'
.int 116 # 't'
.int 101 # 'e'
.int 109 # 'm'
.int 101 # 'e'
.int 110 # 'n'
.int 116 # 't'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 97 # 'a'
.int 102 # 'f'
.int 116 # 't'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 119 # 'w'
.int 104 # 'h'
.int 105 # 'i'
.int 108 # 'l'
.int 101 # 'e'
.int 0
.int 105 # 'i'
.int 102 # 'f'
.int 0
.int 40 # '('
.int 0
.int 111 # 'o'
.int 112 # 'p'
.int 101 # 'e'
.int 110 # 'n'
.int 105 # 'i'
.int 110 # 'n'
.int 103 # 'g'
.int 32 # ' '
.int 112 # 'p'
.int 97 # 'a'
.int 114 # 'r'
.int 101 # 'e'
.int 110 # 'n'
.int 116 # 't'
.int 104 # 'h'
.int 101 # 'e'
.int 115 # 's'
.int 105 # 'i'
.int 115 # 's'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 97 # 'a'
.int 102 # 'f'
.int 116 # 't'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 105 # 'i'
.int 102 # 'f'
.int 32 # ' '
.int 107 # 'k'
.int 101 # 'e'
.int 121 # 'y'
.int 119 # 'w'
.int 111 # 'o'
.int 114 # 'r'
.int 100 # 'd'
.int 0
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 114 # 'r'
.int 101 # 'e'
.int 115 # 's'
.int 115 # 's'
.int 105 # 'i'
.int 111 # 'o'
.int 110 # 'n'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 105 # 'i'
.int 110 # 'n'
.int 32 # ' '
.int 105 # 'i'
.int 102 # 'f'
.int 32 # ' '
.int 115 # 's'
.int 116 # 't'
.int 97 # 'a'
.int 116 # 't'
.int 101 # 'e'
.int 109 # 'm'
.int 101 # 'e'
.int 110 # 'n'
.int 116 # 't'
.int 0
.int 41 # ')'
.int 0
.int 99 # 'c'
.int 108 # 'l'
.int 111 # 'o'
.int 115 # 's'
.int 105 # 'i'
.int 110 # 'n'
.int 103 # 'g'
.int 32 # ' '
.int 112 # 'p'
.int 97 # 'a'
.int 114 # 'r'
.int 101 # 'e'
.int 110 # 'n'
.int 116 # 't'
.int 104 # 'h'
.int 101 # 'e'
.int 115 # 's'
.int 105 # 'i'
.int 115 # 's'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 97 # 'a'
.int 102 # 'f'
.int 116 # 't'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 105 # 'i'
.int 102 # 'f'
.int 32 # ' '
.int 115 # 's'
.int 116 # 't'
.int 97 # 'a'
.int 116 # 't'
.int 101 # 'e'
.int 109 # 'm'
.int 101 # 'e'
.int 110 # 'n'
.int 116 # 't'
.int 0
.int 115 # 's'
.int 116 # 't'
.int 97 # 'a'
.int 116 # 't'
.int 101 # 'e'
.int 109 # 'm'
.int 101 # 'e'
.int 110 # 'n'
.int 116 # 't'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 97 # 'a'
.int 102 # 'f'
.int 116 # 't'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 105 # 'i'
.int 102 # 'f'
.int 0
.int 101 # 'e'
.int 108 # 'l'
.int 115 # 's'
.int 101 # 'e'
.int 0
.int 115 # 's'
.int 116 # 't'
.int 97 # 'a'
.int 116 # 't'
.int 101 # 'e'
.int 109 # 'm'
.int 101 # 'e'
.int 110 # 'n'
.int 116 # 't'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 97 # 'a'
.int 102 # 'f'
.int 116 # 't'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 101 # 'e'
.int 108 # 'l'
.int 115 # 's'
.int 101 # 'e'
.int 0
.int 61 # '='
.int 0
.int 105 # 'i'
.int 110 # 'n'
.int 116 # 't'
.int 101 # 'e'
.int 103 # 'g'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 99 # 'c'
.int 111 # 'o'
.int 110 # 'n'
.int 115 # 's'
.int 116 # 't'
.int 97 # 'a'
.int 110 # 'n'
.int 116 # 't'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 97 # 'a'
.int 102 # 'f'
.int 116 # 't'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 101 # 'e'
.int 113 # 'q'
.int 117 # 'u'
.int 97 # 'a'
.int 108 # 'l'
.int 32 # ' '
.int 115 # 's'
.int 105 # 'i'
.int 103 # 'g'
.int 110 # 'n'
.int 32 # ' '
.int 105 # 'i'
.int 110 # 'n'
.int 32 # ' '
.int 101 # 'e'
.int 110 # 'n'
.int 117 # 'u'
.int 109 # 'm'
.int 32 # ' '
.int 100 # 'd'
.int 101 # 'e'
.int 99 # 'c'
.int 108 # 'l'
.int 97 # 'a'
.int 114 # 'r'
.int 97 # 'a'
.int 116 # 't'
.int 105 # 'i'
.int 111 # 'o'
.int 110 # 'n'
.int 0
.int 44 # ','
.int 0
.int 105 # 'i'
.int 100 # 'd'
.int 101 # 'e'
.int 110 # 'n'
.int 116 # 't'
.int 105 # 'i'
.int 102 # 'f'
.int 105 # 'i'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 97 # 'a'
.int 102 # 'f'
.int 116 # 't'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 99 # 'c'
.int 111 # 'o'
.int 109 # 'm'
.int 109 # 'm'
.int 97 # 'a'
.int 32 # ' '
.int 105 # 'i'
.int 110 # 'n'
.int 32 # ' '
.int 101 # 'e'
.int 110 # 'n'
.int 117 # 'u'
.int 109 # 'm'
.int 32 # ' '
.int 100 # 'd'
.int 101 # 'e'
.int 99 # 'c'
.int 108 # 'l'
.int 97 # 'a'
.int 114 # 'r'
.int 97 # 'a'
.int 116 # 't'
.int 105 # 'i'
.int 111 # 'o'
.int 110 # 'n'
.int 0
.int 105 # 'i'
.int 110 # 'n'
.int 116 # 't'
.int 0
.int 99 # 'c'
.int 104 # 'h'
.int 97 # 'a'
.int 114 # 'r'
.int 0
.int 105 # 'i'
.int 100 # 'd'
.int 101 # 'e'
.int 110 # 'n'
.int 116 # 't'
.int 105 # 'i'
.int 102 # 'f'
.int 105 # 'i'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 97 # 'a'
.int 102 # 'f'
.int 116 # 't'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 116 # 't'
.int 121 # 'y'
.int 112 # 'p'
.int 101 # 'e'
.int 32 # ' '
.int 115 # 's'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 105 # 'i'
.int 102 # 'f'
.int 105 # 'i'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 105 # 'i'
.int 110 # 'n'
.int 32 # ' '
.int 100 # 'd'
.int 101 # 'e'
.int 99 # 'c'
.int 108 # 'l'
.int 97 # 'a'
.int 114 # 'r'
.int 97 # 'a'
.int 116 # 't'
.int 105 # 'i'
.int 111 # 'o'
.int 110 # 'n'
.int 0
.int 91 # '['
.int 0
.int 59 # ';'
.int 0
.int 115 # 's'
.int 101 # 'e'
.int 109 # 'm'
.int 105 # 'i'
.int 99 # 'c'
.int 111 # 'o'
.int 108 # 'l'
.int 111 # 'o'
.int 110 # 'n'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 97 # 'a'
.int 102 # 'f'
.int 116 # 't'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 100 # 'd'
.int 101 # 'e'
.int 99 # 'c'
.int 108 # 'l'
.int 97 # 'a'
.int 114 # 'r'
.int 97 # 'a'
.int 116 # 't'
.int 105 # 'i'
.int 111 # 'o'
.int 110 # 'n'
.int 0
.int 105 # 'i'
.int 100 # 'd'
.int 101 # 'e'
.int 110 # 'n'
.int 116 # 't'
.int 105 # 'i'
.int 102 # 'f'
.int 105 # 'i'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 111 # 'o'
.int 114 # 'r'
.int 32 # ' '
.int 105 # 'i'
.int 110 # 'n'
.int 116 # 't'
.int 101 # 'e'
.int 103 # 'g'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 99 # 'c'
.int 111 # 'o'
.int 110 # 'n'
.int 115 # 's'
.int 116 # 't'
.int 97 # 'a'
.int 110 # 'n'
.int 116 # 't'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 97 # 'a'
.int 102 # 'f'
.int 116 # 't'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 111 # 'o'
.int 112 # 'p'
.int 101 # 'e'
.int 110 # 'n'
.int 105 # 'i'
.int 110 # 'n'
.int 103 # 'g'
.int 32 # ' '
.int 98 # 'b'
.int 114 # 'r'
.int 97 # 'a'
.int 99 # 'c'
.int 107 # 'k'
.int 101 # 'e'
.int 116 # 't'
.int 32 # ' '
.int 105 # 'i'
.int 110 # 'n'
.int 32 # ' '
.int 97 # 'a'
.int 114 # 'r'
.int 114 # 'r'
.int 97 # 'a'
.int 121 # 'y'
.int 32 # ' '
.int 100 # 'd'
.int 101 # 'e'
.int 99 # 'c'
.int 108 # 'l'
.int 97 # 'a'
.int 114 # 'r'
.int 97 # 'a'
.int 116 # 't'
.int 105 # 'i'
.int 111 # 'o'
.int 110 # 'n'
.int 0
.int 93 # ']'
.int 0
.int 99 # 'c'
.int 108 # 'l'
.int 111 # 'o'
.int 115 # 's'
.int 105 # 'i'
.int 110 # 'n'
.int 103 # 'g'
.int 32 # ' '
.int 98 # 'b'
.int 114 # 'r'
.int 97 # 'a'
.int 99 # 'c'
.int 107 # 'k'
.int 101 # 'e'
.int 116 # 't'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 105 # 'i'
.int 110 # 'n'
.int 32 # ' '
.int 97 # 'a'
.int 114 # 'r'
.int 114 # 'r'
.int 97 # 'a'
.int 121 # 'y'
.int 32 # ' '
.int 100 # 'd'
.int 101 # 'e'
.int 99 # 'c'
.int 108 # 'l'
.int 97 # 'a'
.int 114 # 'r'
.int 97 # 'a'
.int 116 # 't'
.int 105 # 'i'
.int 111 # 'o'
.int 110 # 'n'
.int 0
.int 59 # ';'
.int 0
.int 115 # 's'
.int 101 # 'e'
.int 109 # 'm'
.int 105 # 'i'
.int 99 # 'c'
.int 111 # 'o'
.int 108 # 'l'
.int 111 # 'o'
.int 110 # 'n'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 97 # 'a'
.int 102 # 'f'
.int 116 # 't'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 97 # 'a'
.int 114 # 'r'
.int 114 # 'r'
.int 97 # 'a'
.int 121 # 'y'
.int 32 # ' '
.int 100 # 'd'
.int 101 # 'e'
.int 99 # 'c'
.int 108 # 'l'
.int 97 # 'a'
.int 114 # 'r'
.int 97 # 'a'
.int 116 # 't'
.int 105 # 'i'
.int 111 # 'o'
.int 110 # 'n'
.int 0
.int 101 # 'e'
.int 110 # 'n'
.int 117 # 'u'
.int 109 # 'm'
.int 0
.int 123 # '{'
.int 0
.int 111 # 'o'
.int 112 # 'p'
.int 101 # 'e'
.int 110 # 'n'
.int 105 # 'i'
.int 110 # 'n'
.int 103 # 'g'
.int 32 # ' '
.int 98 # 'b'
.int 114 # 'r'
.int 97 # 'a'
.int 99 # 'c'
.int 101 # 'e'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 97 # 'a'
.int 102 # 'f'
.int 116 # 't'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 101 # 'e'
.int 110 # 'n'
.int 117 # 'u'
.int 109 # 'm'
.int 32 # ' '
.int 107 # 'k'
.int 101 # 'e'
.int 121 # 'y'
.int 119 # 'w'
.int 111 # 'o'
.int 114 # 'r'
.int 100 # 'd'
.int 0
.int 101 # 'e'
.int 110 # 'n'
.int 117 # 'u'
.int 109 # 'm'
.int 101 # 'e'
.int 114 # 'r'
.int 97 # 'a'
.int 116 # 't'
.int 111 # 'o'
.int 114 # 'r'
.int 32 # ' '
.int 108 # 'l'
.int 105 # 'i'
.int 115 # 's'
.int 116 # 't'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 0
.int 125 # '}'
.int 0
.int 99 # 'c'
.int 108 # 'l'
.int 111 # 'o'
.int 115 # 's'
.int 105 # 'i'
.int 110 # 'n'
.int 103 # 'g'
.int 32 # ' '
.int 98 # 'b'
.int 114 # 'r'
.int 97 # 'a'
.int 99 # 'c'
.int 101 # 'e'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 97 # 'a'
.int 102 # 'f'
.int 116 # 't'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 101 # 'e'
.int 110 # 'n'
.int 117 # 'u'
.int 109 # 'm'
.int 101 # 'e'
.int 114 # 'r'
.int 97 # 'a'
.int 116 # 't'
.int 111 # 'o'
.int 114 # 'r'
.int 32 # ' '
.int 108 # 'l'
.int 105 # 'i'
.int 115 # 's'
.int 116 # 't'
.int 0
.int 59 # ';'
.int 0
.int 115 # 's'
.int 101 # 'e'
.int 109 # 'm'
.int 105 # 'i'
.int 99 # 'c'
.int 111 # 'o'
.int 108 # 'l'
.int 111 # 'o'
.int 110 # 'n'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 97 # 'a'
.int 102 # 'f'
.int 116 # 't'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 101 # 'e'
.int 110 # 'n'
.int 117 # 'u'
.int 109 # 'm'
.int 101 # 'e'
.int 114 # 'r'
.int 97 # 'a'
.int 116 # 't'
.int 111 # 'o'
.int 114 # 'r'
.int 32 # ' '
.int 100 # 'd'
.int 101 # 'e'
.int 99 # 'c'
.int 108 # 'l'
.int 97 # 'a'
.int 114 # 'r'
.int 97 # 'a'
.int 116 # 't'
.int 105 # 'i'
.int 111 # 'o'
.int 110 # 'n'
.int 0
.int 123 # '{'
.int 0
.int 125 # '}'
.int 0
.int 99 # 'c'
.int 108 # 'l'
.int 111 # 'o'
.int 115 # 's'
.int 105 # 'i'
.int 110 # 'n'
.int 103 # 'g'
.int 32 # ' '
.int 98 # 'b'
.int 114 # 'r'
.int 97 # 'a'
.int 99 # 'c'
.int 101 # 'e'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 97 # 'a'
.int 116 # 't'
.int 32 # ' '
.int 101 # 'e'
.int 110 # 'n'
.int 100 # 'd'
.int 32 # ' '
.int 111 # 'o'
.int 102 # 'f'
.int 32 # ' '
.int 99 # 'c'
.int 111 # 'o'
.int 109 # 'm'
.int 112 # 'p'
.int 111 # 'o'
.int 117 # 'u'
.int 110 # 'n'
.int 100 # 'd'
.int 32 # ' '
.int 115 # 's'
.int 116 # 't'
.int 97 # 'a'
.int 116 # 't'
.int 101 # 'e'
.int 109 # 'm'
.int 101 # 'e'
.int 110 # 'n'
.int 116 # 't'
.int 0
.int 59 # ';'
.int 0
.int 115 # 's'
.int 101 # 'e'
.int 109 # 'm'
.int 105 # 'i'
.int 99 # 'c'
.int 111 # 'o'
.int 108 # 'l'
.int 111 # 'o'
.int 110 # 'n'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 97 # 'a'
.int 102 # 'f'
.int 116 # 't'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 115 # 's'
.int 116 # 't'
.int 97 # 'a'
.int 116 # 't'
.int 101 # 'e'
.int 109 # 'm'
.int 101 # 'e'
.int 110 # 'n'
.int 116 # 't'
.int 0
.int 105 # 'i'
.int 100 # 'd'
.int 101 # 'e'
.int 110 # 'n'
.int 116 # 't'
.int 105 # 'i'
.int 102 # 'f'
.int 105 # 'i'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 97 # 'a'
.int 102 # 'f'
.int 116 # 't'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 116 # 't'
.int 121 # 'y'
.int 112 # 'p'
.int 101 # 'e'
.int 32 # ' '
.int 115 # 's'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 105 # 'i'
.int 102 # 'f'
.int 105 # 'i'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 105 # 'i'
.int 110 # 'n'
.int 32 # ' '
.int 102 # 'f'
.int 117 # 'u'
.int 110 # 'n'
.int 99 # 'c'
.int 116 # 't'
.int 105 # 'i'
.int 111 # 'o'
.int 110 # 'n'
.int 32 # ' '
.int 100 # 'd'
.int 101 # 'e'
.int 102 # 'f'
.int 105 # 'i'
.int 110 # 'n'
.int 105 # 'i'
.int 116 # 't'
.int 105 # 'i'
.int 111 # 'o'
.int 110 # 'n'
.int 0
.int 91 # '['
.int 0
.int 93 # ']'
.int 0
.int 99 # 'c'
.int 108 # 'l'
.int 111 # 'o'
.int 115 # 's'
.int 105 # 'i'
.int 110 # 'n'
.int 103 # 'g'
.int 32 # ' '
.int 98 # 'b'
.int 114 # 'r'
.int 97 # 'a'
.int 99 # 'c'
.int 107 # 'k'
.int 101 # 'e'
.int 116 # 't'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 97 # 'a'
.int 102 # 'f'
.int 116 # 't'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 97 # 'a'
.int 114 # 'r'
.int 114 # 'r'
.int 97 # 'a'
.int 121 # 'y'
.int 32 # ' '
.int 97 # 'a'
.int 114 # 'r'
.int 103 # 'g'
.int 117 # 'u'
.int 109 # 'm'
.int 101 # 'e'
.int 110 # 'n'
.int 116 # 't'
.int 32 # ' '
.int 100 # 'd'
.int 101 # 'e'
.int 99 # 'c'
.int 108 # 'l'
.int 97 # 'a'
.int 114 # 'r'
.int 97 # 'a'
.int 116 # 't'
.int 105 # 'i'
.int 111 # 'o'
.int 110 # 'n'
.int 0
.int 44 # ','
.int 0
.int 102 # 'f'
.int 117 # 'u'
.int 110 # 'n'
.int 99 # 'c'
.int 116 # 't'
.int 105 # 'i'
.int 111 # 'o'
.int 110 # 'n'
.int 32 # ' '
.int 97 # 'a'
.int 114 # 'r'
.int 103 # 'g'
.int 117 # 'u'
.int 109 # 'm'
.int 101 # 'e'
.int 110 # 'n'
.int 116 # 't'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 0
.int 123 # '{'
.int 0
.int 125 # '}'
.int 0
.int 99 # 'c'
.int 108 # 'l'
.int 111 # 'o'
.int 115 # 's'
.int 105 # 'i'
.int 110 # 'n'
.int 103 # 'g'
.int 32 # ' '
.int 98 # 'b'
.int 114 # 'r'
.int 97 # 'a'
.int 99 # 'c'
.int 101 # 'e'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 97 # 'a'
.int 116 # 't'
.int 32 # ' '
.int 101 # 'e'
.int 110 # 'n'
.int 100 # 'd'
.int 32 # ' '
.int 111 # 'o'
.int 102 # 'f'
.int 32 # ' '
.int 102 # 'f'
.int 117 # 'u'
.int 110 # 'n'
.int 99 # 'c'
.int 116 # 't'
.int 105 # 'i'
.int 111 # 'o'
.int 110 # 'n'
.int 0
.int 40 # '('
.int 0
.int 41 # ')'
.int 0
.int 99 # 'c'
.int 108 # 'l'
.int 111 # 'o'
.int 115 # 's'
.int 105 # 'i'
.int 110 # 'n'
.int 103 # 'g'
.int 32 # ' '
.int 112 # 'p'
.int 97 # 'a'
.int 114 # 'r'
.int 101 # 'e'
.int 110 # 'n'
.int 116 # 't'
.int 104 # 'h'
.int 101 # 'e'
.int 115 # 's'
.int 105 # 'i'
.int 115 # 's'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 97 # 'a'
.int 102 # 'f'
.int 116 # 't'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 102 # 'f'
.int 117 # 'u'
.int 110 # 'n'
.int 99 # 'c'
.int 116 # 't'
.int 105 # 'i'
.int 111 # 'o'
.int 110 # 'n'
.int 32 # ' '
.int 100 # 'd'
.int 101 # 'e'
.int 102 # 'f'
.int 105 # 'i'
.int 110 # 'n'
.int 105 # 'i'
.int 110 # 'n'
.int 116 # 't'
.int 105 # 'i'
.int 111 # 'o'
.int 110 # 'n'
.int 0
.int 102 # 'f'
.int 117 # 'u'
.int 110 # 'n'
.int 99 # 'c'
.int 116 # 't'
.int 105 # 'i'
.int 111 # 'o'
.int 110 # 'n'
.int 32 # ' '
.int 98 # 'b'
.int 111 # 'o'
.int 100 # 'd'
.int 121 # 'y'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 32 # ' '
.int 97 # 'a'
.int 102 # 'f'
.int 116 # 't'
.int 101 # 'e'
.int 114 # 'r'
.int 32 # ' '
.int 102 # 'f'
.int 117 # 'u'
.int 110 # 'n'
.int 99 # 'c'
.int 116 # 't'
.int 105 # 'i'
.int 111 # 'o'
.int 110 # 'n'
.int 32 # ' '
.int 100 # 'd'
.int 101 # 'e'
.int 102 # 'f'
.int 105 # 'i'
.int 110 # 'n'
.int 105 # 'i'
.int 110 # 'n'
.int 116 # 't'
.int 105 # 'i'
.int 111 # 'o'
.int 110 # 'n'
.int 0
.int 102 # 'f'
.int 117 # 'u'
.int 110 # 'n'
.int 99 # 'c'
.int 116 # 't'
.int 105 # 'i'
.int 111 # 'o'
.int 110 # 'n'
.int 32 # ' '
.int 111 # 'o'
.int 114 # 'r'
.int 32 # ' '
.int 118 # 'v'
.int 97 # 'a'
.int 114 # 'r'
.int 105 # 'i'
.int 97 # 'a'
.int 98 # 'b'
.int 108 # 'l'
.int 101 # 'e'
.int 32 # ' '
.int 100 # 'd'
.int 101 # 'e'
.int 99 # 'c'
.int 108 # 'l'
.int 97 # 'a'
.int 114 # 'r'
.int 97 # 'a'
.int 116 # 't'
.int 105 # 'i'
.int 111 # 'o'
.int 110 # 'n'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 0
.int 101 # 'e'
.int 110 # 'n'
.int 100 # 'd'
.int 32 # ' '
.int 111 # 'o'
.int 102 # 'f'
.int 32 # ' '
.int 102 # 'f'
.int 105 # 'i'
.int 108 # 'l'
.int 101 # 'e'
.int 32 # ' '
.int 101 # 'e'
.int 120 # 'x'
.int 112 # 'p'
.int 101 # 'e'
.int 99 # 'c'
.int 116 # 't'
.int 101 # 'e'
.int 100 # 'd'
.int 0
.end
